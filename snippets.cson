{

  # SHELL
  ".source.shell, .shell": {
    # COMMON
    "return": {
      "prefix": "r",
      "body": """
      return$0
      """,
    },
    "return 1": {
      "prefix": "r1",
      "body": """
      return 1$0
      """,
    },
    "return 0": {
      "prefix": "r0",
      "body": """
      return 0$0
      """,
    },
    "return n": {
      "prefix": "rn",
      "body": """
      return ${1:n}$0
      """,
    },
    "exit": {
      "prefix": "e",
      "body": """
      return$0
      """,
    },
    "exit 1": {
      "prefix": "e1",
      "body": """
      exit 1$0
      """,
    },
    "exit 0": {
      "prefix": "e0",
      "body": """
      exit 0$0
      """,
    },
    "exit n": {
      "prefix": "en",
      "body": """
      exit ${1:n}$0
      """,
    },
    "break": {
      "prefix": "br",
      "body": """
      break$0
      """,
    },
    "continue": {
      "prefix": "c",
      "body": """
      continue$0
      """,
    },
    "read": {
      "prefix": "rd",
      "body": """
      read$0
      """,
    },
    "while": {
      "prefix": "while",
      "body": """
      while [[ ${1:condition} ]]; do
        $2
      done$0
      """,
    },
    "for…in": {
      "prefix": "fori",
      "body": """
      for ${1:item} in ${2:list}; do
        $3
      done$0
      """,
    },
    "function foo()": {
      "prefix": "fa",
      "body": """
      function ${1:foo}($2) {
        $3
      }$0
      """,
    },
    "alias": {
      "prefix": "ali",
      "body": """
      alias ${1:foo}="${2:bar}"$0
      """,
    },
    "local foo": {
      "prefix": "loc",
      "body": """
      local ${1:foo}="${2:bar}"$0
      """,
    },
    "readonly foo": {
      "prefix": "rdo",
      "body": """
      readonly ${1:foo}="${2:bar}"$0
      """,
    },

    # IF
    "if": {
      "prefix": "if",
      "body": """
      if [[ ${1:condition} ]]; then
        ${2:# statements}
      fi$0
      """,
    },
    "if…else": {
      "prefix": "ife",
      "body": """
      if [[ ${1:condition} ]]; then
        ${2:# statements}
      else
        ${3:# statements}
      fi$0
      """,
    },
    "else": {
      "prefix": "el",
      "body": """
      else
        ${1:# statements}$0
      """,
    },
    "elif": {
      "prefix": "eif",
      "body": """
      elif [[ ${1:condition} ]]; then
        ${2:# statements}$0
      """,
    },
  },


  # PHP
  ".source.php .string.quoted.single": {
    "'. $foo .'": {
      "prefix": "..",
      "body": """
      '. ${1:\\$foo} .'$0
      """,
    },
  },

  ".text.html.php, .text.html": {
    "print_r": {
      "prefix": "pr",
      "body": """
      <?php echo '<pre>'; print_r($1); echo '</pre>'; ?>$0
      """,
    },
    "<?php": {
      "prefix": "ph",
      "body": """
      <?php$1$0
      """,
    },
    "<?php … ?>": {
      "prefix": "php",
      "body": """
      <?php${1: $2 }?>$0
      """,
    },
  },

  ".meta.embedded.block.php .source.php": {
    "elseif ()": {
      "prefix": "eif",
      "body": """
      \\} elseif ($1) \\{
        $2$0
      """,
    },
  },

  ".source.php .meta.class.php .meta.class.body.php": {
    "$this->foo": {
      "prefix": "$t",
      "body": """
      \\$this->${1:foo}$0
      """,
    },
    "$this->foo()": {
      "prefix": "$tm",
      "body": """
      \\$this->${1:foo}($2)$0
      """,
    },
  },

  ".source.php .meta.class.php .meta.class.body.php .constant.other.php": {
    "parent::$foo": {
      "prefix": "parv",
      "body": """
      parent::\\$${1:foo}$0
      """,
    },
    "parent::foo()": {
      "prefix": "parf",
      "body": """
      parent::${1:foo}($2)$0
      """,
    },
    "class property": {
      "prefix": "v",
      "body": """
      \\/**
      * The underlying string value.
      *
      * @var string
      *\\/
      ${1:\\$foo} ${2:= ${3:''}}$0
      """,
    },
    "class public property": {
      "prefix": "vv",
      "body": """
      \\/**
      * The underlying string value.
      *
      * @var string
      *\\/
      ${1:public} ${2:\\$foo} ${3:= ${4:''}}$0
      """,
    },
    "class method": {
      "prefix": "f",
      "body": """
      \\/**
      * Proxy dynamic properties onto methods.
      *
      * @param  string  \\$key
      * @return mixed
      *\\/
      function ${1:foo}($2)
      \\{
        $3
      \\}$0
      """,
    },
    "class public method": {
      "prefix": "ff",
      "body": """
      \\/**
      * Proxy dynamic properties onto methods.
      *
      * @param  string  \\$key
      * @return mixed
      *\\/
      ${1:public} function ${2:foo}($3)
      \\{
        $4
      \\}$0
      """,
    },
  },

  ".source.php": {
    "namespace": {
      "prefix": "ns",
      "body": """
      namespace ${1:App}$0
      """,
    },

    # Class
    "$class->method()": {
      "prefix": "cm",
      "body": """
      ${1:\\$class}->${2:method}($3)$0
      """,
    },
    "->method()": {
      "prefix": "-",
      "body": """
      ->${1:method}($2)$0
      """,
    },
    "public $var": {
      "prefix": "pbv",
      "body": """
      \\/**
      * The underlying string value.
      *
      * @var string
      *\\/
      public ${1:\\$var};$0
      """,
    },
    "public static $var": {
      "prefix": "pbsv",
      "body": """
      \\/**
      * The cache of value.
      *
      * @var string
      *\\/
      public static ${1:\\$var};$0
      """,
    },
    "public function()": {
      "prefix": "pbf",
      "body": """
      \\/**
      * The underlying function.
      *
      * @var string
      *\\/
      public function ${1:method}($2)
      \\{
        $3
      \\}$0
      """,
    },
    "public static function()": {
      "prefix": "pbsf",
      "body": """
      \\/**
      * The cache of function.
      *
      * @var string
      *\\/
      public static function ${1:method}($2)
      \\{
        $3
      \\}$0
      """,
    },
    # "public $var": {
    #   "prefix": "pbv",
    #   "body": """
    #   public ${1:\\$var} = ${2:null}$0
    #   """,
    # },
    # "public static $var": {
    #   "prefix": "pbsv",
    #   "body": """
    #   public static ${1:\\$var} = ${2:null}$0
    #   """,
    # },
    "private function()": {
      "prefix": "pvf",
      "body": """
      private function ${1:method}($2)
      \\{
        $3
      \\}$0
      """,
    },
    "private $var": {
      "prefix": "pvv",
      "body": """
      private ${1:\\$var} = ${2:null}$0
      """,
    },
    "private static function()": {
      "prefix": "pvsf",
      "body": """
      private static function ${1:method}($2)
      \\{
        $3
      \\}$0
      """,
    },
    "private static $var": {
      "prefix": "pvsv",
      "body": """
      private static ${1:\\$var} = ${2:null}$0
      """,
    },
    "protected function()": {
      "prefix": "ptf",
      "body": """
      protected function ${1:method}($2)
      \\{
        $3
      \\}$0
      """,
    },
    "protected $var": {
      "prefix": "ptv",
      "body": """
      protected ${1:\\$var} = ${2:null}$0
      """,
    },
    "protected static function()": {
      "prefix": "ptsf",
      "body": """
      protected static function ${1:method}($2)
      \\{
        $3
      \\}$0
      """,
    },
    "protected static $var": {
      "prefix": "ptsv",
      "body": """
      protected static ${1:\\$var} = ${2:null}$0
      """,
    },
    "__get()": {
      "prefix": "__g",
      "body": """
      \\/**
      * $1
      *\\/
      public function __get(${2:\\$key})
      \\{
          $3
      \\}$0
      """,
    },
    "__set()": {
      "prefix": "__s",
      "body": """
      \\/**
      * $1
      *
      *\\/
      public function __set(${2:\\$key}, ${3:\\$value})
      \\{
          $4
      \\}$0
      """,
    },
    "__proxy()": {
      "prefix": "__px",
      "body": """
      \\/**
      * Proxy dynamic properties onto methods.
      *
      * @param  string  \\$key
      * @return mixed
      *\\/
      public function __get(${1:\\$key})
      \\{
          return \\$this->\\{${1:\\$key}\\}();
      \\}$0
      """,
    },
    "__toString()": {
      "prefix": "__ts",
      "body": """
      \\/**
      * Get the raw string value.
      *
      * @return string
      *\\/
      public function __toString()
      \\{
          return (string) \\$this->value;
      \\}$0
      """,
    },
    "__construct": {
      "prefix": "__c",
      "body": """
      \\/**
      * Create a new instance of the class.
      *
      * @param  string  ${1:\\$value}
      * @return void
      *\\/
      public function __construct(${2:\\$value} ${4:= ${3:''}})
      \\{
          ${5:\\$this->value = (string) ${6:\\$value};}
      \\}$0
      """,
    },

    # Common
    "?> … <?php": {
      "prefix": "php",
      "body": """
      ?>$1<?php$0
      """,
    },

    # If … else …
    "if-function_exists": {
      "prefix": "if-fn-exts",
      "body": """
      if (function_exists('${1:func_name}')) {
        $2
      }$0
      """,
    },
    "if-!function_exists": {
      "prefix": "if-fn-nexts",
      "body": """
      if (!function_exists('${1:func_name}')) {
        function ${1:func_name}($2) {$3}
      }$0
      """,
    },
    "if …": {
      "prefix": "if",
      "body": """
      if ($1) \\{
        ${2:\\/\\/ code...}
      \\}$0
      """,
    },
    "if … else …": {
      "prefix": "ifel",
      "body": """
      if ($1) \\{
        ${2:\\/\\/ code...}
      \\} else \\{
        ${3:\\/\\/ code...}
      \\}$0
      """,
    },
    "else if …": {
      "prefix": "elif",
      "body": """
      elseif ($1) \\{
        ${2:\\/\\/ code...}
      \\}$0
      """,
    },
    "else …": {
      "prefix": "el",
      "body": """
      else \\{
        ${1:\\/\\/ code...}
      \\}$0
      """,
    },

    # Return
    "return": {
      "prefix": "r",
      "body": """
      return$0
      """,
    },
    "return false": {
      "prefix": "r0",
      "body": """
      return false$0
      """,
    },
    "return true": {
      "prefix": "r1",
      "body": """
      return true$0
      """,
    },
    "return null": {
      "prefix": "rn",
      "body": """
      return null$0
      """,
    },
    "return \\$var": {
      "prefix": "ra",
      "body": """
      return ${1:\\$var}$0
      """,
    },
    "return function ()": {
      "prefix": "rf",
      "body": """
      return function ($1) \\{$2\\}$0
      """,
    },

    # Function
    "function ()": {
      "prefix": "fn",
      "body": """
      function ($1) \\{$2\\}$0
      """,
    },
    "function foo()": {
      "prefix": "fa",
      "body": """
      function ${1:foo}($2) \\{$3\\}$0
      """,
    },
    "print_r": {
      "prefix": "pr",
      "body": """
      echo '<pre>'; print_r($1); echo '</pre>';$0
      """,
    },
  },


  # COFFEE
  ".source.coffee, .coffee": {
    # Snippet
    "Toolbar Spacer": {
      "prefix": "spacer",
      "body": """
      \\{ type: \\"spacer\\" \\}$0
      """,
    },
    "Toolbar Item": {
      "prefix": "toolbar-item",
      "body": """
      \\{
        type: \\"\\",
        callback: \\"\\",
        callback: [],
        callback: function (target) \\{

        \\},
        tooltip: \\"\\",
        text: \\"\\",
        html: \\"\\",
        icon: \\"\\",
        iconset: \\"\\",
        style: \\{
          color: \\"red\\",
          background: \\"green\\",
          border: \\"1px solid blue\\",
        \\},
        hover: \\{
          color: \\"red\\",
          background: \\"green\\",
          border: \\"1px solid blue\\",
        \\},
        url: \\"\\",
        file: \\"\\",
        class: [],
        show: \\{
          pattern: \\"\\",
          package: [],
          setting: \\"tree-view.autoReveal\\",
          function: function (editor) \\{
            return editor.isModified();
          \\},
        \\},
        hide: \\{
          grammar: \\"!Markdown\\",
        \\},
        disable: \\{
          grammar: [
            \\"json\\",
            \\"less\\",
          ],
        \\},
      \\}$0
      """,
    },
    "New Toolbar Item": {
      "prefix": "tbbtn",
      "body": """
      \\{
        type: \\"${1:button}\\",
        callback: [${2:custom\\:callback}],
        tooltip: \\"${3:Custom Callback}\\",
        icon: \\"${4:gear}\\",
        iconset: \\"${5:mdi}\\",
      \\}$0
      """,
    },
    "New Toolbar URL Item": {
      "prefix": "tburl",
      "body": """
      \\{
        type: \\"${1:url}\\",
        url: \\"${2:https\\:\\/\\/github.com\\/\\{repo-owner\\}\\/\\{repo-name\\}}\\",
        tooltip: \\"${3:Open on Github}\\",
        icon: \\"${4:git}\\",
        iconset: \\"${5:mdi}\\",
      \\}$0
      """,
    },
    "New Toolbar File Item": {
      "prefix": "tbfile",
      "body": """
      \\{
        type: \\"${1:file}\\",
        file: \\"${2:README.md}\\",
        tooltip: \\"${3:Open File}\\",
        icon: \\"${4:file}\\",
        iconset: \\"${5:mdi}\\",
      \\}$0
      """,
    },
    "New Toolbar Function Item": {
      "prefix": "tbfunc",
      "body": """
      \\{
        type: \\"${1:function}\\",
        callback: function (${2:editor}) \\{
          $3
        \\},
        tooltip: \\"${4:Run Function}\\",
        icon: \\"${5:function}\\",
        iconset: \\"${6:mdi}\\",
      \\}$0
      """,
    },
    "New Snippet Selector": {
      "prefix": "nss",
      "body": """
      \\"${1:selector}\\": \\{
        \\"${2:name}\\": \\{
          \\"prefix\\": \\"$3\\",
          \\"body\\": \\"\\"\\"
          $4
          \\"\\"\\",
        \\},
      \\}$0
      """,
    },
    "New Snippet Item": {
      "prefix": "asn",
      "body": """
      \\"${1:name}\\": {
        \\"prefix\\": \\"$2\\",
        \\"body\\": \\"\\"\\"
        $3
        \\"\\"\\",
      },$0
      """,
    },
  },


  # JAVASCRIPT
  ".source.js": {
    # Common
    "constructor": {
      "prefix": "c",
      "body": """
      constructor$0
      """,
    },
    "prototype": {
      "prefix": "p",
      "body": """
      prototype$0
      """,
    },
    "function": {
      "prefix": "f",
      "body": """
      function$0
      """,
    },
    "return": {
      "prefix": "r",
      "body": """
      return$0
      """,
    },
    "return true": {
      "prefix": "r1",
      "body": """
      return true$0
      """,
    },
    "return false": {
      "prefix": "r0",
      "body": """
      return false$0
      """,
    },
    "return null": {
      "prefix": "rn",
      "body": """
      return null$0
      """,
    },
    "return undefined": {
      "prefix": "ru",
      "body": """
      return undefined$0
      """,
    },
    "return function ()": {
      "prefix": "rfn",
      "body": """
      return function ($1) \\{$2\\}$0
      """,
    },
    "return foo": {
      "prefix": "ret",
      "body": """
      return ${1:foo}$0
      """,
    },

    # Import, Require
    "require()": {
      "prefix": "req",
      "body": """
      require($1)$0
      """,
    },
    "var foo = require()": {
      "prefix": "reqa",
      "body": """
      var ${1:foo} = require(${2:bar})$0
      """,
    },
    "import foo from ...": {
      "prefix": "imp",
      "body": """
      import ${1:foo} from ${2:bar}$0
      """,
    },

    # Console
    "console.clear": {
      "prefix": "cls",
      "body": """
      console.clear()$0
      """,
    },
    "console.log": {
      "prefix": "log",
      "body": """
      console.log($1)$0
      """,
    },
    "console.warn": {
      "prefix": "warn",
      "body": """
      console.warn($1)$0
      """,
    },
    "console.error": {
      "prefix": "error",
      "body": """
      console.error($1)$0
      """,
    },
    "console.info": {
      "prefix": "info",
      "body": """
      console.info($1)$0
      """,
    },
    "console.group": {
      "prefix": "group-log",
      "body": """
      console.group($1)
      ${2:\\/\\/ ...}
      console.groupEnd()$0
      """,
    },

    # Function
    "function ()": {
      "prefix": "fn",
      "body": """
      function ($1) \\{$2\\}$0
      """,
    },
    "function func_name()": {
      "prefix": "fa",
      "body": """
      function ${1:func_name}($2) \\{$3\\}$0
      """,
    },

    # Variable
    "var": {
      "prefix": "v",
      "body": """
      var$0
      """,
    },
    "var name": {
      "prefix": "va",
      "body": """
      var ${1:name}$0
      """,
    },
  },

}
