'*':
  'reg':
    'prefix': 'reg'
    'body': '''
    (\\\\(|\\\\[)(\\\\n?)\\\\s+|(\\\\n?)\\\\s+(\\\\]|\\\\))$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'reg0':
    'prefix': 'reg0'
    'body': '''
    (\\\\(|\\\\[)\\\\s+|(\\\\n?)\\\\s+(\\\\]|\\\\))$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'reg1':
    'prefix': 'regex1'
    'body': '''
    (\\\\(|\\\\[)\\\\s+|\\\\n?\\\\s+(\\\\n?\\\\]|\\\\n?\\\\))$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'reg2':
    'prefix': 'regex2'
    'body': '''
    (\\\\(|\\\\[)\\\\s+|\\\\n?\\\\s+(\\\\n?\\\\]|\\\\n?\\\\))$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'line ———':
    'prefix': 'line'
    'body': '''
    ${1:————————————————————————————————}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'getEditorAndCursor':
    'prefix': 'getac'
    'body': '''
    var __ = this.getEditorAndCursor(editor, selection);$0
    '''

'.text':
  'subscribers':
    'prefix': 'subscribers'
    'body': '''
    You\\'re receiving this newsletter because you have signed up for it on our website$0
    '''


# htaccess
'.source.htaccess':
	'IfModule':
		'prefix': 'if-module'
		'body': '''
		<IfModule ${1:module.c}>
		$2
		</IfModule>$0
		'''
		'rightLabelHTML': '<span class="snippet-label success">HTACCESS</span>'


# Shell
'.text.plain,
.source.shell':
  'function':
    'prefix': 'fn'
    'body': '''
    function ${1:foobar}() {
      ${2:# code}
    }$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'
    'rightLabelHTML': '<span class="snippet-label common"></span>'

  '#!/bin/bash':
    'prefix': 'bash'
    'body': '''
    #!/bin/bash$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'for..in':
    'prefix': 'for-in'
    'body': '''
    for ${1:item} in ${2:items}; do
      ${3:# ...}
    done$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'if..':
    'prefix': 'if'
    'body': '''
    if [[ ${1:condition} ]]; then
      ${2:# statements}
    fi$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'if..else':
    'prefix': 'if-else'
    'body': '''
    if [[ ${1:condition} ]]; then
      ${2:# statements}
    else
      ${3:# statements}
    fi$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'else..':
    'prefix': 'else'
    'body': '''
    else
      ${1:# statements}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'else..if':
    'prefix': 'else-if'
    'body': '''
    elif [[ ${1:condition} ]]; then
      ${2:# statements}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'while..':
    'prefix': 'while'
    'body': '''
    while [[ ${1:condition} ]]; do
      ${2:# statements}
    done$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'case':
    'prefix': 'case'
    'body': '''
    case ${1:word} in
      pattern)
      ;;
      *)
      ;;
    esac$0
    '''


# Coffeescript
'.source.coffee':
  'snippet with label':
    'prefix': 'label-snippet'
    'body': """
    '${1:name}':
      'prefix': '$2'
      'body': '''
      $3
      '''
      'rightLabelHTML': '<span class="snippet-label ${5:success|bi}">$4</span>$0'
    """
    'rightLabelHTML': '<span class="snippet-label success">COMMON</span>'
  'console.clear()':
    'prefix': 'clear-console'
    'body': '''
    console.clear()$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">console.clear()</span>'
  'Toolbar MDI Button':
    'prefix': 'mdi-button'
    'body': '''
    @toolBar.addButton
      callback:
        \'\': \'$2\'
      text: \'<i class="gc">${1:全}</i>\'
      html: true
      tooltip: \'$3\'
      type: \'button\'$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Toolbar Iconset Button':
    'prefix': 'icon-set-button'
    'body': '''
    @toolBar.addButton
      callback:
        \'\': \'$3\'
      tooltip: \'$4\'
      icon: \'${1:icon}\'
      iconset: \'${2:mdi}\'
      type: \'button\'$0
    '''


# All comments snippets
'.source.css':
  'Section comment':
    'prefix': 'section-comment'
    'body': '''
    /*
    |--------------------------------------------------------------------------
    | ${1:Comment Heading}
    |--------------------------------------------------------------------------
    */$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Block':
    'prefix': 'block'
    'body': '''
    /*
    |--------------------------------------------------------------------------
    | ${1:Comment Heading}
    |--------------------------------------------------------------------------
    */$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Line comment':
    'prefix': 'line-comment'
    'body': '''
    /* ${1:Describe the relevant details.} */$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Inline comment':
    'prefix': 'inline-comment'
    'body': '''
    // ${1:Describe the relevant details.}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'New stylesheet':
    'prefix': 'insert-stylesheet'
    'body': '''
    ${1:element} {
      ${2:/* Positioning */}
      ${3:/* Box-model */}
      ${4:/* Typography */}
      ${5:/* Visual */}
      ${6:/* Misc */}
    }$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Cover Image':
    'prefix': 'cover-img'
    'body': '''
    ${1:.img-content} {
      width: 50%;
      font-size: 0;
      line-height: 0;
      position: relative;
      letter-spacing: 0;
      background-size: cover;
      background-repeat: no-repeat;
      background-position: 50% 50%;
    }

    ${1:.img-content} img {
      min-width: 100%;
      min-height: 100%;
      height: auto;
      object-fit: cover;
      width: 100%;
    }$0
    '''

'.source.css.scss':
  '<svg><path d=\'...\'/></svg>':
    'prefix': 'svgp'
    'body': '''
    "data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${1:300}' height='${2:300}' viewBox='0 0 ${1:300} ${2:300}'%3E${4:%3Cpath d='${3:M60.858,129.642L30.163,60.579l20.81-4.05l9.402,26.003c2.916,8.116,6.081,17.52,8.701,24.691l0.215-0.041 c-0.514-8.361-0.703-17.343-0.806-26.452l-0.565-27.5l20.703-4.029l9.933,27.012c2.895,8.01,5.3,15.223,7.852,23.188l0.215-0.042 c-0.493-8.254-0.875-17.086-1.237-25.811L104.5,46.113l19.63-3.82l-3.737,75.764l-21.132,4.112L88.923,94.79 c-2.304-6.121-4.585-12.691-7.221-21.084l-0.214,0.041c0.491,8.812,0.84,15.758,0.806,22.444l0.02,29.276L60.858,129.642z}'/%3E}%3C/svg%3E"$0
    '''
  '<svg><text>...</text></svg>':
    'prefix': 'svgt'
    'body': '''
    "data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${1:300}' height='${2:300}' viewBox='0 0 ${1:300} ${2:300}'%3E${7:%3Ctext x="${3:60}" y="${4:80}" font-size="${5:1.1em}" font-weight="${6:bolder}"%3Efont-weight="bolder"%3C/text%3E}%3C/svg%3E"$0
    '''

  '@include':
    'prefix': 'inc'
    'body': '''
    @include ${2:$1;}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '@include media-breakpoint-...':
    'prefix': 'incme'
    'body': '''
    @include media-breakpoint-${1:up|down}($2) {
      $3
    }$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '@extend':
    'prefix': 'ext'
    'body': '''
    @extend $1;$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '@import':
    'prefix': 'imp'
    'body': '''
    @import "$1";$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'extract(...)':
    'prefix': 'ext'
    'body': '''
    extract(${1:\\$var}, ${2:1})$0
    '''


'.text.html':
  '<link...>':
    'prefix': 'link'
    'body': '''
    <link rel="${1:stylesheet${2:|canonical|icon|search}}" href="$3" type="${4:text/css${5:|image/x-icon}}" media="${6:all}" charset="${7:utf-8}" />$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">CSS</span>'
  '<meta ...>':
    'prefix': 'meta'
    'body': '''
    <meta ${1:name}="$2" content="$3">$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'holder.js image':
    'prefix': 'holder-img'
    'body': '''
    <img data-src="holder.js/${1:${2:300}x${3:300}}?${4:random=${5:yes}}" alt="${6:...}">$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'placeimg image':
    'prefix': 'place-img'
    'body': '''
    <img src="https://placeimg.com/${1:300}/${2:300}/${3:any|animals|arch|nature|people|tech}/${4:grayscale|sepia}" alt="${5:...}">$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '<!---->...<!---->':
    'prefix': 'block'
    'body': '''
    <!-- ${1:block container} : START -->
    $2
    <!-- ${1:block container} : END -->$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'script src':
    'prefix': 'script-src'
    'body': '''
    <script ${2:async }src="$1"></script>$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'div>container':
    'prefix': 'div-container'
    'body': '''
    <!-- #${1:foo} -->
    <div id="${1:foo}">
      ${2:<div class="container">
        ${3:<div class="row">
          ${4:<div class="col">
            $5
          </div>}
        </div>}
      </div>}
    </div>
    <!-- / #${1:foo} -->$0
    '''


'.text.html.php':
  '<?php echo... ?>':
    'prefix': 'echo'
    'body': '''
    <?php echo ${1:\\'$2\\'}; ?>$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">CSS</span>'
  '<link...>':
    'prefix': 'link'
    'body': '''
    <link rel="${1:stylesheet${2:|canonical|icon|search}}" href="$3" type="${4:text/css${5:|image/x-icon}}" media="${6:all}" charset="${7:utf-8}" />$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">CSS</span>'
  '<?php foreach () { ?>..<?php } ?>':
    'prefix': 'foreach'
    'body': '''
    <?php foreach (${1:\$var} as ${2:\$key}${4: => ${3:\$value}}) { ?>
      $5
    <?php } ?>$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '<?php if () { ?>..<?php } else { ?>..<?php } ?>':
    'prefix': 'ifelse'
    'body': '''
    <?php if ($1) { ?>
      $2
    <?php } else { ?>
      $3
    <?php } ?>$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '<?php if () { ?>..<?php } ?>':
    'prefix': 'if'
    'body': '''
    <?php if ($1) { ?>
      $2
    <?php } ?>$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '<?php...':
    'prefix': 'ph'
    'body': '''
    <?php$1
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '<?php...?>':
    'prefix': 'php'
    'body': '''
    <?php${1: $2 }?>$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'print_r':
    'prefix': 'pr'
    'body': '''
    <?php echo \\'<pre>\\'; print_r($1); echo \\'</pre>\\'; ?>$0
    '''


'.text.html.php.blade':
  '<link...>':
    'prefix': 'link'
    'body': '''
    <link rel="${1:stylesheet${2:|canonical|icon|search}}" href="$3" type="${4:text/css${5:|image/x-icon}}" media="${6:all}" charset="${7:utf-8}" />$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">CSS</span>'
  '@php':
    'prefix': 'php'
    'body': '''
    @php
    ${1://}
    @endphp$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '@component()':
    'prefix': 'component'
    'body': '''
    @component('${1:components}${2:}')
      ${3:}
    @endcomponent$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '@json()':
    'prefix': 'json'
    'body': '''
    @json(${1:\\$array})$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '@section()':
    'prefix': 'section'
    'body': '''
    @section('${1:name}'${2:, '$3'})${4:${5:...}@endsection}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  '@section':
    'prefix': 'sec'
    'disabled': true


'.source.php':
  'phpdoc':
    'prefix': 'doc'
    'body': '''
    /**
    * ${1:Register a binding with the container.}
    *
    * @param  string|array  $abstract
    * @param  \Closure|string|null  $concrete
    * @param  bool  $shared
    *
    * @return void
    */
    $0
    '''
    'leftLabelHTML': '<span class="snippet-label success">void</span>'

  'fn':
    'prefix': 'fn'
    'body': """
    function ${1:foobar}(${2:${3:\$args${4: = null}}${5:, ...}}) {
      ${6://}
    }$0
    """
    'leftLabelHTML': '<span class="snippet-label success">void</span>'
    'rightLabelHTML': '<span class="snippet-label success">echo \'...\';</span>'

  'if...fn...exists':
    'prefix': 'fne'
    'body': """
    if (!function_exists('${1:foobar}')) {
      function ${1:foobar}(${2:${3:\$args${4: = null}}${5:, ...}}) {
        ${6://}
      }$0
    }
    """
    'leftLabelHTML': '<span class="snippet-label success">void</span>'
    'rightLabelHTML': '<span class="snippet-label success">echo \'...\';</span>'

  'e':
    'prefix': 'e'

  'ec':
    'prefix': 'ec'
    'body': """
    echo ${1:'$2'};$0
    """
    'leftLabelHTML': '<span class="snippet-label success">void</span>'
    'rightLabelHTML': '<span class="snippet-label success">echo \'...\';</span>'

  'echo':
    'prefix': 'echo'

  'require...':
    'prefix': 'req'
    'body': '''
    require ${1:\\'$2\\'};$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'require_once...':
    'prefix': 'req1'
    'body': '''
    require_once ${1:\\'$2\\'};$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'include...':
    'prefix': 'inc'
    'body': '''
    include ${1:\\'$2\\'};$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'include_once...':
    'prefix': 'inc1'
    'body': '''
    include_once ${1:\\'$2\\'};$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'if ()...;':
    'prefix': 'if_in_line'
    'body': '''
    if ($1)$2;$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  # 'if...function_exists':
  #   'prefix': 'if_function_exists'
  #   'body': '''
  #   if (${2:}function_exists(\\'${1:function_name}\\')) {
  #     function ${1:function_name}($3) {
  #       ${4:// code}
  #     }
  #   }$0
  #   '''
  #   'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'if...defined':
    'prefix': 'if_defined'
    'body': '''
    if (${2:}defined(\\'${1:NAME}\\')) {
      define('${1:NAME}', ${3:\\'$4\\'});
    }$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'parse_str($str, $output)':
    'prefix': 'parse_str'
    'body': '''
    parse_str(${1:\\$str}, ${2:\\$output})$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  '<link...>':
    'prefix': 'link'
    'body': '''
    <link rel="${1:stylesheet${2:|canonical|icon|search}}" href="$3" type="${4:text/css${5:|image/x-icon}}" media="${6:all}" charset="${7:utf-8}" />$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">CSS</span>'

  'die()':
    'prefix': 'd'
    'body': '''
    die${1:($2)};$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'exit()':
    'prefix': 'ex'
    'body': '''
    exit${1:($2)};$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'break;':
    'prefix': 'br'
    'body': '''
    break;$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'return;':
    'prefix': 'ret'
    'body': '''
    ${1:return${2:\\ ${3:void}}};$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'Section comment':
    'prefix': 'section-comment'
    'body': '''
    /*
    |--------------------------------------------------------------------------
    | ${1:Comment Heading}
    |--------------------------------------------------------------------------
    */$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Block comment':
    'prefix': 'block'
    'body': '''
    /*
    * ${1:Comment heading}
    *
    * ${2:Describe the relevant details do that up here if it's important enough.}
    */
    $0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Line comment':
    'prefix': 'line-comment'
    'body': '''
    /* ${1:Describe the relevant details.} */$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Inline comment':
    'prefix': 'inline-comment'
    'body': '''
    // ${1:Describe the relevant details.}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'public function':
    'prefix': 'pbf'
    'body': '''
    public function ${1:functionName}($2) {
      ${3://}
    }$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'public static function':
    'prefix': 'psf'
    'body': '''
    public static function ${1:functionName}(${2:${3:\\\$args${4: = null}}${5:, ...}}) {
      ${6://}
    }$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'private function':
    'prefix': 'pvf'
    'body': '''
    private function ${1:functionName}($2) {
      ${3://}
    }$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'function()':
    'prefix': 'function'
    # 'body': '''
    # function ${1:functionName}(${2:args}) {
    #   ${3://}
    # }$0
    # '''
    # 'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'fun':
    'prefix': 'fun'

  'WP Exit':
    'prefix': 'wpe'
    'body': '''
    // Exit if accessed directly
    if ( !defined( 'ABSPATH' ) ) {
    	exit;
    }$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'print_r':
    'prefix': 'pr'
    'body': '''
    echo \'<pre>\'; print_r($1); echo \'</pre>\';
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'print_var':
    'prefix': 'pv'
    'body': '''
    gct_print_var(${1:\\$var}, ${2:false});$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'foreach (\\$var as \\$key => \\$val)':
    'prefix': 'foreach'
    'body': '''
    foreach (${1:\\$var} as ${4:${2:\\$key} => ${3:\\$val}}) {
      ${5://}
    }$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'preg_replace':
    'prefix': 'preg_replace'
    'body': 'preg_replace("$1", "$2", ${3:$string})$0'
    'rightLabelHTML': '<span class="snippet-label success">PHP</span>'

  'Create new class':
    'prefix': 'class'
    'body': '''
    /**
    * ${1:ClassName} Class.
    */
    class ${1:ClassName} {

      /**
    	* Holds the plugin instance.
    	*
    	* @var ${1:ClassName}
    	*/
    	public static $instance = null;

      /**
    	* Ensures only one instance of the plugin class is loaded or can be loaded.
    	*
    	* @return ${1:ClassName} An instance of the class.
    	*/
    	public static function instance() {
    		if ( is_null( self::$instance ) ) {
    			self::$instance = new self();

    			/**
    			* Fires when ${1:ClassName} fully loaded and instantiated.
    			*/
    			define(\\'${1:ClassName}_Tests\\', true);
    		}

    		return self::$instance;
    	}


      /**
    	* Initializing ${1:ClassName}.
    	*/
    	private function __construct() {
        //
    	}
    }

    if (!defined(\\'${1:ClassName}_Tests\\')) {
    	// In tests we run the instance manually.
    	\\$${1:ClassName} = ${1:ClassName}::instance();
    }
    $0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'
    'rightLabelHTML': '<span class="snippet-label common">Create new class</span>'
  'print result test':
    'prefix': 'prr'
    'body': '''
    \\$ret = ${1:null};
    echo '<pre>'; print_r($ret); echo '</pre>';$0
    '''
  'array filter':
    'prefix': 'arf'
    'body': '''
    ${2:\\\$filtered} = array_filter(${1:\\\$array}, function (${3:\\\$item}) {
      ${4://}
    });$0
    '''
  'array map':
    'prefix': 'arm'
    'body': '''
    ${2:\\\$filtered} = array_map(function (${3:\\\$item}) {
      ${4://}
    }, ${1:\\\$array});$0
    '''
  'define':
    'prefix': 'def'
    'body': '''
    define(${2:\\'$1\\'}, ${4:\\'$3\\'});$0
    '''
  'defined':
    'prefix': 'defd'
    'body': '''
    defined(\\'$1\\');$0
    '''
  'if_defined':
    'prefix': 'defif'
    'body': '''
    if (defined(${2:\\'$1\\'})) {
      $3
    }$0
    '''
  'if_not_defined':
    'prefix': 'ndefif'
    'body': '''
    if (!defined(${2:\\'$1\\'})) {
      $3
    }$0
    '''
  'print class methods':
    'prefix': 'prcm'
    'body': '''
    \$ret = get_class_methods(${1:foo}); sort(\$ret);
    echo '<pre>'; print_r(\$ret); echo '</pre>';$0
    '''


# Javascript
'.source.js':
  'console.clear()':
    'prefix': 'clear-console'
    'body': '''
    console.clear();$0
    '''
    'rightLabelHTML': '<span class="snippet-label success">console.clear();</span>'
  '"key": "value"':
    'prefix': 'pr-'
    'body': '${1:key}: ${3:\'$2\'},$0'
    'rightLabelHTML': '<span class="snippet-label bi"></span>'
  '"key": {...}':
    'prefix': 'pr-obj'
    'body': '${1:key}: \{$2\},$0'
    'rightLabelHTML': '<span class="snippet-label bi"></span>'
  '"key": [...]':
    'prefix': 'pr-arr'
    'body': '${1:key}: \[$2\],$0'
    'rightLabelHTML': '<span class="snippet-label bi"></span>'
  'Details comment':
    'prefix': 'details-comment'
    'body': '''
    /*
    ------------------------------------------------------------------------
    ${1:Comment Heading}
    ------------------------------------------------------------------------
    ${2:Description}

    */$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Section comment':
    'prefix': 'section-comment'
    'body': '''
    /*
    |--------------------------------------------------------------------------
    | ${1:Comment Heading}
    |--------------------------------------------------------------------------
    */$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Block comment':
    'prefix': 'block-comment'
    'body': '''
    /*
     * ${1:Comment heading}
     *
     * ${2:Describe the relevant details do that up here if it's important enough.}
     */
     $0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Line comment':
    'prefix': 'line-comment'
    'body': '''
    /* ${1:Describe the relevant details.} */$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'Inline comment':
    'prefix': 'inline-comment'
    'body': '''
    // ${1:Describe the relevant details.}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'function ...':
    'prefix': 'func'
    'body': '''
    function ${1:functionName}($2) \{
      ${3:\/\/}
    \}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'function ()':
    'prefix': 'fn'
    'body': '''
    function ($1) \{
      ${2:\/\/}
    \}$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'alert()':
    'prefix': 'alert'
    'body': '''
    alert(${1:\'$2\'});$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'console.info()':
    'prefix': 'info'
    'body': '''
    console.info(${1:\'$2\'});$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'console.log()':
    'prefix': 'log'
    'body': '''
    console.log(${1:\'$2\'});$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'console.error()':
    'prefix': 'error'
    'body': '''
    console.error(${1:\'$2\'});$0
    '''
    'leftLabelHTML': '<span class="snippet-label common">void</span>'

  'console.warn()':
    'prefix': 'warn'
    'body': '''
    console.warn(${1:\'$2\'});$0
    '''
