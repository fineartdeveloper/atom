{".source.php .string.quoted.single":{"dot-join-1":{"prefix":".","body":"'. ${1:} .'$0"},"dot-join-2":{"prefix":">.","body":">'. ${1:} .'$0"}},".text.plain":{"docblock":{"prefix":"docblock","body":"================================================\n${1:TITLE}\n================================================\n\n${2:}\n\n------------------------------------------------$0"}},".source.css.less":{"@import":{"prefix":"impt","body":"@import \"${1:}\";$0"},"foreach":{"prefix":"for-each","body":".foreach(@n, @i: 1) when (@i =< @n) {\n  // Code for current iterator.\n  // ${2:..}\n  // Loop to next iterator.\n  .foreach(@n, (@i + 1));\n\\}\n.foreach(${1:length(@var)});$0"}},".source.json":{"hold_down":{"prefix":"hdown","body":"{ \"hold_down_milliseconds\": ${1:60}, \"key_code\": \"vk_none\" \\}$0"},"releaseMouse":{"prefix":"rmouse","body":"/usr/local/bin/LMC ${1:-releaseMouse}$0"},"&& releaseMouse":{"prefix":"armouse","body":"&& /usr/local/bin/LMC ${1:-releaseMouse}$0"},"LMC":{"prefix":"lmc","body":"/usr/local/bin/LMC ${1:-leftClick}$0"},"&& LMC":{"prefix":"almc","body":"&& /usr/local/bin/LMC ${1:-leftClick}$0"},"sleep":{"prefix":"sleep","body":"sleep ${1:0.0060}$0"},"&& sleep":{"prefix":"asleep","body":"&& sleep ${1:0.0060}$0"},"package.json":{"prefix":"pack","body":"{\n  \"name\": \"${1:foobar}\",\n  \"version\": \"${2:1.0.0}\",\n  \"description\": \"${3:}\",\n  \"keywords\": [${4:}\\],\n  \"repository\": {\n    \"type\": \"${5:git}\",\n    \"url\": \"${6:git+https://github.com/user/repo.git}\"\n  \\},\n  \"homepage\": \"${1:https://github.com/user/repo#readme}\",\n  \"author\": \"${1:Foo Bar}\",\n  \"private\": true,\n  \"license\": \"MIT\",\n  \"os\": [\n    \"darwin\"\n  \\],\n  \"engines\": {\n    \"atom\": \"*\"\n  \\},\n  \"activationHooks\": [\\],\n  \"scripts\": {\n    \"test\": \"echo \\\\\"Error: no test specified\\\\\" && exit 1\"\n  \\},\n  \"dependencies\": {\n    \"fs\": \"^9.1.0\",\n    \"lodash\": \"^4.17.21\",\n    \"path\": \"^0.12.7\",\n    \"underscore-plus\": \"^1.7.0\"\n  \\}\n\\}"}},".source.css .meta.css":{"important":{"prefix":"im","body":"important$0"}},".source.js.embedded.html .keyword.control.js":{"if":{"prefix":"if","body":"if (${1:}) {\n  ${2:}\n\\}$0"}},".source.js":{"return true":{"prefix":"rt","body":"return true;$0"},"return false":{"prefix":"rf","body":"return false;$0"},"/** @babel */":{"prefix":"atba","body":"/** @babel */$0"},"/** @flowtype */":{"prefix":"atfl","body":"/** @flowtype */$0"},"if":{"prefix":"if","body":"if (${1:}) {\n  ${2:}\n\\}$0"},"if-else":{"prefix":"if-else","body":"if (${1:}) {\n  ${2:}\n\\} else {\n  ${3:}\n\\}$0"},"typeof":{"prefix":"typeof","body":"typeof ${1:foo}$0"},"typeof eq ..":{"prefix":"typeof-eq","body":"typeof ${1:foo} ${2:===} '${3:bar}'$0"},"if typeof":{"prefix":"if-typeof","body":"if (typeof ${1:foo} ${2:===} '${3:bar}'$0) {\n  ${4:}\n\\}$0"},"use babel":{"prefix":"babel","body":"'use babel';$0"},"use strict":{"prefix":"strict","body":"'use strict';$0"},"function name()":{"prefix":"fn","body":"function ${1:name}(${2:}) {${3:}\\}$0"},"function anonymous()":{"prefix":"f","body":"function (${1:}) {${2:}\\}$0"},"arrow function":{"prefix":"fa","body":"(${1:}) => {${2:}\\}$0"},"console.clear":{"prefix":"cls","body":"console.clear();$0"},"console.log":{"prefix":"log","body":"console.log(${1:'${2:}'})$0"},"console.table":{"prefix":"logtb","body":"console.table(${1:'${2:}'})$0"},"console.assert":{"prefix":"logas","body":"console.assert(${1:'${2:}'})$0"},"console.trace":{"prefix":"logtr","body":"console.trace()$0"},"console.time":{"prefix":"logti","body":"console.time()$0"},"console.timeEnd":{"prefix":"logtie","body":"console.timeEnd()$0"},"console.timeLog":{"prefix":"logtil","body":"console.timeLog()$0"},"console.count":{"prefix":"logco","body":"console.count(${1:'${2:}'})$0"},"console.debug":{"prefix":"logde","body":"console.debug(${1:'${2:}'})$0"},"console.countReset":{"prefix":"logcor","body":"console.countReset(${1:'${2:}'})$0"},"console.warn":{"prefix":"warn","body":"console.warn(${1:'${2:}'})$0"},"console.error":{"prefix":"error","body":"console.error(${1:'${2:}'})$0"},"console.info":{"prefix":"info","body":"console.info(${1:'${2:}'})$0"},"console.group":{"prefix":"logg","body":"console.group(${1:'${2:}'});\n${3:}\nconsole.groupEnd();$0"}},".text.html.php":{"/* ... */":{"prefix":"/*","body":"<?php\n/* ${1:} */\n?>$0"},"if":{"prefix":"if","body":"<?php if (${1:}) { ?>\n  ${2:}\n<?php \\} ?>$0"},"if-else":{"prefix":"if-else","body":"<?php if (${1:}) { ?>\n  ${2:}\n<?php \\} else { ?>\n  ${3:}\n<?php \\} ?>$0"},"echo":{"prefix":"ec","body":"<?php echo ${2:${1:'foobar'}};${3:} ?>$0"},"<?php ...":{"prefix":"ph","body":"<?php\n\n$0"}},".source.php, .text.html.php .source.php":{"if":{"prefix":"if","body":"if (${1:}) {\n  ${2:}\n\\}$0"},"if-else":{"prefix":"if-else","body":"if (${1:}) {\n  ${2:}\n\\} else {\n  ${3:}\n\\}$0"},"foreach":{"prefix":"foreach","body":"foreach (${1:\\$variable} as ${2:${3:\\$key}${4: => ${5:\\$value}}}) {\n  ${6:}\n\\}$0"},"try...finally":{"prefix":"try-finally","body":"try {\n  ${1:}\n\\} finally {\n  ${2:}\n\\}$0"},"echo":{"prefix":"ec","body":"echo '${1:foobar}';$0"},"if function exists":{"prefix":"if-fne","body":"if (function_exists('${1:funcName}')) {\n  ${3:${1:funcName}(${2:});}\n\\}$0"},"if function not exists":{"prefix":"if-fnne","body":"if (!function_exists('${1:funcName}')) {\n  function ${1:funcName}(${2:}) {\n    ${3:}\n  \\}\n\\}$0"},"pr":{"prefix":"pr","body":"echo '<pre>'; print_r(${1:\\$${2:value}}); echo '</pre>';"},"function assignment":{"prefix":"fn","body":"function ${1:func_name}(${2:\\$${3:value}}) {\n  ${4:/* ... */}\n\\}"},"anonymous function":{"prefix":"f","body":"function (${1:\\$${2:value}}${3:}) {\n  ${4:/* ... */}\n\\}"},"public function funcName()":{"prefix":"ff","body":"/**\n* ${1:Proxy dynamic properties onto methods.}\n*\n* @return mixed\n*/\n${2:public} function ${3:funcName}(${4:\\$${5:value}}) {\n  ${6:/* ... */}\n\\}"}},".source.gfm":{"markup":{"prefix":"`","body":"```${1:js}\n${2:}\n```"}},".source.coffee .string.quoted.coffee .punctuation.definition.end.coffee":{"''' ..":{"prefix":"'","body":"': '''\n${1:}\n''',$0"},"\"\"\" ..":{"prefix":"\"","body":"\": \"\"\"\n${1:}\n\"\"\",$0"}},".source.coffee .string.quoted.double.coffee .punctuation.definition.string.end.coffee":{"snippet with selector":{"prefix":"\"\"","body":"\"${1:selector}\": {\n  \"${2:snippet}\": {\n    \"prefix\": \"${3:}\",\n    \"body\": \"\"\"\n    ${4:}\n    \"\"\",\n  },\n\\},$0"}},".source.coffee .string.quoted.single .punctuation.definition.string.end":{"snippet with selector":{"prefix":"''","body":"'${1:selector}': {\n  '${2:snippet}': {\n    'prefix': '${3:}',\n    'body': '''\n    ${4:}\n    ''',\n  },\n\\},$0"}},".source.coffee":{"add snippet (D)":{"prefix":"add-snippet-d","body":"\"${1:snippet}\": {\n  \"prefix\": \"${2:}\",\n  \"body\": \"\"\"\n  ${3:}\n  \"\"\",\n},$0"},"add snippet (S)":{"prefix":"add-snippet-s","body":"'${1:snippet}': {\n  'prefix': '${2:}',\n  'body': '''\n  ${3:}\n  ''',\n},$0"}},".source.shell .meta.function.shell .meta.scope.group.shell .meta.scope.while-loop.shell .meta.scope.if-block.shell .meta.scope.logical-expression.shell .string.quoted.double.shell .punctuation.definition.string.end.shell":{"\"\\${..\\}":{"prefix":"\"$","body":"\\${${1:..}\\}$0"},"\"\\$${..\\}":{"prefix":"\"$$","body":"\\${${1:..}\\}$0"}},".source.shell":{"if":{"prefix":"if","body":"if [[ ${1:\\$1} ]]; then\n  ${2:echo 1}\nfi$0"},"if .. else":{"prefix":"ife","body":"if [[ ${1:\\$1} ]]; then\n  ${2:echo 1}\nelse\n  ${3:echo 0}\nfi$0"},"elif":{"prefix":"elif","body":"elif [[ ${1:\\$1} ]]; then\n  ${2:echo 0}$0"},"if-inline":{"prefix":"if1","body":"if [[ ${1:\\$1} ]] ${2:echo 1}$0"},"if-shorthand":{"prefix":"ifs","body":"[[ ${1:\\$1} ]] && ${2:echo 1} || ${3:echo 0}$0"},"error":{"prefix":"error","body":"echo\necho \"`cb_red``c_white``c_b` ó±Ž˜ ERROR `c_r` ${1:something wrong}\"$0"},"empty args":{"prefix":"emp-args","body":"if [[ -z \\$command_args ]]; then\n  echo\n  echo \"usage: ${1:[${2:package_names ...}]}\"\n  echo\n  return 1\nfi$0"},"for item in var":{"prefix":"fori","body":"for ${1:item} in ${2:var}; do\n  ${3:}\ndone$0"},"command options":{"prefix":"opts","body":"# Extract command options and arguments\ndeclare -A command_opts=()\ndeclare -a command_args=()\nwhile [[ -n \\$1 ]]; do\n  local arg_val=\"\\$(echo \\$1 | sed 's/^[\\\\ ]+//g' | sed 's/[\\\\ ]+\\$//g')\"\n\n  case \\$arg_val in\n    --foobar ) command_opts[\"--foobar\"]=\"\\${arg_val\\}\" ;;\n    * ) command_args+=\"\\${arg_val\\}\" ;;\n  esac\n\n  shift\ndone$0"},"while...file":{"prefix":"while-readfile","body":"# Set the Internal Field Separator to an octothorpe '#'\nIFS=\"#\"\n# Set input file name here\nINPUT=\"bad-guys.ips.txt\"\n# Read file line-by-line to get an IP and comment to block it using the iptables\nwhile read -r ip comment\ndo\n\t/sbin/iptables -A INPUT -s \"$ip\" -m comment --comment \"$comment\" -j DROP\ndone < \"$INPUT\"$0"},"while...read":{"prefix":"while-read","body":"# Set input file name here\n${4:INPUT}=\"${1:file}\"\n# Read file line-by-line to get an IP and comment to block it using the iptables\nwhile read -r ${2:line}; do\n  ${3:}\ndone < \"\\$${4:INPUT}\"$0"}},".text.plain.null-grammar, .source.shell":{"/bin/zsh":{"prefix":"zsh","body":"#!/bin/zsh$0"},"/bin/bash":{"prefix":"bash","body":"#!/bin/bash$0"},"/bin/sh":{"prefix":"sh","body":"#!/bin/sh$0"},"/usr/bin/env":{"prefix":"env","body":"#!/usr/bin/env ${1:zsh}$0"}}}