(function() {
  var _, exec, link, mergeObject, mutateSelectedText, pathToFunctionsFile, shell, url;

  pathToFunctionsFile = "./functions";

  global.functions = require(pathToFunctionsFile);

  Object.defineProperty(global, 'functions', {
    get: function() {
      delete require.cache[require.resolve(pathToFunctionsFile)];
      return require(pathToFunctionsFile);
    }
  });

  atom.workspace.observeTextEditors(function(editor) {
    return editor.onDidSave(function() {
      return functions.onSave(editor);
    });
  });

  url = require('url');

  shell = require('electron').shell;

  _ = require('underscore-plus');

  link = require('link');

  exec = require('child_process').exec;

  global.activeEditor = function() {
    return atom.workspace.getActiveTextEditor();
  };

  global.exec = exec;

  mergeObject = function(obj, source) {
    var key, value;
    if (obj == null) {
      obj = {};
    }
    if (source == null) {
      source = {};
    }
    if (source && Object.getOwnPropertyNames(source).length > 0) {
      for (key in source) {
        value = source[key];
        obj[key] = value;
      }
    }
    return obj;
  };

  mutateSelectedText = function(selections, options) {
    var i, insertText, len, results, selectedText, selection;
    if (options == null) {
      options = {};
    }
    options = mergeObject({
      select: true,
      skip: false,
      undo: ''
    }, options);
    results = [];
    for (i = 0, len = selections.length; i < len; i++) {
      selection = selections[i];
      insertText = "/*{{replacement}}*/";
      selectedText = selection.getText();
      insertText = insertText.replace("{{replacement}}", "" + selectedText);
      selection.retainSelection = true;
      selection.plantTail();
      selection.insertText(insertText, options);
      results.push(selection.retainSelection = false);
    }
    return results;
  };

  atom.workspace.observeActiveTextEditor(function() {
    var editor;
    return editor = activeEditor();
  });

  atom.commands.add("atom-text-editor", "nerd:wrap-inline-comment", function() {
    var editor, options, selections;
    options = {
      select: true,
      undo: 'skip',
      skip: true
    };
    editor = atom.workspace.getActiveTextEditor();
    selections = editor.getSelections();
    if (selections && selections.length > 0) {
      return mutateSelectedText(selections, options);
    }
  });

  atom.commands.add('atom-text-editor', 'nerd:bio-link', function() {
    var clipboardText, editor, selectedText, snippets, snippetsService;
    editor = atom.workspace.getActiveTextEditor();
    clipboardText = '';
    selectedText = '';
    if (editor.getSelectedText()) {
      selectedText = editor.getSelectedText();
    }
    if (atom.clipboard.read()) {
      clipboardText = atom.clipboard.read();
    }
    if (!selectedText || !clipboardText) {
      return;
    }
    snippets = atom.packages.getActivePackage('snippets');
    if (snippets) {
      snippetsService = snippets.mainModule;
      return snippetsService.insert("<a href=\"" + clipboardText + "\"${1: ${2:title=\"${3:" + selectedText + "}\"}}>${4:" + selectedText + "}</a>$0");
    }
  });

  atom.commands.add('atom-text-editor', 'nerd:link-open', function() {
    var editor, protocol, selectedText;
    editor = atom.workspace.getActiveTextEditor();
    selectedText = editor.getSelectedText();
    if (selectedText) {
      protocol = url.parse(selectedText).protocol;
      if (protocol === 'http:' || protocol === 'https:') {
        return shell.openExternal(selectedText);
      } else {
        return shell.openExternal("http://" + selectedText);
      }
    } else {
      return link.openLink();
    }
  });

  atom.commands.add('atom-text-editor', 'nerd:select-outside-bracket', function() {
    var editor;
    editor = atom.workspace.getActiveTextEditor();
    atom.commands.dispatch(atom.views.getView(editor), "bracket-matcher:select-inside-brackets");
    atom.commands.dispatch(atom.views.getView(editor), "core:move-right");
    return atom.commands.dispatch(atom.views.getView(editor), "bracket-matcher:select-inside-brackets");
  });

  atom.commands.add('atom-text-editor', 'nerd:select-line', function() {
    var editor;
    editor = atom.workspace.getActiveTextEditor();
    atom.commands.dispatch(atom.views.getView(editor), "editor:move-to-end-of-line");
    atom.commands.dispatch(atom.views.getView(editor), "editor:select-to-beginning-of-line");
    return atom.commands.dispatch(atom.views.getView(editor), "editor:select-to-first-character-of-line");
  });

  atom.commands.add('atom-text-editor', 'nerd:select-line-copy', function() {
    var editor;
    editor = atom.workspace.getActiveTextEditor();
    atom.commands.dispatch(atom.views.getView(editor), "editor:move-to-end-of-line");
    atom.commands.dispatch(atom.views.getView(editor), "editor:select-to-beginning-of-line");
    atom.commands.dispatch(atom.views.getView(editor), "editor:select-to-first-character-of-line");
    return atom.commands.dispatch(atom.views.getView(editor), "core:copy");
  });

  atom.commands.add('atom-text-editor', 'nerd:reveal-in-finder', function() {
    var editor, filepath, treeView, treeViewService;
    editor = atom.workspace.getActiveTextEditor();
    filepath = editor.getPath();
    if (filepath) {
      treeView = atom.packages.getActivePackage("tree-view");
      if (treeView) {
        treeViewService = treeView.mainModule;
        return treeViewService.treeView.showCurrentFileInFileManager();
      }
    }
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
