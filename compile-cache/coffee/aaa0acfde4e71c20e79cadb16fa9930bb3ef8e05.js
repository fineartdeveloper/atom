(function() {
  var AtomMinifyOptions;

  module.exports = AtomMinifyOptions = (function() {
    AtomMinifyOptions.OPTIONS_PREFIX = 'atom-minify.';

    function AtomMinifyOptions() {
      this.initialize();
    }

    AtomMinifyOptions.get = function(name) {
      return atom.config.get(AtomMinifyOptions.OPTIONS_PREFIX + name);
    };

    AtomMinifyOptions.set = function(name, value) {
      return atom.config.set(AtomMinifyOptions.OPTIONS_PREFIX + name, value);
    };

    AtomMinifyOptions.unset = function(name) {
      return atom.config.unset(AtomMinifyOptions.OPTIONS_PREFIX + name);
    };

    AtomMinifyOptions.prototype.initialize = function() {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
      this.minifyOnSave = AtomMinifyOptions.get('minifyOnSave');
      this.showSavingInfo = AtomMinifyOptions.get('showSavingInfo');
      this.checkOutputFileAlreadyExists = AtomMinifyOptions.get('checkOutputFileAlreadyExists');
      this.checkAlreadyMinifiedFile = AtomMinifyOptions.get('checkAlreadyMinifiedFile');
      this.buffer = AtomMinifyOptions.get('buffer');
      this.cssMinifier = this.parseCssMinifier(AtomMinifyOptions.get('cssMinifier'));
      this.cssMinifiedFilenamePattern = AtomMinifyOptions.get('cssMinifiedFilenamePattern');
      this.cssParametersForYUI = AtomMinifyOptions.get('cssParametersForYUI');
      this.cssParametersForCleanCSS = AtomMinifyOptions.get('cssParametersForCleanCSS');
      this.cssParametersForCSSO = AtomMinifyOptions.get('cssParametersForCSSO');
      this.cssParametersForSqwish = AtomMinifyOptions.get('cssParametersForSqwish');
      this.jsMinifier = this.parseJsMinifier(AtomMinifyOptions.get('jsMinifier'));
      this.jsMinifiedFilenamePattern = AtomMinifyOptions.get('jsMinifiedFilenamePattern');
      this.jsParametersForYUI = AtomMinifyOptions.get('jsParametersForYUI');
      this.jsParametersForGCC = AtomMinifyOptions.get('jsParametersForGCC');
      this.jsParametersForUglifyJS2 = AtomMinifyOptions.get('jsParametersForUglifyJS2');
      this.showInfoNotification = (ref = AtomMinifyOptions.get('notifications')) === 'Notifications' || ref === 'Panel, Notifications';
      this.showSuccessNotification = (ref1 = AtomMinifyOptions.get('notifications')) === 'Notifications' || ref1 === 'Panel, Notifications';
      this.showWarningNotification = (ref2 = AtomMinifyOptions.get('notifications')) === 'Notifications' || ref2 === 'Panel, Notifications';
      this.showErrorNotification = (ref3 = AtomMinifyOptions.get('notifications')) === 'Notifications' || ref3 === 'Panel, Notifications';
      this.autoHideInfoNotification = (ref4 = AtomMinifyOptions.get('autoHideNotifications')) === 'Info, Success' || ref4 === 'Info, Success, Error';
      this.autoHideSuccessNotification = (ref5 = AtomMinifyOptions.get('autoHideNotifications')) === 'Info, Success' || ref5 === 'Info, Success, Error';
      this.autoHideErrorNotification = (ref6 = AtomMinifyOptions.get('autoHideNotifications')) === 'Error' || ref6 === 'Info, Success, Error';
      this.showPanel = (ref7 = AtomMinifyOptions.get('notifications')) === 'Panel' || ref7 === 'Panel, Notifications';
      this.autoHidePanelOnSuccess = (ref8 = AtomMinifyOptions.get('autoHidePanel')) === 'Success' || ref8 === 'Success, Error';
      this.autoHidePanelOnError = (ref9 = AtomMinifyOptions.get('autoHidePanel')) === 'Error' || ref9 === 'Success, Error';
      this.autoHidePanelDelay = AtomMinifyOptions.get('autoHidePanelDelay');
      this.showStartMinificationNotification = AtomMinifyOptions.get('showStartMinificationNotification');
      return this.absoluteJavaPath = AtomMinifyOptions.get('absoluteJavaPath');
    };

    AtomMinifyOptions.prototype.parseCssMinifier = function(minifier) {
      switch (minifier) {
        case 'YUI Compressor':
          return 'yui-css';
        case 'clean-css':
          return 'clean-css';
        case 'CSSO':
          return 'csso';
        case 'Sqwish':
          return 'sqwish';
        default:
          return null;
      }
    };

    AtomMinifyOptions.prototype.parseJsMinifier = function(minifier) {
      switch (minifier) {
        case 'YUI Compressor':
          return 'yui-js';
        case 'Google Closure Compiler':
          return 'gcc';
        case 'UglifyJS2':
          return 'uglify-js';
        default:
          return null;
      }
    };

    return AtomMinifyOptions;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
