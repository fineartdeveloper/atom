(function() {
  var FooterView;

  module.exports = FooterView = (function() {
    function FooterView(isWhitespaceIgnored, disableIgnoreWhitespace, isAutoDiffEnabled, disableAutoDiff) {
      var autoDiffLabel, copyToLeftButton, copyToRightButton, ignoreWhitespaceLabel, left, mid, nextDiffButton, numDifferences, prevDiffButton, right, selectionDivider;
      this.element = document.createElement('div');
      this.element.classList.add('split-diff-ui');
      prevDiffButton = document.createElement('button');
      prevDiffButton.classList.add('btn');
      prevDiffButton.classList.add('btn-md');
      prevDiffButton.classList.add('prev-diff');
      prevDiffButton.onclick = function() {
        return atom.commands.dispatch(atom.views.getView(atom.workspace), 'split-diff:prev-diff');
      };
      prevDiffButton.title = 'Move to Previous Diff';
      nextDiffButton = document.createElement('button');
      nextDiffButton.classList.add('btn');
      nextDiffButton.classList.add('btn-md');
      nextDiffButton.classList.add('next-diff');
      nextDiffButton.onclick = function() {
        return atom.commands.dispatch(atom.views.getView(atom.workspace), 'split-diff:next-diff');
      };
      nextDiffButton.title = 'Move to Next Diff';
      this.selectionCountValue = document.createElement('span');
      this.selectionCountValue.classList.add('selection-count-value');
      this.element.appendChild(this.selectionCountValue);
      selectionDivider = document.createElement('span');
      selectionDivider.textContent = '/';
      selectionDivider.classList.add('selection-divider');
      this.element.appendChild(selectionDivider);
      this.selectionCount = document.createElement('div');
      this.selectionCount.classList.add('selection-count');
      this.selectionCount.classList.add('hidden');
      this.selectionCount.appendChild(this.selectionCountValue);
      this.selectionCount.appendChild(selectionDivider);
      this.numDifferencesValue = document.createElement('span');
      this.numDifferencesValue.classList.add('num-diff-value');
      this.numDifferencesValue.classList.add('split-diff-loading-icon');
      this.numDifferencesText = document.createElement('span');
      this.numDifferencesText.textContent = 'differences';
      this.numDifferencesText.classList.add('num-diff-text');
      numDifferences = document.createElement('div');
      numDifferences.classList.add('num-diff');
      numDifferences.appendChild(this.numDifferencesValue);
      numDifferences.appendChild(this.numDifferencesText);
      left = document.createElement('div');
      left.classList.add('left');
      left.appendChild(prevDiffButton);
      left.appendChild(nextDiffButton);
      left.appendChild(this.selectionCount);
      left.appendChild(numDifferences);
      this.element.appendChild(left);
      copyToLeftButton = document.createElement('button');
      copyToLeftButton.classList.add('btn');
      copyToLeftButton.classList.add('btn-md');
      copyToLeftButton.classList.add('copy-to-left');
      copyToLeftButton.onclick = function() {
        return atom.commands.dispatch(atom.views.getView(atom.workspace), 'split-diff:copy-to-left');
      };
      copyToLeftButton.title = 'Copy to Left';
      copyToRightButton = document.createElement('button');
      copyToRightButton.classList.add('btn');
      copyToRightButton.classList.add('btn-md');
      copyToRightButton.classList.add('copy-to-right');
      copyToRightButton.onclick = function() {
        return atom.commands.dispatch(atom.views.getView(atom.workspace), 'split-diff:copy-to-right');
      };
      copyToRightButton.title = 'Copy to Right';
      mid = document.createElement('div');
      mid.classList.add('mid');
      mid.appendChild(copyToLeftButton);
      mid.appendChild(copyToRightButton);
      this.element.appendChild(mid);
      this.ignoreWhitespaceValue = document.createElement('input');
      this.ignoreWhitespaceValue.type = 'checkbox';
      this.ignoreWhitespaceValue.id = 'ignore-whitespace-checkbox';
      this.ignoreWhitespaceValue.checked = isWhitespaceIgnored;
      this.ignoreWhitespaceValue.disabled = disableIgnoreWhitespace;
      this.ignoreWhitespaceValue.addEventListener('change', function() {
        return atom.commands.dispatch(atom.views.getView(atom.workspace), 'split-diff:set-ignore-whitespace');
      });
      ignoreWhitespaceLabel = document.createElement('label');
      ignoreWhitespaceLabel.classList.add('ignore-whitespace-label');
      ignoreWhitespaceLabel.htmlFor = 'ignore-whitespace-checkbox';
      ignoreWhitespaceLabel.textContent = 'Ignore Whitespace';
      this.autoDiffValue = document.createElement('input');
      this.autoDiffValue.type = 'checkbox';
      this.autoDiffValue.id = 'auto-diff-checkbox';
      this.autoDiffValue.checked = isAutoDiffEnabled;
      this.autoDiffValue.disabled = disableAutoDiff;
      this.autoDiffValue.addEventListener('change', function() {
        return atom.commands.dispatch(atom.views.getView(atom.workspace), 'split-diff:set-auto-diff');
      });
      autoDiffLabel = document.createElement('label');
      autoDiffLabel.classList.add('auto-diff-label');
      autoDiffLabel.htmlFor = 'auto-diff-checkbox';
      autoDiffLabel.textContent = 'Auto Diff';
      right = document.createElement('div');
      right.classList.add('right');
      right.appendChild(this.ignoreWhitespaceValue);
      right.appendChild(ignoreWhitespaceLabel);
      right.appendChild(this.autoDiffValue);
      right.appendChild(autoDiffLabel);
      this.element.appendChild(right);
    }

    FooterView.prototype.destroy = function() {
      this.element.remove();
      return this.footerPanel.destroy();
    };

    FooterView.prototype.getElement = function() {
      return this.element;
    };

    FooterView.prototype.createPanel = function() {
      return this.footerPanel = atom.workspace.addBottomPanel({
        item: this.element
      });
    };

    FooterView.prototype.show = function() {
      return this.footerPanel.show();
    };

    FooterView.prototype.hide = function() {
      return this.footerPanel.hide();
    };

    FooterView.prototype.setLoading = function() {
      this.numDifferencesValue.textContent = null;
      return this.numDifferencesValue.classList.add('split-diff-loading-icon');
    };

    FooterView.prototype.setNumDifferences = function(num) {
      this.numDifferencesValue.classList.remove('split-diff-loading-icon');
      if (num === 1) {
        this.numDifferencesText.textContent = 'difference';
      } else {
        this.numDifferencesText.textContent = 'differences';
      }
      return this.numDifferencesValue.textContent = num;
    };

    FooterView.prototype.showSelectionCount = function(count) {
      this.selectionCountValue.textContent = count;
      return this.selectionCount.classList.remove('hidden');
    };

    FooterView.prototype.hideSelectionCount = function() {
      return this.selectionCount.classList.add('hidden');
    };

    FooterView.prototype.setIgnoreWhitespace = function(isWhitespaceIgnored) {
      return this.ignoreWhitespaceValue.checked = isWhitespaceIgnored;
    };

    FooterView.prototype.setAutoDiff = function(isAutoDiffEnabled) {
      return this.autoDiffValue.checked = isAutoDiffEnabled;
    };

    return FooterView;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
