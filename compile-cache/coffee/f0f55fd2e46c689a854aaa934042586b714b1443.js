(function() {
  var Aligner, Range, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Range = require('atom').Range;

  _ = require('lodash');

  module.exports = Aligner = (function() {
    function Aligner(editor, spaceChars, matcher, addSpacePostfix) {
      this.editor = editor;
      this.spaceChars = spaceChars;
      this.matcher = matcher;
      this.addSpacePostfix = addSpacePostfix;
      this.align = bind(this.align, this);
      this.__computeRows = bind(this.__computeRows, this);
      this.__computeLength = bind(this.__computeLength, this);
      this.__generateAlignmentList = bind(this.__generateAlignmentList, this);
      this.__getRows = bind(this.__getRows, this);
      this.rows = [];
      this.alignments = [];
    }

    Aligner.prototype.__getRows = function() {
      var allCursors, cursor, cursors, j, k, l, len1, len2, len3, m, o, range, ranges, row, rowNums, t;
      rowNums = [];
      allCursors = [];
      cursors = _.filter(this.editor.getCursors(), function(cursor) {
        var row;
        allCursors.push(cursor);
        row = cursor.getBufferRow();
        if (cursor.visible && !_.contains(rowNums, row)) {
          rowNums.push(row);
          return true;
        }
      });
      if (cursors.length > 1) {
        this.mode = "cursor";
        for (j = 0, len1 = cursors.length; j < len1; j++) {
          cursor = cursors[j];
          row = cursor.getBufferRow();
          t = this.editor.lineTextForBufferRow(row);
          l = this.__computeLength(t.substring(0, cursor.getBufferColumn()));
          o = {
            text: t,
            length: t.length,
            row: row,
            column: l,
            cursor: cursor,
            virtualColumn: cursor.getBufferColumn()
          };
          this.rows.push(o);
        }
      } else {
        ranges = this.editor.getSelectedBufferRanges();
        for (k = 0, len2 = ranges.length; k < len2; k++) {
          range = ranges[k];
          rowNums = rowNums.concat(_.filter(range.getRows(), function(rangeRow) {
            return !rowNums.includes(rangeRow);
          }));
          if (range.end.column === 0) {
            rowNums.pop();
          }
        }
        for (m = 0, len3 = rowNums.length; m < len3; m++) {
          row = rowNums[m];
          o = {
            text: this.editor.lineTextForBufferRow(row),
            length: this.editor.lineTextForBufferRow(row).length,
            row: row
          };
          this.rows.push(o);
        }
        this.mode = "align";
      }
      if (this.mode !== "cursor") {
        return this.rows.forEach(function(o) {
          var firstCharIdx;
          t = o.text.replace(/\s/g, '');
          if (t.length > 0) {
            firstCharIdx = o.text.indexOf(t.charAt(0));
            return o.text = o.text.substr(0, firstCharIdx) + o.text.substring(firstCharIdx).replace(/\ {2,}/g, ' ');
          }
        });
      }
    };

    Aligner.prototype.__getAllIndexes = function(string, val, indexes) {
      var found, i;
      found = [];
      i = 0;
      while (true) {
        i = string.indexOf(val, i);
        if (i !== -1 && !_.some(indexes, {
          index: i
        })) {
          found.push({
            found: val,
            index: i
          });
        }
        if (i === -1) {
          break;
        }
        i++;
      }
      return found;
    };

    Aligner.prototype.__generateAlignmentList = function() {
      if (this.mode === "cursor") {
        return _.forEach(this.rows, (function(_this) {
          return function(o) {
            var part;
            part = o.text.substring(o.virtualColumn);
            _.forEach(_this.spaceChars, function(char) {
              var idx;
              idx = part.indexOf(char);
              if (idx === 0 && o.text.charAt(o.virtualColumn) !== " ") {
                o.addSpacePrefix = true;
                o.spaceCharLength = char.length;
                return false;
              }
            });
          };
        })(this));
      } else {
        _.forEach(this.rows, (function(_this) {
          return function(o) {
            _.forEach(_this.matcher, function(possibleMatcher) {
              return _this.alignments = _this.alignments.concat(_this.__getAllIndexes(o.text, possibleMatcher, _this.alignments));
            });
            if (_this.alignments.length > 0) {
              return false;
            } else {
              return true;
            }
          };
        })(this));
        this.alignments = this.alignments.sort(function(a, b) {
          return a.index - b.index;
        });
        this.alignments = _.pluck(this.alignments, "found");
      }
    };

    Aligner.prototype.__computeLength = function(s) {
      var char, diff, idx, j, len1, tabLength, tabs;
      diff = tabs = idx = 0;
      tabLength = this.editor.getTabLength();
      for (j = 0, len1 = s.length; j < len1; j++) {
        char = s[j];
        if (char === "\t") {
          diff += tabLength - (idx % tabLength);
          idx += tabLength - (idx % tabLength);
          tabs++;
        } else {
          idx++;
        }
      }
      return s.length + diff - tabs;
    };

    Aligner.prototype.__computeRows = function() {
      var addSpacePrefix, idx, matched, max, possibleMatcher;
      max = 0;
      if (this.mode === "align" || this.mode === "break") {
        matched = null;
        idx = -1;
        possibleMatcher = this.alignments.shift();
        addSpacePrefix = this.spaceChars.indexOf(possibleMatcher) > -1;
        this.rows.forEach((function(_this) {
          return function(o) {
            var backslash, blankPos, c, charFound, doubleQuotationMark, found, l, len, line, next, quotationMark, splitString;
            o.splited = null;
            if (!o.done) {
              line = o.text;
              if (line.indexOf(possibleMatcher, o.nextPos) !== -1) {
                matched = possibleMatcher;
                idx = line.indexOf(matched, o.nextPos);
                len = matched.length;
                if (_this.mode === "break") {
                  idx += len - 1;
                  c = "";
                  blankPos = -1;
                  quotationMark = doubleQuotationMark = 0;
                  backslash = charFound = false;
                  while (true) {
                    if (c === void 0) {
                      break;
                    }
                    c = line[++idx];
                    if (c === "'" && !backslash) {
                      quotationMark++;
                    }
                    if (c === '"' && !backslash) {
                      doubleQuotationMark++;
                    }
                    backslash = c === "\\" && !backslash ? true : false;
                    charFound = c !== " " && !charFound ? true : charFound;
                    if (c === " " && quotationMark % 2 === 0 && doubleQuotationMark % 2 === 0 && charFound) {
                      blankPos = idx;
                      break;
                    }
                  }
                  idx = blankPos;
                }
                next = _this.mode === "break" ? 1 : len;
                if (idx !== -1) {
                  splitString = [line.substring(0, idx), line.substring(idx + next)];
                  o.splited = splitString;
                  l = _this.__computeLength(splitString[0]);
                  if (max <= l) {
                    max = l;
                    if (l > 0 && addSpacePrefix && splitString[0].charAt(splitString[0].length - 1) !== " ") {
                      max++;
                    }
                  }
                }
              }
              found = false;
              _.forEach(_this.alignments, function(nextPossibleMatcher) {
                if (line.indexOf(nextPossibleMatcher, idx + len) !== -1) {
                  found = true;
                  return false;
                }
              });
              o.stop = !found;
            }
          };
        })(this));
        if (max >= 0) {
          if (max > 0) {
            max++;
          }
          this.rows.forEach((function(_this) {
            return function(o) {
              var diff, splitString;
              if (!o.done && o.splited && matched) {
                splitString = o.splited;
                diff = max - _this.__computeLength(splitString[0]);
                if (diff > 0) {
                  splitString[0] = splitString[0] + Array(diff).join(' ');
                }
                if (_this.addSpacePostfix && addSpacePrefix) {
                  splitString[1] = " " + splitString[1].trim();
                }
                if (_this.mode === "break") {
                  _.forEach(splitString, function(s, i) {
                    return splitString[i] = s.trim();
                  });
                  o.text = splitString.join("\n");
                } else {
                  o.text = splitString.join(matched);
                }
                o.done = o.stop;
                o.nextPos = splitString[0].length + matched.length;
              }
            };
          })(this));
        }
        return this.alignments.length > 0;
      } else {
        this.rows.forEach(function(o) {
          var part;
          if (max <= o.column) {
            max = o.column;
            part = o.text.substring(0, o.virtualColumn);
            if (part.length > 0 && o.addSpacePrefix && part.charAt(part.length - 1) !== " ") {
              max++;
            }
          }
        });
        max++;
        this.rows.forEach((function(_this) {
          return function(o) {
            var diff, line, splitString;
            line = o.text;
            splitString = [line.substring(0, o.virtualColumn), line.substring(o.virtualColumn)];
            diff = max - _this.__computeLength(splitString[0]);
            if (diff > 0) {
              splitString[0] = splitString[0] + Array(diff).join(' ');
            }
            if (o.spaceCharLength == null) {
              o.spaceCharLength = 0;
            }
            splitString[1] = splitString[1].substring(0, o.spaceCharLength) + splitString[1].substr(o.spaceCharLength).trim();
            if (_this.addSpacePostfix && o.addSpacePrefix) {
              splitString[1] = splitString[1].substring(0, o.spaceCharLength) + " " + splitString[1].substr(o.spaceCharLength);
            }
            o.text = splitString.join("");
          };
        })(this));
        return false;
      }
    };

    Aligner.prototype.align = function(multiple) {
      var checkpoint, cont;
      this.__getRows();
      this.__generateAlignmentList();
      if (this.rows.length === 1 && multiple) {
        this.mode = "break";
      }
      if (multiple || this.mode === "break") {
        while (true) {
          cont = this.__computeRows();
          if (!cont) {
            break;
          }
        }
      } else {
        this.__computeRows();
      }
      checkpoint = this.editor.createCheckpoint();
      this.rows.forEach((function(_this) {
        return function(o) {
          _this.editor.setTextInBufferRange([[o.row, 0], [o.row, o.length]], o.text);
          if (o.cursor) {
            return o.cursor.setBufferPosition([o.row, o.virtualColumn + (o.text.length - o.length)]);
          }
        };
      })(this));
      return this.editor.groupChangesSinceCheckpoint(checkpoint);
    };

    return Aligner;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
