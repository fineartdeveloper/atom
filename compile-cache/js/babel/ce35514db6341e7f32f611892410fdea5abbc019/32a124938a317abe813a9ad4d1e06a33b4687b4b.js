Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.tokenize = tokenize;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tokenizer2 = require('tokenizer2');

var _tokenizer22 = _interopRequireDefault(_tokenizer2);

/**
 * Copy pasted most of this from json-tokenizer package
 * https://github.com/Floby/node-json-tokenizer/blob/master/JsonTokenizer.js
 * 
 * @return {Stream} a token stream describing the JSON grammar.
 */
'use babel';

function createTokenStream() {
  var stream = (0, _tokenizer22['default'])();
  stream.addRule(/^,$/, TokenType.COMMA);
  stream.addRule(/^:$/, TokenType.END_LABEL);
  stream.addRule(/^\{$/, TokenType.BEGIN_OBJECT);
  stream.addRule(/^\}$/, TokenType.END_OBJECT);
  stream.addRule(/^\[$/, TokenType.BEGIN_ARRAY);
  stream.addRule(/^\]$/, TokenType.END_ARRAY);

  stream.addRule(/^"(\\["\\/bfnrtu"]|[^"\\"])*"$/, TokenType.STRING);
  stream.addRule(/^"([^"]|\\")*$/, 'maybe-string');
  stream.addRule(/^null$/, TokenType.NULL);
  stream.addRule(/^(true|false)$/, TokenType.BOOLEAN);

  stream.addRule(/^-?\d+(\.\d+)?([eE]-?\d+)?$/, TokenType.NUMBER);
  stream.addRule(/^-?\d+\.$/, 'maybe-decimal-number');
  stream.addRule(/^-$/, 'maybe-negative-number');
  stream.addRule(/^-?\d+(\.\d+)?([eE])?$/, 'maybe-exponential-number');
  stream.addRule(/^-?\d+(\.\d+)?([eE]-)?$/, 'maybe-exponential-number-negative');

  stream.addRule(/^\w+$/, TokenType.SYMBOL);

  stream.addRule(/^[\s]+$/, TokenType.WHITESPACE);

  return stream;
}

var TokenType = {
  COMMA: 'comma',
  END_LABEL: 'end-label',
  BEGIN_OBJECT: 'begin-object',
  END_OBJECT: 'end-object',
  BEGIN_ARRAY: 'begin-array',
  END_ARRAY: 'end-array',
  STRING: 'string',
  NULL: 'null',
  BOOLEAN: 'boolean',
  NUMBER: 'number',
  SYMBOL: 'symbol',
  WHITESPACE: 'whitespace'
};

exports.TokenType = TokenType;
/**
 * Tokenizes the given buffer
 * @param {Buffer} buffer A Buffer to tokenize
 * @return {Promise} a Promise, which when resolved yields the JSON tokens in the buffer as an array
 */

function tokenize(buffer) {
  return new Promise(function (resolve, reject) {
    var tokens = [];
    var tokenStream = createTokenStream();
    tokenStream.on('data', function (token) {
      // Ignore whitespace.
      if (token.type !== TokenType.WHITESPACE) {
        tokens.push(token);
      }
    });
    tokenStream.on('error', function (error) {
      return reject(error);
    });
    tokenStream.on('end', function () {
      return resolve(tokens);
    });
    tokenStream.end(buffer);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdWRwcmF3YXQvLmF0b20vcGFja2FnZXMvYXV0b2NvbXBsZXRlLWpzb24vc3JjL3Rva2VuaXplci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OzBCQUV1QixZQUFZOzs7Ozs7Ozs7O0FBRm5DLFdBQVcsQ0FBQTs7QUFVWCxTQUFTLGlCQUFpQixHQUFHO0FBQzNCLE1BQU0sTUFBTSxHQUFHLDhCQUFZLENBQUE7QUFDM0IsUUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBO0FBQ3RDLFFBQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtBQUMxQyxRQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDOUMsUUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQzVDLFFBQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUM3QyxRQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUE7O0FBRTNDLFFBQU0sQ0FBQyxPQUFPLENBQUMsZ0NBQWdDLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBQ2xFLFFBQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUE7QUFDaEQsUUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3hDLFFBQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFBOztBQUVuRCxRQUFNLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUMvRCxRQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxzQkFBc0IsQ0FBQyxDQUFBO0FBQ25ELFFBQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLHVCQUF1QixDQUFDLENBQUE7QUFDOUMsUUFBTSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSwwQkFBMEIsQ0FBQyxDQUFBO0FBQ3BFLFFBQU0sQ0FBQyxPQUFPLENBQUMseUJBQXlCLEVBQUUsbUNBQW1DLENBQUMsQ0FBQTs7QUFFOUUsUUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFBOztBQUV6QyxRQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUE7O0FBRS9DLFNBQU8sTUFBTSxDQUFBO0NBQ2Q7O0FBRU0sSUFBTSxTQUFTLEdBQUc7QUFDdkIsT0FBSyxFQUFFLE9BQU87QUFDZCxXQUFTLEVBQUUsV0FBVztBQUN0QixjQUFZLEVBQUUsY0FBYztBQUM1QixZQUFVLEVBQUUsWUFBWTtBQUN4QixhQUFXLEVBQUUsYUFBYTtBQUMxQixXQUFTLEVBQUUsV0FBVztBQUN0QixRQUFNLEVBQUUsUUFBUTtBQUNoQixNQUFJLEVBQUUsTUFBTTtBQUNaLFNBQU8sRUFBRSxTQUFTO0FBQ2xCLFFBQU0sRUFBRSxRQUFRO0FBQ2hCLFFBQU0sRUFBRSxRQUFRO0FBQ2hCLFlBQVUsRUFBRSxZQUFZO0NBQ3pCLENBQUE7Ozs7Ozs7OztBQU9NLFNBQVMsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUMvQixTQUFPLElBQUksT0FBTyxDQUFDLFVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBSztBQUN0QyxRQUFNLE1BQU0sR0FBRyxFQUFFLENBQUE7QUFDakIsUUFBTSxXQUFXLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQTtBQUN2QyxlQUFXLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFBLEtBQUssRUFBSTs7QUFFOUIsVUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQyxVQUFVLEVBQUU7QUFDdkMsY0FBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTtPQUNuQjtLQUNGLENBQUMsQ0FBQTtBQUNGLGVBQVcsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUEsS0FBSzthQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUM7S0FBQSxDQUFDLENBQUE7QUFDL0MsZUFBVyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUU7YUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDO0tBQUEsQ0FBQyxDQUFBO0FBQzVDLGVBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUE7R0FDeEIsQ0FBQyxDQUFBO0NBQ0giLCJmaWxlIjoiL1VzZXJzL3N1ZHByYXdhdC8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtanNvbi9zcmMvdG9rZW5pemVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCdcblxuaW1wb3J0IHRva2VuaXplcjIgZnJvbSAndG9rZW5pemVyMidcblxuLyoqXG4gKiBDb3B5IHBhc3RlZCBtb3N0IG9mIHRoaXMgZnJvbSBqc29uLXRva2VuaXplciBwYWNrYWdlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRmxvYnkvbm9kZS1qc29uLXRva2VuaXplci9ibG9iL21hc3Rlci9Kc29uVG9rZW5pemVyLmpzXG4gKiBcbiAqIEByZXR1cm4ge1N0cmVhbX0gYSB0b2tlbiBzdHJlYW0gZGVzY3JpYmluZyB0aGUgSlNPTiBncmFtbWFyLlxuICovXG5mdW5jdGlvbiBjcmVhdGVUb2tlblN0cmVhbSgpIHtcbiAgY29uc3Qgc3RyZWFtID0gdG9rZW5pemVyMigpXG4gIHN0cmVhbS5hZGRSdWxlKC9eLCQvLCBUb2tlblR5cGUuQ09NTUEpXG4gIHN0cmVhbS5hZGRSdWxlKC9eOiQvLCBUb2tlblR5cGUuRU5EX0xBQkVMKVxuICBzdHJlYW0uYWRkUnVsZSgvXlxceyQvLCBUb2tlblR5cGUuQkVHSU5fT0JKRUNUKVxuICBzdHJlYW0uYWRkUnVsZSgvXlxcfSQvLCBUb2tlblR5cGUuRU5EX09CSkVDVClcbiAgc3RyZWFtLmFkZFJ1bGUoL15cXFskLywgVG9rZW5UeXBlLkJFR0lOX0FSUkFZKVxuICBzdHJlYW0uYWRkUnVsZSgvXlxcXSQvLCBUb2tlblR5cGUuRU5EX0FSUkFZKVxuXG4gIHN0cmVhbS5hZGRSdWxlKC9eXCIoXFxcXFtcIlxcXFwvYmZucnR1XCJdfFteXCJcXFxcXCJdKSpcIiQvLCBUb2tlblR5cGUuU1RSSU5HKVxuICBzdHJlYW0uYWRkUnVsZSgvXlwiKFteXCJdfFxcXFxcIikqJC8sICdtYXliZS1zdHJpbmcnKVxuICBzdHJlYW0uYWRkUnVsZSgvXm51bGwkLywgVG9rZW5UeXBlLk5VTEwpXG4gIHN0cmVhbS5hZGRSdWxlKC9eKHRydWV8ZmFsc2UpJC8sIFRva2VuVHlwZS5CT09MRUFOKVxuXG4gIHN0cmVhbS5hZGRSdWxlKC9eLT9cXGQrKFxcLlxcZCspPyhbZUVdLT9cXGQrKT8kLywgVG9rZW5UeXBlLk5VTUJFUilcbiAgc3RyZWFtLmFkZFJ1bGUoL14tP1xcZCtcXC4kLywgJ21heWJlLWRlY2ltYWwtbnVtYmVyJylcbiAgc3RyZWFtLmFkZFJ1bGUoL14tJC8sICdtYXliZS1uZWdhdGl2ZS1udW1iZXInKVxuICBzdHJlYW0uYWRkUnVsZSgvXi0/XFxkKyhcXC5cXGQrKT8oW2VFXSk/JC8sICdtYXliZS1leHBvbmVudGlhbC1udW1iZXInKVxuICBzdHJlYW0uYWRkUnVsZSgvXi0/XFxkKyhcXC5cXGQrKT8oW2VFXS0pPyQvLCAnbWF5YmUtZXhwb25lbnRpYWwtbnVtYmVyLW5lZ2F0aXZlJylcblxuICBzdHJlYW0uYWRkUnVsZSgvXlxcdyskLywgVG9rZW5UeXBlLlNZTUJPTClcblxuICBzdHJlYW0uYWRkUnVsZSgvXltcXHNdKyQvLCBUb2tlblR5cGUuV0hJVEVTUEFDRSlcblxuICByZXR1cm4gc3RyZWFtXG59XG5cbmV4cG9ydCBjb25zdCBUb2tlblR5cGUgPSB7XG4gIENPTU1BOiAnY29tbWEnLFxuICBFTkRfTEFCRUw6ICdlbmQtbGFiZWwnLFxuICBCRUdJTl9PQkpFQ1Q6ICdiZWdpbi1vYmplY3QnLFxuICBFTkRfT0JKRUNUOiAnZW5kLW9iamVjdCcsXG4gIEJFR0lOX0FSUkFZOiAnYmVnaW4tYXJyYXknLFxuICBFTkRfQVJSQVk6ICdlbmQtYXJyYXknLFxuICBTVFJJTkc6ICdzdHJpbmcnLFxuICBOVUxMOiAnbnVsbCcsXG4gIEJPT0xFQU46ICdib29sZWFuJyxcbiAgTlVNQkVSOiAnbnVtYmVyJyxcbiAgU1lNQk9MOiAnc3ltYm9sJyxcbiAgV0hJVEVTUEFDRTogJ3doaXRlc3BhY2UnXG59XG5cbi8qKlxuICogVG9rZW5pemVzIHRoZSBnaXZlbiBidWZmZXJcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgQSBCdWZmZXIgdG8gdG9rZW5pemVcbiAqIEByZXR1cm4ge1Byb21pc2V9IGEgUHJvbWlzZSwgd2hpY2ggd2hlbiByZXNvbHZlZCB5aWVsZHMgdGhlIEpTT04gdG9rZW5zIGluIHRoZSBidWZmZXIgYXMgYW4gYXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRva2VuaXplKGJ1ZmZlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHRva2VucyA9IFtdXG4gICAgY29uc3QgdG9rZW5TdHJlYW0gPSBjcmVhdGVUb2tlblN0cmVhbSgpXG4gICAgdG9rZW5TdHJlYW0ub24oJ2RhdGEnLCB0b2tlbiA9PiB7XG4gICAgICAvLyBJZ25vcmUgd2hpdGVzcGFjZS5cbiAgICAgIGlmICh0b2tlbi50eXBlICE9PSBUb2tlblR5cGUuV0hJVEVTUEFDRSkge1xuICAgICAgICB0b2tlbnMucHVzaCh0b2tlbilcbiAgICAgIH1cbiAgICB9KVxuICAgIHRva2VuU3RyZWFtLm9uKCdlcnJvcicsIGVycm9yID0+IHJlamVjdChlcnJvcikpXG4gICAgdG9rZW5TdHJlYW0ub24oJ2VuZCcsICgpID0+IHJlc29sdmUodG9rZW5zKSlcbiAgICB0b2tlblN0cmVhbS5lbmQoYnVmZmVyKVxuICB9KVxufVxuIl19