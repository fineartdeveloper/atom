Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _autocompleteJavascriptView = require('./autocomplete-javascript-view');

var _autocompleteJavascriptView2 = _interopRequireDefault(_autocompleteJavascriptView);

var _atom = require('atom');

'use babel';

exports['default'] = {

  autocompleteJavascriptView: null,
  modalPanel: null,
  subscriptions: null,

  activate: function activate(state) {
    var _this = this;

    this.autocompleteJavascriptView = new _autocompleteJavascriptView2['default'](state.autocompleteJavascriptViewState);
    this.modalPanel = atom.workspace.addModalPanel({
      item: this.autocompleteJavascriptView.getElement(),
      visible: false
    });

    // Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable
    this.subscriptions = new _atom.CompositeDisposable();

    // Register command that toggles this view
    this.subscriptions.add(atom.commands.add('atom-workspace', {
      'autocomplete-javascript:toggle': function autocompleteJavascriptToggle() {
        return _this.toggle();
      }
    }));
  },

  deactivate: function deactivate() {
    this.modalPanel.destroy();
    this.subscriptions.dispose();
    this.autocompleteJavascriptView.destroy();
  },

  serialize: function serialize() {
    return {
      autocompleteJavascriptViewState: this.autocompleteJavascriptView.serialize()
    };
  },

  toggle: function toggle() {
    console.log('AutocompleteJavascript was toggled!');
    return this.modalPanel.isVisible() ? this.modalPanel.hide() : this.modalPanel.show();
  }

};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdWRwcmF3YXQvLmF0b20vcGFja2FnZXMvYXV0b2NvbXBsZXRlLWphdmFzY3JpcHQvbGliL2F1dG9jb21wbGV0ZS1qYXZhc2NyaXB0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OzswQ0FFdUMsZ0NBQWdDOzs7O29CQUNuQyxNQUFNOztBQUgxQyxXQUFXLENBQUM7O3FCQUtHOztBQUViLDRCQUEwQixFQUFFLElBQUk7QUFDaEMsWUFBVSxFQUFFLElBQUk7QUFDaEIsZUFBYSxFQUFFLElBQUk7O0FBRW5CLFVBQVEsRUFBQSxrQkFBQyxLQUFLLEVBQUU7OztBQUNkLFFBQUksQ0FBQywwQkFBMEIsR0FBRyw0Q0FBK0IsS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFDeEcsUUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztBQUM3QyxVQUFJLEVBQUUsSUFBSSxDQUFDLDBCQUEwQixDQUFDLFVBQVUsRUFBRTtBQUNsRCxhQUFPLEVBQUUsS0FBSztLQUNmLENBQUMsQ0FBQzs7O0FBR0gsUUFBSSxDQUFDLGFBQWEsR0FBRywrQkFBeUIsQ0FBQzs7O0FBRy9DLFFBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFO0FBQ3pELHNDQUFnQyxFQUFFO2VBQU0sTUFBSyxNQUFNLEVBQUU7T0FBQTtLQUN0RCxDQUFDLENBQUMsQ0FBQztHQUNMOztBQUVELFlBQVUsRUFBQSxzQkFBRztBQUNYLFFBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDMUIsUUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUM3QixRQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxFQUFFLENBQUM7R0FDM0M7O0FBRUQsV0FBUyxFQUFBLHFCQUFHO0FBQ1YsV0FBTztBQUNMLHFDQUErQixFQUFFLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxTQUFTLEVBQUU7S0FDN0UsQ0FBQztHQUNIOztBQUVELFFBQU0sRUFBQSxrQkFBRztBQUNQLFdBQU8sQ0FBQyxHQUFHLENBQUMscUNBQXFDLENBQUMsQ0FBQztBQUNuRCxXQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLEdBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEdBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQ3RCO0dBQ0g7O0NBRUYiLCJmaWxlIjoiL1VzZXJzL3N1ZHByYXdhdC8uYXRvbS9wYWNrYWdlcy9hdXRvY29tcGxldGUtamF2YXNjcmlwdC9saWIvYXV0b2NvbXBsZXRlLWphdmFzY3JpcHQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGJhYmVsJztcblxuaW1wb3J0IEF1dG9jb21wbGV0ZUphdmFzY3JpcHRWaWV3IGZyb20gJy4vYXV0b2NvbXBsZXRlLWphdmFzY3JpcHQtdmlldyc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICBhdXRvY29tcGxldGVKYXZhc2NyaXB0VmlldzogbnVsbCxcbiAgbW9kYWxQYW5lbDogbnVsbCxcbiAgc3Vic2NyaXB0aW9uczogbnVsbCxcblxuICBhY3RpdmF0ZShzdGF0ZSkge1xuICAgIHRoaXMuYXV0b2NvbXBsZXRlSmF2YXNjcmlwdFZpZXcgPSBuZXcgQXV0b2NvbXBsZXRlSmF2YXNjcmlwdFZpZXcoc3RhdGUuYXV0b2NvbXBsZXRlSmF2YXNjcmlwdFZpZXdTdGF0ZSk7XG4gICAgdGhpcy5tb2RhbFBhbmVsID0gYXRvbS53b3Jrc3BhY2UuYWRkTW9kYWxQYW5lbCh7XG4gICAgICBpdGVtOiB0aGlzLmF1dG9jb21wbGV0ZUphdmFzY3JpcHRWaWV3LmdldEVsZW1lbnQoKSxcbiAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgfSk7XG5cbiAgICAvLyBFdmVudHMgc3Vic2NyaWJlZCB0byBpbiBhdG9tJ3Mgc3lzdGVtIGNhbiBiZSBlYXNpbHkgY2xlYW5lZCB1cCB3aXRoIGEgQ29tcG9zaXRlRGlzcG9zYWJsZVxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XG5cbiAgICAvLyBSZWdpc3RlciBjb21tYW5kIHRoYXQgdG9nZ2xlcyB0aGlzIHZpZXdcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsIHtcbiAgICAgICdhdXRvY29tcGxldGUtamF2YXNjcmlwdDp0b2dnbGUnOiAoKSA9PiB0aGlzLnRvZ2dsZSgpXG4gICAgfSkpO1xuICB9LFxuXG4gIGRlYWN0aXZhdGUoKSB7XG4gICAgdGhpcy5tb2RhbFBhbmVsLmRlc3Ryb3koKTtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZGlzcG9zZSgpO1xuICAgIHRoaXMuYXV0b2NvbXBsZXRlSmF2YXNjcmlwdFZpZXcuZGVzdHJveSgpO1xuICB9LFxuXG4gIHNlcmlhbGl6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYXV0b2NvbXBsZXRlSmF2YXNjcmlwdFZpZXdTdGF0ZTogdGhpcy5hdXRvY29tcGxldGVKYXZhc2NyaXB0Vmlldy5zZXJpYWxpemUoKVxuICAgIH07XG4gIH0sXG5cbiAgdG9nZ2xlKCkge1xuICAgIGNvbnNvbGUubG9nKCdBdXRvY29tcGxldGVKYXZhc2NyaXB0IHdhcyB0b2dnbGVkIScpO1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLm1vZGFsUGFuZWwuaXNWaXNpYmxlKCkgP1xuICAgICAgdGhpcy5tb2RhbFBhbmVsLmhpZGUoKSA6XG4gICAgICB0aGlzLm1vZGFsUGFuZWwuc2hvdygpXG4gICAgKTtcbiAgfVxuXG59O1xuIl19