/** @babel */

var shell = require("shell");

var _require = require("atom");

var CompositeDisposable = _require.CompositeDisposable;

function escapeRegExp(str) {
	return str.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
}

function matchHyperlink(text, protocols) {
	var col = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

	var protocolsRegex = protocols.map(function (val) {
		return escapeRegExp(val);
	}).join("|");
	var domainRegex = "\\w[\\w\\-]*\\w|\\w";
	var validChars = "-:@\\w.,~%+?=&#;|!";
	var hyperlinkRegexp = new RegExp("\\b(?:" + protocolsRegex + ")://(?:" + domainRegex + ")(?:\\.(?:" + domainRegex + "))*(?:(?:/|\\?)(?:[" + validChars + "]|\\([" + validChars + "]*\\))*)*");
	// FIXME: we should probably limit text length to prevent redos
	var match = text.match(hyperlinkRegexp);
	if (!match || match.index > col) {
		return null;
	}
	if (match.index === col) {
		return match[0];
	}
	var nextMatch = matchHyperlink(text.substring(match.index + 1), protocols, col - (match.index + 1));
	if (nextMatch) {
		return nextMatch;
	}
	if (match.index + match[0].length >= col) {
		return match[0];
	}
	return null;
}

function getHyperlink(textEditor, range, protocols) {
	var lineText = textEditor.lineTextForBufferRow(range.start.row);
	var matched = matchHyperlink(lineText, protocols, range.start.column);
	if (matched) {
		return {
			link: matched,
			linkText: matched
		};
	} else if (textEditor.getGrammar().scopeName === "source.gfm") {
		var token = textEditor.tokenForBufferPosition(range.start);
		if (token && token.value) {
			var _ret = (function () {
				var linkText = token.value.trim();
				var link = null;
				var mdLinkRegexp = new RegExp("^\\s*\\[" + escapeRegExp(linkText) + "\\]\\s*:\\s*(\\S+)\\s*$", "i");
				textEditor.getBuffer().backwardsScan(mdLinkRegexp, function (found) {
					link = matchHyperlink(found.match[1], protocols);
					if (link) {
						found.stop();
					}
				});
				if (link) {
					return {
						v: {
							link: link,
							linkText: linkText
						}
					};
				}
			})();

			if (typeof _ret === "object") return _ret.v;
		}
	}
	return {
		link: null,
		linkText: null
	};
}

function getRange(textEditor, range, linkText) {
	var searchStart = [range.start.row, range.start.column - linkText.length];
	var searchEnd = [range.end.row, range.end.column + linkText.length];
	var searchRange = [searchStart, searchEnd];

	var linkRegexp = new RegExp(escapeRegExp(linkText));
	var linkRange = null;

	textEditor.scanInBufferRange(linkRegexp, searchRange, function (found) {
		linkRange = found.range;
		found.stop();
	});
	return linkRange;
}

module.exports = {
	config: {
		protocols: {
			description: "Comma separated list of protocols to open when ctrl+clicked",
			type: "array",
			"default": ["http", "https", "mailto", "atom"],
			items: {
				type: "string"
			},
			order: 1
		},
		priority: {
			description: "Set priority higher to avoid interference with other hyperclick plugins (Requires Restart)",
			type: "integer",
			"default": 0,
			order: 2
		}
	},
	activate: function activate() {
		var _this = this;

		this.subscriptions = new CompositeDisposable();
		this.subscriptions.add(atom.config.observe("hyperlink-hyperclick.protocols", function (value) {
			_this.protocols = value;
		}));
	},
	deactivate: function deactivate() {
		this.subscriptions.dispose();
	},
	getProvider: function getProvider() {
		var _this2 = this;

		return {
			priority: atom.config.get("hyperlink-hyperclick.priority"),
			getSuggestionForWord: function getSuggestionForWord(textEditor, text, range) {
				var _getHyperlink = getHyperlink(textEditor, range, _this2.protocols);

				var link = _getHyperlink.link;
				var linkText = _getHyperlink.linkText;

				if (!link) {
					return null;
				}
				var linkRange = getRange(textEditor, range, linkText);
				if (!linkRange) {
					return null;
				}
				return {
					range: linkRange,
					callback: function callback() {
						shell.openExternal(link);
					}
				};
			}
		};
	}
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,