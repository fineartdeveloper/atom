'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var atom = global.atom;
var crypto = require('crypto');

var decrypt = function decrypt(password, text) {
  try {
    var decipher = crypto.createDecipher('aes-256-ctr', password);
    var dec = decipher.update(text, 'hex', 'utf8');
    return dec;
  } catch (e) {
    return null;
  }
};

exports.decrypt = decrypt;
var encrypt = function encrypt(password, text) {
  try {
    var cipher = crypto.createCipher('aes-256-ctr', password);
    var crypted = cipher.update(text, 'utf8', 'hex');
    crypted += cipher.final('hex');
    return crypted;
  } catch (e) {
    return null;
  }
};

exports.encrypt = encrypt;
var checkPasswordExists = function checkPasswordExists() {
  var passwordHash = atom.config.get('ftp-remote-edit.password');

  // migrate from ftp-remote-edit-plus
  if (!passwordHash) {
    passwordHash = atom.config.get('ftp-remote-edit-plus.password');
    if (passwordHash) {
      var servers = atom.config.get('ftp-remote-edit-plus.servers');
      atom.config.set('ftp-remote-edit.config', servers);
      atom.config.set('ftp-remote-edit.password', passwordHash);
    }
  }
  if (passwordHash) return true;

  return false;
};

exports.checkPasswordExists = checkPasswordExists;
var checkPassword = function checkPassword(password) {
  var passwordHash = atom.config.get('ftp-remote-edit.password');
  if (!passwordHash) return true;

  if (decrypt(password, passwordHash) !== password) {
    return false;
  }

  return true;
};

exports.checkPassword = checkPassword;
var setPassword = function setPassword(password) {
  var promise = new Promise(function (resolve, reject) {
    var passwordHash = encrypt(password, password);

    // Store in atom config
    atom.config.set('ftp-remote-edit.password', passwordHash);

    resolve(true);
  });

  return promise;
};

exports.setPassword = setPassword;
var changePassword = function changePassword(oldPassword, newPassword) {
  var promise = new Promise(function (resolve, reject) {
    var passwordHash = encrypt(newPassword, newPassword);

    // Store in atom config
    atom.config.set('ftp-remote-edit.password', passwordHash);

    var configHash = atom.config.get('ftp-remote-edit.config');
    if (configHash) {
      var oldconfig = decrypt(oldPassword, configHash);
      var newconfig = encrypt(newPassword, oldconfig);

      var oldWhitelist = getHashList(oldPassword, 'ftp-remote-edit.allowedConsumers');
      var oldBlacklist = getHashList(oldPassword, 'ftp-remote-edit.disallowedConsumers');

      // Store in atom config
      atom.config.set('ftp-remote-edit.config', newconfig);
      setHashList(newPassword, 'ftp-remote-edit.allowedConsumers', oldWhitelist);
      setHashList(newPassword, 'ftp-remote-edit.disallowedConsumers', oldBlacklist);
    }

    resolve(true);
  });

  return promise;
};

exports.changePassword = changePassword;
var isInWhiteList = function isInWhiteList(password, msg) {
  var hashes = getHashList(password, 'ftp-remote-edit.allowedConsumers');
  return hashes.indexOf(msg) > -1;
};

exports.isInWhiteList = isInWhiteList;
var isInBlackList = function isInBlackList(password, msg) {
  var hashes = getHashList(password, 'ftp-remote-edit.disallowedConsumers');
  return hashes.indexOf(msg) > -1;
};

exports.isInBlackList = isInBlackList;
var addToWhiteList = function addToWhiteList(password, msg) {
  addToHashList(password, 'ftp-remote-edit.allowedConsumers', msg);
};

exports.addToWhiteList = addToWhiteList;
var addToBlackList = function addToBlackList(password, msg) {
  addToHashList(password, 'ftp-remote-edit.disallowedConsumers', msg);
};

exports.addToBlackList = addToBlackList;
var getHashList = function getHashList(password, setting) {
  var conf = atom.config.get(setting);
  if (conf) {
    try {
      return JSON.parse(decrypt(password, conf));
    } catch (ex) {
      return [];
    }
  } else {
    return [];
  }
};

var setHashList = function setHashList(password, setting, hashes) {
  try {
    var str = JSON.stringify(hashes);
    atom.config.set(setting, encrypt(password, str));
  } catch (ex) {
    return [];
  }
};

var addToHashList = function addToHashList(password, setting, msg) {
  var hashes = getHashList(password, setting);
  hashes.push(msg);
  var str = JSON.stringify(hashes);
  atom.config.set(setting, encrypt(password, str));
};

var b64EncodeUnicode = function b64EncodeUnicode(str) {
  return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
    return String.fromCharCode('0x' + p1);
  }));
};

exports.b64EncodeUnicode = b64EncodeUnicode;
var b64DecodeUnicode = function b64DecodeUnicode(str) {
  return decodeURIComponent(atob(str).split('').map(function (c) {
    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(''));
};
exports.b64DecodeUnicode = b64DecodeUnicode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,