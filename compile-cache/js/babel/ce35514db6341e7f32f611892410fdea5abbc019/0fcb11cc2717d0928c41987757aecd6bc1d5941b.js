Object.defineProperty(exports, '__esModule', {
	value: true
});

var init = _asyncToGenerator(function* (editor, onSave, type) {
	var selectedText = onSave ? null : editor.getSelectedText();
	var text = selectedText || editor.getText();

	var options = {};

	if (editor.getGrammar().scopeName === 'source.css') {
		options.parser = _postcssSafeParser2['default'];
	} else {
		options.syntax = _postcssScss2['default'];
	}

	try {
		var result = undefined;
		if (type === 'prefix') {
			result = yield (0, _postcss2['default'])((0, _autoprefixer2['default'])(atom.config.get('autoprefixer'))).process(text, options);
		} else {
			result = yield (0, _postcss2['default'])([(0, _postcssUnprefix2['default'])()]).process(text, options);
		}

		result.warnings().forEach(function (x) {
			console.warn(x.toString());
			atom.notifications.addWarning('Autoprefixer', {
				detail: x.toString()
			});
		});

		var cursorPosition = editor.getCursorBufferPosition();
		var line = atom.views.getView(editor).getFirstVisibleScreenRow() + editor.getVerticalScrollMargin();

		if (selectedText) {
			editor.setTextInBufferRange(editor.getSelectedBufferRange(), result.css);
		} else {
			editor.getBuffer().setTextViaDiff(result.css);
		}

		editor.setCursorBufferPosition(cursorPosition);

		if (editor.getScreenLineCount() > line) {
			editor.scrollToScreenPosition([line, 0]);
		}
	} catch (error) {
		if (error.name === 'CssSyntaxError') {
			error.message += error.showSourceCode();
		}

		console.error(error);
		atom.notifications.addError('Autoprefixer', { detail: error.message });
	}
});

exports.deactivate = deactivate;
exports.activate = activate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { var callNext = step.bind(null, 'next'); var callThrow = step.bind(null, 'throw'); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(callNext, callThrow); } } callNext(); }); }; }

/** @babel */

var _atom = require('atom');

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var _autoprefixer = require('autoprefixer');

var _autoprefixer2 = _interopRequireDefault(_autoprefixer);

var _postcssSafeParser = require('postcss-safe-parser');

var _postcssSafeParser2 = _interopRequireDefault(_postcssSafeParser);

var _postcssScss = require('postcss-scss');

var _postcssScss2 = _interopRequireDefault(_postcssScss);

var _postcssUnprefix = require('postcss-unprefix');

var _postcssUnprefix2 = _interopRequireDefault(_postcssUnprefix);

var SUPPORTED_SCOPES = new Set(['source.css', 'source.css.scss']);

var config = {
	browsers: {
		title: 'Supported Browsers',
		description: 'Using the [following syntax](https://github.com/ai/browserslist#queries).',
		type: 'array',
		'default': _autoprefixer2['default'].defaults,
		items: {
			type: 'string'
		}
	},
	cascade: {
		title: 'Cascade Prefixes',
		type: 'boolean',
		'default': true
	},
	remove: {
		title: 'Remove Unneeded Prefixes',
		type: 'boolean',
		'default': true
	},
	runOnSave: {
		title: 'Run on Save',
		type: 'boolean',
		'default': false
	}
};

exports.config = config;

function deactivate() {
	this.subscriptions.dispose();
}

function activate() {
	this.subscriptions = new _atom.CompositeDisposable();

	this.subscriptions.add(atom.workspace.observeTextEditors(function (editor) {
		editor.getBuffer().onWillSave(_asyncToGenerator(function* () {
			var isCSS = SUPPORTED_SCOPES.has(editor.getGrammar().scopeName);

			if (isCSS && atom.config.get('autoprefixer.runOnSave')) {
				yield init(editor, true, 'prefix');
			}
		}));
	}));

	this.subscriptions.add(atom.commands.add('atom-workspace', 'autoprefixer:prefix', function () {
		var editor = atom.workspace.getActiveTextEditor();

		if (editor) {
			init(editor, false, 'prefix');
		}
	}));

	this.subscriptions.add(atom.commands.add('atom-workspace', 'autoprefixer:remove-prefixes', function () {
		var editor = atom.workspace.getActiveTextEditor();

		if (editor) {
			init(editor, false, 'removePrefixes');
		}
	}));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,