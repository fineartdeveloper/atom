Object.defineProperty(exports, '__esModule', {
  value: true
});

var _secureJs = require('./secure.js');

'use babel';

var _require = require('electron');

var shell = _require.shell;

// Add detail information in error notification
// Uncaught SyntaxError: Unexpected token  in JSON at position 0 #44
// https://github.com/h3imdall/ftp-remote-edit/issues/44
var throwErrorIssue44 = function throwErrorIssue44(e, password) {
  var passwordHash = atom.config.get('ftp-remote-edit.password');
  var configHash = atom.config.get('ftp-remote-edit.config');
  var config = (0, _secureJs.decrypt)(password, configHash);

  var regularExpression = /^[a-zA-Z0-9]+$/;
  var detail = {
    config: {
      decrypt: config !== null
    },
    password: {
      exists: password.length > 0,
      length: password.length,
      alphanumeric: regularExpression.test(password)
    }
  };

  console.error('Detail Error Information');
  console.info('Uncaught SyntaxError: Unexpected token  in JSON at position 0 #44');
  console.info('https://github.com/h3imdall/ftp-remote-edit/issues/44');

  console.warn('password:');
  console.log('password:', password);
  console.log('password exists:', detail.password.exists);
  console.log('password length:', detail.password.length);
  console.log('password alphanumeric:', detail.password.alphanumeric);

  console.warn('hash:');
  console.log('password hash:', passwordHash);
  console.log('config hash:', configHash);

  console.warn('config:');
  console.log('config:', config);

  atom.notifications.addError(e.message, {
    detail: e.message,
    stack: e.stack,
    dismissable: true,
    buttons: [{
      text: 'View Issue',
      onDidClick: function onDidClick() {
        shell.openExternal('https://github.com/h3imdall/ftp-remote-edit/issues/44');
      }
    }],
    description: 'The error was thrown from the ftp-remote-edit package. The error has already been reported in issue on github and a solution is being worked on. You can help by adding information to this issue. Please explain what actions triggered this error.'
  });
};
exports.throwErrorIssue44 = throwErrorIssue44;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9zdWRwcmF3YXQvLmF0b20vcGFja2FnZXMvZnRwLXJlbW90ZS1lZGl0L2xpYi9oZWxwZXIvaXNzdWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozt3QkFFd0IsYUFBYTs7QUFGckMsV0FBVyxDQUFDOztlQUdNLE9BQU8sQ0FBQyxVQUFVLENBQUM7O0lBQTdCLEtBQUssWUFBTCxLQUFLOzs7OztBQUtOLElBQU0saUJBQWlCLEdBQUcsU0FBcEIsaUJBQWlCLENBQUksQ0FBQyxFQUFFLFFBQVEsRUFBSztBQUNoRCxNQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQy9ELE1BQUksVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDM0QsTUFBSSxNQUFNLEdBQUcsdUJBQVEsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDOztBQUUzQyxNQUFJLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDO0FBQ3pDLE1BQUksTUFBTSxHQUFHO0FBQ1gsVUFBTSxFQUFFO0FBQ04sYUFBTyxFQUFHLE1BQU0sS0FBSyxJQUFJLEFBQUM7S0FDM0I7QUFDRCxZQUFRLEVBQUU7QUFDUixZQUFNLEVBQUcsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEFBQUM7QUFDN0IsWUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNO0FBQ3ZCLGtCQUFZLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztLQUMvQztHQUNGLENBQUM7O0FBRUYsU0FBTyxDQUFDLEtBQUssQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0FBQzFDLFNBQU8sQ0FBQyxJQUFJLENBQUMsb0VBQW9FLENBQUMsQ0FBQztBQUNuRixTQUFPLENBQUMsSUFBSSxDQUFDLHVEQUF1RCxDQUFDLENBQUM7O0FBRXRFLFNBQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDMUIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDbkMsU0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hELFNBQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RCxTQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7O0FBRXBFLFNBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEIsU0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUM1QyxTQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQzs7QUFFeEMsU0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QixTQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQzs7QUFFL0IsTUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtBQUNyQyxVQUFNLEVBQUUsQ0FBQyxDQUFDLE9BQU87QUFDakIsU0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLO0FBQ2QsZUFBVyxFQUFFLElBQUk7QUFDakIsV0FBTyxFQUFFLENBQUM7QUFDUixVQUFJLEVBQUUsWUFBWTtBQUNsQixnQkFBVSxFQUFFLHNCQUFNO0FBQ2hCLGFBQUssQ0FBQyxZQUFZLENBQUMsdURBQXVELENBQUMsQ0FBQztPQUM3RTtLQUNGLENBQUM7QUFDRixlQUFXLEVBQUUsc1BBQXNQO0dBQ3BRLENBQUMsQ0FBQztDQUNKLENBQUEiLCJmaWxlIjoiL1VzZXJzL3N1ZHByYXdhdC8uYXRvbS9wYWNrYWdlcy9mdHAtcmVtb3RlLWVkaXQvbGliL2hlbHBlci9pc3N1ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuXG5pbXBvcnQgeyBkZWNyeXB0IH0gZnJvbSAnLi9zZWN1cmUuanMnO1xuY29uc3QgeyBzaGVsbCB9ID0gcmVxdWlyZSgnZWxlY3Ryb24nKVxuXG4vLyBBZGQgZGV0YWlsIGluZm9ybWF0aW9uIGluIGVycm9yIG5vdGlmaWNhdGlvblxuLy8gVW5jYXVnaHQgU3ludGF4RXJyb3I6IFVuZXhwZWN0ZWQgdG9rZW4gXHUwMDAyIGluIEpTT04gYXQgcG9zaXRpb24gMCAjNDRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9oM2ltZGFsbC9mdHAtcmVtb3RlLWVkaXQvaXNzdWVzLzQ0XG5leHBvcnQgY29uc3QgdGhyb3dFcnJvcklzc3VlNDQgPSAoZSwgcGFzc3dvcmQpID0+IHtcbiAgbGV0IHBhc3N3b3JkSGFzaCA9IGF0b20uY29uZmlnLmdldCgnZnRwLXJlbW90ZS1lZGl0LnBhc3N3b3JkJyk7XG4gIGxldCBjb25maWdIYXNoID0gYXRvbS5jb25maWcuZ2V0KCdmdHAtcmVtb3RlLWVkaXQuY29uZmlnJyk7XG4gIGxldCBjb25maWcgPSBkZWNyeXB0KHBhc3N3b3JkLCBjb25maWdIYXNoKTtcblxuICBsZXQgcmVndWxhckV4cHJlc3Npb24gPSAvXlthLXpBLVowLTldKyQvO1xuICBsZXQgZGV0YWlsID0ge1xuICAgIGNvbmZpZzoge1xuICAgICAgZGVjcnlwdDogKGNvbmZpZyAhPT0gbnVsbCksXG4gICAgfSxcbiAgICBwYXNzd29yZDoge1xuICAgICAgZXhpc3RzOiAocGFzc3dvcmQubGVuZ3RoID4gMCksXG4gICAgICBsZW5ndGg6IHBhc3N3b3JkLmxlbmd0aCxcbiAgICAgIGFscGhhbnVtZXJpYzogcmVndWxhckV4cHJlc3Npb24udGVzdChwYXNzd29yZClcbiAgICB9XG4gIH07XG5cbiAgY29uc29sZS5lcnJvcignRGV0YWlsIEVycm9yIEluZm9ybWF0aW9uJyk7XG4gIGNvbnNvbGUuaW5mbygnVW5jYXVnaHQgU3ludGF4RXJyb3I6IFVuZXhwZWN0ZWQgdG9rZW4gXHUwMDAyIGluIEpTT04gYXQgcG9zaXRpb24gMCAjNDQnKTtcbiAgY29uc29sZS5pbmZvKCdodHRwczovL2dpdGh1Yi5jb20vaDNpbWRhbGwvZnRwLXJlbW90ZS1lZGl0L2lzc3Vlcy80NCcpO1xuXG4gIGNvbnNvbGUud2FybigncGFzc3dvcmQ6Jyk7XG4gIGNvbnNvbGUubG9nKCdwYXNzd29yZDonLCBwYXNzd29yZCk7XG4gIGNvbnNvbGUubG9nKCdwYXNzd29yZCBleGlzdHM6JywgZGV0YWlsLnBhc3N3b3JkLmV4aXN0cyk7XG4gIGNvbnNvbGUubG9nKCdwYXNzd29yZCBsZW5ndGg6JywgZGV0YWlsLnBhc3N3b3JkLmxlbmd0aCk7XG4gIGNvbnNvbGUubG9nKCdwYXNzd29yZCBhbHBoYW51bWVyaWM6JywgZGV0YWlsLnBhc3N3b3JkLmFscGhhbnVtZXJpYyk7XG5cbiAgY29uc29sZS53YXJuKCdoYXNoOicpO1xuICBjb25zb2xlLmxvZygncGFzc3dvcmQgaGFzaDonLCBwYXNzd29yZEhhc2gpO1xuICBjb25zb2xlLmxvZygnY29uZmlnIGhhc2g6JywgY29uZmlnSGFzaCk7XG5cbiAgY29uc29sZS53YXJuKCdjb25maWc6Jyk7XG4gIGNvbnNvbGUubG9nKCdjb25maWc6JywgY29uZmlnKTtcblxuICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoZS5tZXNzYWdlLCB7XG4gICAgZGV0YWlsOiBlLm1lc3NhZ2UsXG4gICAgc3RhY2s6IGUuc3RhY2ssXG4gICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgYnV0dG9uczogW3tcbiAgICAgIHRleHQ6ICdWaWV3IElzc3VlJyxcbiAgICAgIG9uRGlkQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgc2hlbGwub3BlbkV4dGVybmFsKCdodHRwczovL2dpdGh1Yi5jb20vaDNpbWRhbGwvZnRwLXJlbW90ZS1lZGl0L2lzc3Vlcy80NCcpO1xuICAgICAgfVxuICAgIH1dLFxuICAgIGRlc2NyaXB0aW9uOiAnVGhlIGVycm9yIHdhcyB0aHJvd24gZnJvbSB0aGUgZnRwLXJlbW90ZS1lZGl0IHBhY2thZ2UuIFRoZSBlcnJvciBoYXMgYWxyZWFkeSBiZWVuIHJlcG9ydGVkIGluIGlzc3VlIG9uIGdpdGh1YiBhbmQgYSBzb2x1dGlvbiBpcyBiZWluZyB3b3JrZWQgb24uIFlvdSBjYW4gaGVscCBieSBhZGRpbmcgaW5mb3JtYXRpb24gdG8gdGhpcyBpc3N1ZS4gUGxlYXNlIGV4cGxhaW4gd2hhdCBhY3Rpb25zIHRyaWdnZXJlZCB0aGlzIGVycm9yLicsXG4gIH0pO1xufVxuIl19