'use babel';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _this = this;

var atom = global.atom;
var Path = require('path');
var FileSystem = require('fs-plus');
var Minimatch = require('minimatch').Minimatch;

var ignoredPatterns = null;
var ignoredFinderPatterns = null;

var logDebug = function logDebug(param1, param2) {
  if (atom.config.get('ftp-remote-edit.dev.debug')) {
    if (param1 && param2) {
      console.log(param1, param2);
    } else if (param1) {
      console.log(param1);
    }
  }
};

exports.logDebug = logDebug;
var showMessage = function showMessage(msg) {
  var type = arguments.length <= 1 || arguments[1] === undefined ? 'info' : arguments[1];

  if (msg instanceof Error) {
    msg = msg.message;
  }

  if (typeof msg !== 'string') {
    msg = 'Unknown error';
  }

  if (type === 'success') {
    atom.notifications.addSuccess('Ftp-Remote-Edit', {
      description: msg
    });
  } else if (type === 'info') {
    atom.notifications.addInfo('Ftp-Remote-Edit', {
      description: msg
    });
  } else {
    atom.notifications.addError('Ftp-Remote-Edit', {
      description: msg
    });
  }
};

exports.showMessage = showMessage;
var getFullExtension = function getFullExtension(filePath) {
  var fullExtension = '';
  var extension = '';
  while (extension = Path.extname(filePath)) {
    fullExtension = extension + fullExtension;
    filePath = Path.basename(filePath, extension);
  }
  return fullExtension;
};

exports.getFullExtension = getFullExtension;
var createLocalPath = function createLocalPath(localpath) {
  try {
    var arrPath = localpath.split(Path.sep);
    arrPath.pop();

    arrPath.reduce(function (tmpPath, dir) {
      tmpPath += Path.sep + dir;
      if (!FileSystem.existsSync(tmpPath)) {
        FileSystem.mkdirSync(tmpPath);
      }
      return tmpPath;
    });
  } catch (err) {
    return err;
  }
};

exports.createLocalPath = createLocalPath;
var deleteLocalPath = function deleteLocalPath(localpath) {
  try {
    if (FileSystem.existsSync(localpath)) {
      FileSystem.readdirSync(localpath).forEach(function (file, index) {
        var curPath = localpath + "/" + file;
        if (FileSystem.lstatSync(curPath).isDirectory()) {
          // recurse
          return deleteLocalPath(curPath);
        } else {
          // delete file
          FileSystem.unlinkSync(curPath);
        }
      });
      FileSystem.rmdirSync(localpath);
    }
  } catch (err) {
    return err;
  }
};

exports.deleteLocalPath = deleteLocalPath;
var moveLocalPath = function moveLocalPath(srclocalpath, targetlocalpath) {
  try {
    var tmp = targetlocalpath.split(Path.sep);
    tmp.pop();
    var parentPath = tmp.join(Path.sep);

    if (!FileSystem.existsSync(parentPath)) {
      FileSystem.makeTreeSync(parentPath);
    }
    if (FileSystem.existsSync(targetlocalpath)) {
      FileSystem.removeSync(targetlocalpath);
    }
    FileSystem.moveSync(srclocalpath, targetlocalpath);
  } catch (err) {
    return err;
  }
};

exports.moveLocalPath = moveLocalPath;
var resetIgnoredPatterns = function resetIgnoredPatterns() {
  ignoredPatterns = null;
};

exports.resetIgnoredPatterns = resetIgnoredPatterns;
var loadIgnoredPatterns = function loadIgnoredPatterns() {
  var ignoredName = undefined,
      ignoredNames = undefined,
      i = undefined,
      len = undefined,
      results = undefined;

  if (!atom.config.get('ftp-remote-edit.tree.hideIgnoredNames')) {
    return;
  }

  if (ignoredPatterns) return ignoredPatterns;
  if (ignoredPatterns == null) ignoredPatterns = [];

  ignoredNames = atom.config.get('core.ignoredNames') != null ? atom.config.get('core.ignoredNames') : [];
  if (typeof ignoredNames === 'string') {
    ignoredNames = [ignoredNames];
  }
  results = [];
  for (i = 0, len = ignoredNames.length; i < len; i++) {
    ignoredName = ignoredNames[i];
    if (ignoredName) {
      try {
        ignoredPatterns.push(new Minimatch(ignoredName, {
          matchBase: true,
          dot: true
        }));
      } catch (err) {
        console.log(err, "Ftp-Remote-Edit: Error parsing ignore pattern (" + ignoredName + ")");
      }
    }
  }
  return ignoredPatterns;
};

exports.loadIgnoredPatterns = loadIgnoredPatterns;
var isPathIgnored = function isPathIgnored(filePath) {
  if (atom.config.get('ftp-remote-edit.tree.hideIgnoredNames')) {
    var _ignoredPatterns = loadIgnoredPatterns();
    for (i = 0, len = _ignoredPatterns.length; i < len; i++) {
      if (_ignoredPatterns[i].match(filePath)) {
        return true;
      }
    }
  }
  return false;
};

exports.isPathIgnored = isPathIgnored;
var resetIgnoredFinderPatterns = function resetIgnoredFinderPatterns() {
  ignoredFinderPatterns = null;
};

exports.resetIgnoredFinderPatterns = resetIgnoredFinderPatterns;
var loadIgnoredFinderPatterns = function loadIgnoredFinderPatterns() {
  var ignoredName = undefined,
      ignoredNames = undefined,
      ignoredCoreNames = undefined,
      ignoredFinderNames = undefined,
      i = undefined,
      len = undefined,
      results = undefined;

  if (ignoredFinderPatterns) return ignoredFinderPatterns;
  if (ignoredFinderPatterns == null) ignoredFinderPatterns = [];

  if (atom.config.get('ftp-remote-edit.tree.hideIgnoredNames')) {
    ignoredCoreNames = atom.config.get('core.ignoredNames') != null ? atom.config.get('core.ignoredNames') : [];
    if (typeof ignoredCoreNames === 'string') {
      ignoredCoreNames = [ignoredCoreNames];
    }
  } else {
    ignoredCoreNames = [];
  }

  ignoredFinderNames = atom.config.get('ftp-remote-edit.finder.ignoredNames') != null ? atom.config.get('ftp-remote-edit.finder.ignoredNames') : [];
  if (typeof ignoredFinderNames === 'string') {
    ignoredFinderNames = [ignoredFinderNames];
  }

  ignoredNames = [];
  ignoredNames = ignoredCoreNames.concat(ignoredFinderNames);

  results = [];
  for (i = 0, len = ignoredNames.length; i < len; i++) {
    ignoredName = ignoredNames[i];
    if (ignoredName) {
      try {
        ignoredFinderPatterns.push(new Minimatch(ignoredName, {
          matchBase: true,
          dot: true
        }));
      } catch (err) {
        console.log(err, "Ftp-Remote-Edit: Error parsing ignore pattern (" + ignoredName + ")");
      }
    }
  }
  return ignoredFinderPatterns;
};

exports.loadIgnoredFinderPatterns = loadIgnoredFinderPatterns;
var isFinderPathIgnored = function isFinderPathIgnored(filePath) {
  var ignoredPatterns = loadIgnoredFinderPatterns();
  for (i = 0, len = ignoredPatterns.length; i < len; i++) {
    if (ignoredPatterns[i].match(filePath)) {
      return true;
    }
  }

  return false;
};

exports.isFinderPathIgnored = isFinderPathIgnored;
var highlight = function highlight(path, matches, offsetIndex) {
  var lastIndex = 0;
  var matchedChars = [];
  var fragment = document.createDocumentFragment();
  for (var matchIndex of matches) {
    matchIndex -= offsetIndex;
    // If marking up the basename, omit path matches
    if (matchIndex < 0) {
      continue;
    }
    var unmatched = path.substring(lastIndex, matchIndex);
    if (unmatched) {
      if (matchedChars.length > 0) {
        var span = document.createElement('span');
        span.classList.add('character-match');
        span.textContent = matchedChars.join('');
        fragment.appendChild(span);
        matchedChars = [];
      }

      fragment.appendChild(document.createTextNode(unmatched));
    }

    matchedChars.push(path[matchIndex]);
    lastIndex = matchIndex + 1;
  }

  if (matchedChars.length > 0) {
    var span = document.createElement('span');
    span.classList.add('character-match');
    span.textContent = matchedChars.join('');
    fragment.appendChild(span);
  }

  // Remaining characters are plain text
  fragment.appendChild(document.createTextNode(path.substring(lastIndex)));
  return fragment;
};

exports.highlight = highlight;
var rightsToPermissions = function rightsToPermissions(rights) {
  var self = _this;

  if (!rights) return;

  var user = rights.user.split('');
  var group = rights.group.split('');
  var other = rights.other.split('');

  var permissionsuser = 0;
  var permissionsgroup = 0;
  var permissionsother = 0;

  user.forEach(function (right) {
    if (right == 'r') permissionsuser += 4;
    if (right == 'w') permissionsuser += 2;
    if (right == 'x') permissionsuser += 1;
  });

  group.forEach(function (right) {
    if (right == 'r') permissionsgroup += 4;
    if (right == 'w') permissionsgroup += 2;
    if (right == 'x') permissionsgroup += 1;
  });

  other.forEach(function (right) {
    if (right == 'r') permissionsother += 4;
    if (right == 'w') permissionsother += 2;
    if (right == 'x') permissionsother += 1;
  });

  return permissionsuser.toString() + permissionsgroup.toString() + permissionsother.toString();
};

exports.rightsToPermissions = rightsToPermissions;
var permissionsToRights = function permissionsToRights(permissions) {
  var self = _this;

  var groups = permissions.split('');

  var rights = {
    user: "",
    group: "",
    other: ""
  };

  if (groups[0] == 7) {
    rights.user += 'rwx';
  } else if (groups[0] == 6) {
    rights.user = 'rw';
  } else if (groups[0] == 5) {
    rights.user = 'rx';
  } else if (groups[0] == 4) {
    rights.user = 'r';
  } else if (groups[0] == 3) {
    rights.user = 'wx';
  } else if (groups[0] == 2) {
    rights.user = 'w';
  } else if (groups[0] == 1) {
    rights.user = 'x';
  } else if (groups[0] == 'x') {
    rights.user = self.rights.user;
  } else {
    rights.user = '';
  }

  if (groups[1] == 7) {
    rights.group += 'rwx';
  } else if (groups[1] == 6) {
    rights.group = 'rw';
  } else if (groups[1] == 5) {
    rights.group = 'rx';
  } else if (groups[1] == 4) {
    rights.group = 'r';
  } else if (groups[1] == 3) {
    rights.group = 'wx';
  } else if (groups[1] == 2) {
    rights.group = 'w';
  } else if (groups[1] == 1) {
    rights.group = 'x';
  } else if (groups[1] == 'x') {
    rights.group = self.rights.group;
  } else {
    rights.group = '';
  }

  if (groups[2] == 7) {
    rights.other += 'rwx';
  } else if (groups[2] == 6) {
    rights.other = 'rw';
  } else if (groups[2] == 5) {
    rights.other = 'rx';
  } else if (groups[2] == 4) {
    rights.other = 'r';
  } else if (groups[2] == 3) {
    rights.other = 'wx';
  } else if (groups[2] == 2) {
    rights.other = 'w';
  } else if (groups[2] == 1) {
    rights.other = 'x';
  } else if (groups[2] == 'x') {
    rights.other = self.rights.other;
  } else {
    rights.other = '';
  }

  return rights;
};

exports.permissionsToRights = permissionsToRights;
var parseFTPDate = function parseFTPDate(line) {
  var RE_LINE = new RegExp("^(\\w{3})\\s+(\\d{1,2})\\s+((\\d{1,2}):(\\d{1,2}))*(\\d{4})*$");
  var MONTHS = { jan: 1, feb: 2, mar: 3, apr: 4, may: 5, jun: 6, jul: 7, aug: 8, sep: 9, oct: 10, nov: 11, dec: 12 };
  var groups = line.trim().match(RE_LINE);

  try {
    if (groups) {
      var month = parseInt(MONTHS[groups[1].toLowerCase()], 10);
      var day = parseInt(groups[2], 10);
      var year = groups[6] ? parseInt(groups[6], 10) : new Date().getFullYear();
      var hour = groups[4] ? parseInt(groups[4], 10) : null;
      var mins = groups[5] ? parseInt(groups[5], 10) : null;

      if (month < 10) month = '0' + month;
      if (day < 10) day = '0' + day;
      if (hour && hour < 10) hour = '0' + hour;
      if (mins && mins < 10) mins = '0' + mins;

      if (hour) {
        return new Date(year + '-' + month + '-' + day + 'T' + hour + ':' + mins);
      } else {
        return new Date(year + '-' + month + '-' + day);
      }
    }
  } catch (error) {
    return undefined;
  }
  return undefined;
};

exports.parseFTPDate = parseFTPDate;
var getTextEditor = function getTextEditor(pathOnFileSystem) {
  var activate = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  var foundEditor = null;
  var texteditors = atom.workspace.getTextEditors();
  texteditors.forEach(function (texteditor) {
    if (texteditor.getPath() == pathOnFileSystem) {
      foundEditor = texteditor;
      return false;
    }
  });

  if (activate && foundEditor) {
    pane = atom.workspace.paneForItem(foundEditor);
    if (pane) pane.activateItem(foundEditor);
  }

  return foundEditor;
};

exports.getTextEditor = getTextEditor;
var forEachAsync = function forEachAsync(array, callback) {
  return array.reduce(function (promise, item) {
    return promise.then(function (result) {
      return callback(item);
    });
  }, Promise.resolve());
};

exports.forEachAsync = forEachAsync;
// Return 1  if versionA > versionB
// Return 0  if versionA == versionB
// Return -1 if versionA < versionB
var compareVersions = function compareVersions(versionA, versionB) {
  if (versionA === versionB) {
    return 0;
  }

  var partsNumberA = versionA.split(".");
  var partsNumberB = versionB.split(".");

  for (var _i = 0; _i < partsNumberA.length; _i++) {
    var valueA = parseInt(partsNumberA[_i]);
    var valueB = parseInt(partsNumberB[_i]);

    if (valueA > valueB || isNaN(valueB)) {
      return 1;
    }
    if (valueA < valueB) {
      return -1;
    }
  }
};
exports.compareVersions = compareVersions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,