name: "Vim Snippet"
scopeName: "source.vim-snippet"
fileTypes: [
	"snip"
	"snippet"
	"snippets"
]
firstLineMatch: """(?x)

	# Modeline
	(?i:
		# Vim
		(?:(?:\\s|^)vi(?:m[<=>]?\\d+|m)?|\\sex)(?=:(?=\\s*set?\\s[^\\n:]+:)|:(?!\\s* set?\\s))
		(?:(?:\\s|\\s*:\\s*)\\w*(?:\\s*=(?:[^\\n\\\\\\s]|\\\\.)*)?)*[\\s:]
		(?:filetype|ft|syntax)\\s*=
			(snippets?|snipmate|ultisnips?|neosnippet)
		(?=\\s|:|$)
		
		|
		
		# Emacs
		-\\*-(?:\\s*(?=[^:;\\s]+\\s*-\\*-)|(?:.*?[;\\s]|(?<=-\\*-))mode\\s*:\\s*)
			(?:snipmate|ultisnips?|neosnippet|vim-?snippets?)
		(?=[\\s;]|(?<![-*])-\\*-).*?-\\*-
	)
"""
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#snippet"}
			{include: "#comment"}
			{include: "#extends"}
			{include: "#global"}
			{include: "#priority"}
			{include: "#expression"}
			{include: "#version"}
			{include: "#ultisnips"}
			{include: "#neosnippet"}
		]
	
	
	# Comment lines
	comment:
		name:  "comment.line.number-sign.vim-snippet"
		begin: "^#"
		end:   "$"
		beginCaptures:
			0: name: "punctuation.definition.comment.number-sign.vim-snippet"
	
	
	# Include another file
	extends:
		name:  "meta.$1.directive.vim-snippet"
		begin: "^(extends|include|source)(?=\\s|$)"
		end:   "$"
		beginCaptures:
			1: name: "keyword.control.$1.directive.vim-snippet"
		patterns: [
			{match: ",",        name: "punctuation.separator.delimiter.comma.vim-snippet"}
			{match: "[^,\\s]+", name: "entity.other.inherited-class.vim-snippet"}
		]
	
	
	# Embedded expressions
	# - NB: We “clamp” all embedded grammars to stop runaway highlighting
	expression:
		patterns: [{
			# Python code (UltiSnips)
			name: "string.interpolated.python-code.vim-snippet"
			begin: "(`)(!p)"
			end:   "`"
			beginCaptures:
				1: name: "punctuation.section.begin.embedded.vim-snippet"
				2: name: "keyword.operator.use-python.vim-snippet"
			endCaptures:
				0: name: "punctuation.section.end.embedded.vim-snippet"
			patterns: [{
				name: "source.embedded.python"
				match: "(?:[^\\\\`]|\\\\.)+"
				captures:
					0: patterns: [include: "source.python"]
			}]
		},{
			# Vim script (UltiSnips)
			name: "string.interpolated.viml-code.vim-snippet"
			begin: "(`)(!v)"
			end:   "`"
			beginCaptures:
				1: name: "punctuation.section.begin.embedded.vim-snippet"
				2: name: "keyword.operator.use-viml.vim-snippet"
			endCaptures:
				0: name: "punctuation.section.end.embedded.vim-snippet"
			patterns: [{
				name: "source.embedded.viml"
				match: "(?:[^\\\\`]|\\\\.)+"
				captures:
					0: patterns: [include: "source.viml"]
			}]
		},{
			# Default: Vim script in SnipMate, shell in UltiSnips
			name: "string.interpolated.vim-snippet"
			begin: "`"
			end:   "`"
			beginCaptures: 0: name: "punctuation.section.begin.embedded.vim-snippet"
			endCaptures:   0: name: "punctuation.section.end.embedded.vim-snippet"
			patterns: [{
				name: "source.embedded.viml"
				match: "(?:[^\\\\`]|\\\\.)+"
				captures:
					0: patterns: [include: "source.viml"]
			}]
		}]


	# UltiSnip: Define a global snippet using embedded Python
	global:
		name:  "meta.ultisnip.global.vim-snippet"
		begin: "^(global)\\s+(!p)[ \\t]*$"
		end:   "^(endglobal)(?=\\s|$)"
		beginCaptures:
			1: name: "keyword.control.global.begin.vim-snippet"
			2: name: "keyword.operator.use-python.vim-snippet"
		endCaptures:
			1: name: "keyword.control.global.end.vim-snippet"
		contentName: "source.embedded.python"
		patterns: [include: "source.python"]
	
	
	# NeoSnippet-specific features
	neosnippet:
		patterns: [{
			name:  "meta.neosnippet-field.vim-snippet"
			match: "(?:\\G|^)(abbr|alias|delete|options)\\s+(\\S.*)"
			captures:
				1: name: "keyword.operator.$1.vim-snippet"
				2: name: "entity.other.neosnippet-keyword.vim-snippet"
		},{
			name:  "meta.neosnippet-field.vim-snippet"
			match: """(?x) (?:\\G|^)
				(regexp) \\s+
				( (')([^']*)(') # Single-quoted
				| (")([^"]*)(") # Double-quoted
				| ([^'"\\s]\\.) # Unquoted (?)
				)
			"""
			captures:
				1: name: "keyword.operator.regex.vim-snippet"
				2: name: "string.regexp.quoted.single.vim-snippet"
				3: name: "punctuation.definition.string.regexp.begin.vim-snippet"
				4: patterns: [include: "source.regexp"]
				5: name: "punctuation.definition.string.regexp.end.vim-snippet"
				6: name: "punctuation.definition.string.regexp.begin.vim-snippet"
				7: patterns: [include: "source.regexp"]
				8: name: "punctuation.definition.string.regexp.end.vim-snippet"
				9: patterns: [include: "source.regexp"]
		}]
		
	
	# Snippet definition
	snippet:
		name:  "meta.snippet.vim-snippet"
		begin: "^(snippet)(!{0,2})(?=[ \\t]|$)"
		end:   "^(endsnippet)\\s*$|(?=^\\S)|(?<=endsnippet)(?=\\s|$)"
		beginCaptures:
			1: name: "storage.type.class.vim-snippet"
			2: name: "keyword.operator.scope.modifier.vim-snippet"
		endCaptures:
			1: name: "storage.type.class.end.vim-snippet"
		patterns: [
			{include: "#snippetHead"}
			{include: "#snippetNeck"}
			{include: "#snippetBody"}
		]
	
	
	# Stuff matched on the line following the `snippet` keyword
	snippetHead:
		begin: "\\G"
		end:   "(?=^)|(?=\\s*$)"
		patterns: [{
			# Expansion trigger
			begin: "\\G\\s*((\\S+))"
			end:   "(?=^|\\S)"
			beginCaptures:
				1: name: "entity.name.trigger.vim-snippet"
				2: name: "markup.heading.vim-snippet" # Hack for GitHub's crappy colour scheme
			patterns: [include: "#snippetNeck"]
		},{
			# Quoted description
			begin: '(?<=\\s)(")[^"]*(")'
			end:   "(?=^|\\S)"
			beginCaptures:
				0: name: "string.quoted.double.description.vim-snippet"
				1: name: "punctuation.definition.string.begin.vim-snippet"
				2: name: "punctuation.definition.string.end.vim-snippet"
			patterns: [include: "#snippetNeck"]
		},{
			# UltiSnips options
			begin: "(?<=\\s)[Abeimrstw]+(?=\\s*$)"
			end:   "(?=^|\\S)"
			beginCaptures:
				0: name: "constant.language.other.options.vim-snippet"
			patterns: [include: "#snippetNeck"]
		},{
			# Unquoted description
			begin: "(?<=\\s)\\S+"
			end:   "(?=^|\\S)"
			beginCaptures:
				0: name: "entity.other.description.vim-snippet"
			patterns: [include: "#snippetNeck"]
		}, include: "#snippetNeck"]
	
	
	# Hack to differentiate between indented and unindented snippet bodies
	snippetNeck:
		begin: "\\G\\s*$\\s*"
		end:   "^(endsnippet)\\s*$|(?=^\\s)|(?<=endsnippet)(?=\\s|$)"
		endCaptures:
			1: name: "storage.type.class.end.vim-snippet"
		contentName: "meta.snippet-body.vim-snippet"
		patterns: [{
			begin: "(?<=^)(?=\\S)(?!endsnippet|(?:abbr|alias|regexp|options)\\s+\\S)"
			end:   "^(endsnippet)(?=$|[ \\t])"
			endCaptures:
				1: name: "storage.type.class.end.vim-snippet"
			patterns: [include: "#snippetBody"]
		},{
			# NeoSnippet fields
			begin: "(?<=^)(?=(?:abbr|alias|regexp|options)\\s+\\S)"
			end:   "(?=^\\s)"
			patterns: [include: "#neosnippet"]
		}]
	
	
	# Stuff matched inside a snippet's body
	snippetBody:
		patterns: [
			{include: "#escape"}
			{include: "#expression"}
			{include: "#tabStop"}
		]


	# Backslashed anything
	escape:
		name: "constant.character.escape.dollar-sign.vim-snippet"
		match: "(\\\\)."
		captures:
			1: name: "punctuation.definition.escape.vim-snippet"


	# UltiSnips: Declare the file's priority in snippet expansion order
	priority:
		begin: "^priority(?=\\s|$)"
		end:   "$"
		beginCaptures:
			0: name: "keyword.control.version.directive.vim-snippet"
		patterns: [
			name: "constant.numeric.integer.int.vim-snippet"
			match: "[-+]?[\\d.]+"
		]
		

	# Stuff that groks like $1, ${2}, ${3:etc}
	tabStop:
		patterns: [{
			# Unbraced: $1
			name:  "variable.language.tab-stop.$2-nth.vim-snippet"
			match: "(\\$)([0-9]+)"
			captures:
				1: name: "punctuation.definition.variable.vim-snippet"
		},{
			# Braced: ${2}
			name:  "variable.language.tab-stop.$2-nth.vim-snippet"
			match: "(\\${)([0-9]+)(})"
			captures:
				1: name: "punctuation.definition.variable.begin.vim-snippet"
				3: name: "punctuation.definition.variable.end.vim-snippet"
		},{
			# Braced: ${3:with placeholder}
			name:  "variable.language.tab-stop.$2-nth.placeholder.vim-snippet"
			begin: "(\\${)([0-9]+)(:)"
			end:   "}"
			beginCaptures:
				1: name: "punctuation.definition.variable.begin.vim-snippet"
				3: name: "keyword.operator.assignment.key-value.vim-snippet"
			endCaptures:
				0: name: "punctuation.definition.variable.end.vim-snippet"
			contentName: "markup.inserted.placeholder.vim-snippet"
			patterns: [
				{include: "#visual"}
				{include: "#escape"}
				{include: "#tabStop"}
			]
		},{
			# Transformation
			name:  "meta.transform.tab-stop.$2-nth.vim-snippet"
			begin: "(\\${)([0-9]+)(?=/)"
			end:   "}"
			beginCaptures:
				1: name: "punctuation.definition.variable.begin.vim-snippet"
				2: name: "variable.language.tab-stop.vim-snippet"
			endCaptures:
				0: name: "punctuation.definition.variable.end.vim-snippet"
			patterns: [{
				name:  "string.regexp.transform.vim-snippet"
				begin: "\\G/"
				end:   "/"
				beginCaptures: 0: name: "keyword.control.transform.begin.vim-snippet"
				endCaptures:   0: name: "keyword.control.transform.middle.vim-snippet"
				contentName: "markup.deleted.transform.vim-snippet"
				patterns: [include: "source.regexp"]
			},{
				contentName: "markup.inserted.transform.vim-snippet"
				begin: "(?<=/)"
				end:   "(/)([gima]*)"
				endCaptures:
					1: name: "keyword.control.transform.end.vim-snippet"
					2: name: "storage.modifier.transform.option.vim-snippet"
				patterns: [include: "source.regexp"]
			}]
		}]


	# UltiSnips-specific features
	ultisnips:
		patterns: [{
			# Clear directive
			name:  "meta.clear.directive.vim-snippet"
			begin: "^(clearsnippets)(?=\\s|$)"
			end:   "$"
			beginCaptures:
				1: name: "keyword.control.clearsnippets.directive.vim-snippet"
			patterns: [
				name: "variable.parameter.function.vim-snippet"
				match: "[^\\s]+"
			]
		},{
			# Directives which use quoted Python expressions
			name:  "meta.$1.directive.vim-snippet"
			begin: "^(context|pre_expand|post_expand|post_jump)(?=[ \\t]|$)"
			end:   "$"
			beginCaptures:
				1: name: "keyword.control.$1.directive.vim-snippet"
			patterns: [
				name: "string.quoted.double.python-code.vim-snippet"
				match: '(")([^"]*)(")'
				captures:
					1: name: "punctuation.definition.string.begin.vim-snippet"
					2: patterns: [include: "source.python"]
					3: name: "punctuation.definition.string.end.vim-snippet"
			]
		}]


	# Parser version directive
	version:
		match: "^(version)\\s+(\\d)"
		captures:
			1: name: "keyword.control.version.directive.vim-snippet"
			2: name: "constant.numeric.integer.int.vim-snippet"
		

	# Weird `${VISUAL}` thingie
	visual:
		patterns: [{
			# $VISUAL
			name:  "constant.language.visual-content.unbraced.vim-snippet"
			match: "(\\$)VISUAL"
			captures:
				1: name: "punctuation.definition.vim-snippet"
		},{
			# ${VISUAL}
			name: "constant.language.visual-content.braced.vim-snippet"
			match: "(\\${)VISUAL(})"
			captures:
				1: name: "punctuation.definition.begin.vim-snippet"
				2: name: "punctuation.definition.end.vim-snippet"
		},{
			# {VISUAL}
			name: "constant.language.visual-content.v0-syntax.vim-snippet"
			match: "({)VISUAL(})"
			captures:
				1: name: "punctuation.definition.begin.vim-snippet"
				2: name: "punctuation.definition.end.vim-snippet"
		}]
