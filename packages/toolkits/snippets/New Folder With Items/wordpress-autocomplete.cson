'.source.php':
	"_":
		"prefix":"_"
		"body":"_()"
	"Retrieve the translation of $text.":
		"prefix":"__"
		"body":"__( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Autoloader compatibility callback.":
		"prefix":"__autoload"
		"body":"__autoload( ${1:\\$classname} )"
	"Private helper function for checked, selected, and disabled.":
		"prefix":"__checked_selected_helper"
		"body":"__checked_selected_helper( ${1:\\$helper}${2:, \\$current}${3:, \\$echo}${4:, \\$type} )"
	"Helper function to clear the cache for number of authors.":
		"prefix":"__clear_multi_author_cache"
		"body":"__clear_multi_author_cache()"
	"Utility version of get_option that is private to install/upgrade.":
		"prefix":"__get_option"
		"body":"__get_option( ${1:\\$setting} )"
	"Retrieve the plural or single form based on the amount.":
		"prefix":"__ngettext"
		"body":"__ngettext()"
	"Register plural strings in POT file, but don't translate them.":
		"prefix":"__ngettext_noop"
		"body":"__ngettext_noop()"
	"Returns an empty array.":
		"prefix":"__return_empty_array"
		"body":"__return_empty_array()"
	"Returns an empty string.":
		"prefix":"__return_empty_string"
		"body":"__return_empty_string()"
	"Returns false.":
		"prefix":"__return_false"
		"body":"__return_false()"
	"Returns null.":
		"prefix":"__return_null"
		"body":"__return_null()"
	"Returns true.":
		"prefix":"__return_true"
		"body":"__return_true()"
	"Returns 0.":
		"prefix":"__return_zero"
		"body":"__return_zero()"
	"Displays an access denied message when a user tries to view a site's dashboard they
do not have access to.":
		"prefix":"_access_denied_splash"
		"body":"_access_denied_splash()"
	"Add submenus for post types.":
		"prefix":"_add_post_type_submenus"
		"body":"_add_post_type_submenus()"
	"Adds the (theme) 'Editor' link to the bottom of the Appearance menu.":
		"prefix":"_add_themes_utility_last"
		"body":"_add_themes_utility_last()"
	"Default admin bar callback.":
		"prefix":"_admin_bar_bump_cb"
		"body":"_admin_bar_bump_cb()"
	"Outputs the HTML for the notice to say that someone else is editing or has taken over editing of this post.":
		"prefix":"_admin_notice_post_locked"
		"body":"_admin_notice_post_locked()"
	"Displays the search query.":
		"prefix":"_admin_search_query"
		"body":"_admin_search_query()"
	"Kill WordPress ajax execution.":
		"prefix":"_ajax_wp_die_handler"
		"body":"_ajax_wp_die_handler( ${1:\\$message}${2:, \\$title = ''}${3:, \\$args = array()} )"
	"Newline preservation help function for wpautop":
		"prefix":"_autop_newline_preservation_helper"
		"body":"_autop_newline_preservation_helper( ${1:\\$matches} )"
	"Retrieve translated string with vertical bar context":
		"prefix":"_c"
		"body":"_c( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Retrieve a canonical form of the provided charset appropriate for passing to PHP
functions such as htmlspecialchars() and charset html attributes.":
		"prefix":"_canonical_charset"
		"body":"_canonical_charset( ${1:\\$charset} )"
	"Strip close comment and close php tags from file headers used by WP.":
		"prefix":"_cleanup_header_comment"
		"body":"_cleanup_header_comment( ${1:\\$str} )"
	"Private preg_replace callback used in image_add_caption()":
		"prefix":"_cleanup_image_add_caption"
		"body":"_cleanup_image_add_caption()"
	"Clear the lastcommentmodified cached value when a comment status is changed.":
		"prefix":"_clear_modified_cache_on_transition_comment_status"
		"body":"_clear_modified_cache_on_transition_comment_status( ${1:\\$new_status}${2:, \\$old_status} )"
	"Close comments on an old post. Hooked to comments_open and pings_open.":
		"prefix":"_close_comments_for_old_post"
		"body":"_close_comments_for_old_post( ${1:\\$open}${2:, \\$post_id} )"
	"Close comments on old posts on the fly, without any extra DB queries. Hooked to the_posts.":
		"prefix":"_close_comments_for_old_posts"
		"body":"_close_comments_for_old_posts( ${1:\\$posts}${2:, \\$query} )"
	"Retrieve the WordPress home page URL.":
		"prefix":"_config_wp_home"
		"body":"_config_wp_home( ${1:\\$url = ''} )"
	"Retrieve the WordPress site URL.":
		"prefix":"_config_wp_siteurl"
		"body":"_config_wp_siteurl( ${1:\\$url = ''} )"
	"Preview fix for JavaScript bug with foreign languages.":
		"prefix":"_convert_urlencoded_to_entities"
		"body":"_convert_urlencoded_to_entities( ${1:\\$match} )"
	"_copy_dir":
		"prefix":"_copy_dir"
		"body":"_copy_dir( ${1:\\$from}${2:, \\$to}${3:, \\$skip_list = array()} )"
	"Copy an existing image file.":
		"prefix":"_copy_image_file"
		"body":"_copy_image_file( ${1:\\$attachment_id} )"
	"Return the cache key for wp_count_posts() based on the passed arguments.":
		"prefix":"_count_posts_cache_key"
		"body":"_count_posts_cache_key( ${1:\\$type = 'post'}${2:, \\$perm = ''} )"
	"Crops an image resource. Internal use only.":
		"prefix":"_crop_image_resource"
		"body":"_crop_image_resource( ${1:\\$img}${2:, \\$x}${3:, \\$y}${4:, \\$w}${5:, \\$h} )"
	"Default custom background callback.":
		"prefix":"_custom_background_cb"
		"body":"_custom_background_cb()"
	"Registers the internal custom header and background routines.":
		"prefix":"_custom_header_background_just_in_time"
		"body":"_custom_header_background_just_in_time()"
	"Adds CSS to hide header text for custom logo, based on Customizer setting.":
		"prefix":"_custom_logo_header_styles"
		"body":"_custom_logo_header_styles()"
	"Perform a deep string replace operation to ensure the values in $search are no longer present":
		"prefix":"_deep_replace"
		"body":"_deep_replace( ${1:\\$search}${2:, \\$subject} )"
	"Kills WordPress execution and display HTML message with error message.":
		"prefix":"_default_wp_die_handler"
		"body":"_default_wp_die_handler( ${1:\\$message}${2:, \\$title = ''}${3:, \\$args = array()} )"
	"Checks an attachment being deleted to see if it's a header or background image.":
		"prefix":"_delete_attachment_theme_mod"
		"body":"_delete_attachment_theme_mod( ${1:\\$id} )"
	"Delete the fresh site option.":
		"prefix":"_delete_option_fresh_site"
		"body":"_delete_option_fresh_site()"
	"Mark a function argument as deprecated and inform when it has been used.":
		"prefix":"_deprecated_argument"
		"body":"_deprecated_argument( ${1:\\$function}${2:, \\$version}${3:, \\$message = null} )"
	"Marks a constructor as deprecated and informs when it has been used.":
		"prefix":"_deprecated_constructor"
		"body":"_deprecated_constructor( ${1:\\$class}${2:, \\$version}${3:, \\$parent_class = ''} )"
	"Mark a file as deprecated and inform when it has been used.":
		"prefix":"_deprecated_file"
		"body":"_deprecated_file( ${1:\\$file}${2:, \\$version}${3:, \\$replacement = null}${4:, \\$message = ''} )"
	"Mark a function as deprecated and inform when it has been used.":
		"prefix":"_deprecated_function"
		"body":"_deprecated_function( ${1:\\$function}${2:, \\$version}${3:, \\$replacement = null} )"
	"Marks a deprecated action or filter hook as deprecated and throws a notice.":
		"prefix":"_deprecated_hook"
		"body":"_deprecated_hook( ${1:\\$hook}${2:, \\$version}${3:, \\$replacement = null}${4:, \\$message = null} )"
	"Test if the current device has the capability to upload files.":
		"prefix":"_device_can_upload"
		"body":"_device_can_upload()"
	"Mark something as being incorrectly called.":
		"prefix":"_doing_it_wrong"
		"body":"_doing_it_wrong( ${1:\\$function}${2:, \\$message}${3:, \\$version} )"
	"Get the post title.":
		"prefix":"_draft_or_post_title"
		"body":"_draft_or_post_title( ${1:\\$post} )"
	"Display translated text.":
		"prefix":"_e"
		"body":"_e( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Display translated string with gettext context.":
		"prefix":"_ex"
		"body":"_ex( ${1:\\$text}${2:, \\$context}${3:, \\$domain = 'default'} )"
	"Retrieve URL headers and content using WP HTTP Request API.":
		"prefix":"_fetch_remote_file"
		"body":"_fetch_remote_file( ${1:\\$url}${2:, \\$headers = ''} )"
	"Filter the SQL clauses of an attachment query to include filenames.":
		"prefix":"_filter_query_attachment_filenames"
		"body":"_filter_query_attachment_filenames( ${1:\\$clauses} )"
	"Replace hrefs of attachment anchors with up-to-date permalinks.":
		"prefix":"_fix_attachment_links"
		"body":"_fix_attachment_links( ${1:\\$post} )"
	"Flips an image resource. Internal use only.":
		"prefix":"_flip_image_resource"
		"body":"_flip_image_resource( ${1:\\$img}${2:, \\$horz}${3:, \\$vert} )"
	"Hook used to schedule publication for a post marked for the future.":
		"prefix":"_future_post_hook"
		"body":"_future_post_hook( ${1:\\$deprecated}${2:, \\$post} )"
	"Returns a list of meta keys to be (maybe) populated in wp_update_user().":
		"prefix":"_get_additional_user_keys"
		"body":"_get_additional_user_keys( ${1:\\$user} )"
	"Retrieve the admin bar display preference of a user.":
		"prefix":"_get_admin_bar_pref"
		"body":"_get_admin_bar_pref( ${1:\\$context = 'front'}${2:, \\$user} )"
	"Retrieve a specific component from a parsed URL array.":
		"prefix":"_get_component_from_parsed_url_array"
		"body":"_get_component_from_parsed_url_array( ${1:\\$url_parts}${2:, \\$component = -1} )"
	"Retrieve cron info array option.":
		"prefix":"_get_cron_array"
		"body":"_get_cron_array()"
	"Retrieves the cron lock.":
		"prefix":"_get_cron_lock"
		"body":"_get_cron_lock()"
	"Build an object with custom-something object (post type, taxonomy) labels
out of a custom-something object":
		"prefix":"_get_custom_object_labels"
		"body":"_get_custom_object_labels( ${1:\\$object}${2:, \\$nohier_vs_hier_defaults} )"
	"Returns drop-ins that WordPress uses.":
		"prefix":"_get_dropins"
		"body":"_get_dropins()"
	"Get the timestamp of the last time any post was modified or published.":
		"prefix":"_get_last_post_time"
		"body":"_get_last_post_time( ${1:\\$timezone}${2:, \\$field}${3:, \\$post_type = 'any'} )"
	"Fetch an instance of a WP_List_Table class.":
		"prefix":"_get_list_table"
		"body":"_get_list_table( ${1:\\$class}${2:, \\$args = array()} )"
	"Retrieve the name of the metadata table for the specified object type.":
		"prefix":"_get_meta_table"
		"body":"_get_meta_table( ${1:\\$type} )"
	"Retrieve ids that are not already present in the cache.":
		"prefix":"_get_non_cached_ids"
		"body":"_get_non_cached_ids( ${1:\\$object_ids}${2:, \\$cache_key} )"
	"Retrieves the page permalink.":
		"prefix":"_get_page_link"
		"body":"_get_page_link( ${1:\\$post = false}${2:, \\$leavename = false}${3:, \\$sample = false} )"
	"Gets the path to a translation file for loading a textdomain just in time.":
		"prefix":"_get_path_to_translation"
		"body":"_get_path_to_translation( ${1:\\$domain}${2:, \\$reset = false} )"
	"Gets the path to a translation file in the languages directory for the current locale.":
		"prefix":"_get_path_to_translation_from_lang_dir"
		"body":"_get_path_to_translation_from_lang_dir( ${1:\\$domain} )"
	"Sanitizes plugin data, optionally adds markup, optionally translates.":
		"prefix":"_get_plugin_data_markup_translate"
		"body":"_get_plugin_data_markup_translate()"
	"Retrieve post ancestors.":
		"prefix":"_get_post_ancestors"
		"body":"_get_post_ancestors( ${1:\\$post} )"
	"Get random header image data from registered images in theme.":
		"prefix":"_get_random_header_data"
		"body":"_get_random_header_data()"
	"Tidies a filename for url display by the theme editor.":
		"prefix":"_get_template_edit_filename"
		"body":"_get_template_edit_filename( ${1:\\$fullpath}${2:, \\$containingfolder} )"
	"Get the subset of $terms that are descendants of $term_id.":
		"prefix":"_get_term_children"
		"body":"_get_term_children( ${1:\\$term_id}${2:, \\$terms}${3:, \\$taxonomy}${4:, \\$ancestors = array()} )"
	"Retrieves children of taxonomy as Term IDs.":
		"prefix":"_get_term_hierarchy"
		"body":"_get_term_hierarchy( ${1:\\$taxonomy} )"
	"Retrieves the widget ID base value.":
		"prefix":"_get_widget_id_base"
		"body":"_get_widget_id_base( ${1:\\$id} )"
	"Retrieve the regular expression for shortcodes.":
		"prefix":"_get_wptexturize_shortcode_regex"
		"body":"_get_wptexturize_shortcode_regex( ${1:\\$tagnames} )"
	"Retrieve the combined regular expression for HTML and shortcodes.":
		"prefix":"_get_wptexturize_split_regex"
		"body":"_get_wptexturize_split_regex( ${1:\\$shortcode_regex = ''} )"
	"Internal compat function to mimic hash_hmac().":
		"prefix":"_hash_hmac"
		"body":"_hash_hmac( ${1:\\$algo}${2:, \\$data}${3:, \\$key}${4:, \\$raw_output = false} )"
	"From php.net (modified by Mark Jaquith to behave like the native PHP5 function).":
		"prefix":"_http_build_query"
		"body":"_http_build_query( ${1:\\$data}${2:, \\$prefix = null}${3:, \\$sep = null}${4:, \\$key = ''}${5:, \\$urlencode = true} )"
	"Image preview ratio. Internal use only.":
		"prefix":"_image_get_preview_ratio"
		"body":"_image_get_preview_ratio( ${1:\\$w}${2:, \\$h} )"
	"This was once used to display an 'Insert into Post' button.":
		"prefix":"_insert_into_post_button"
		"body":"_insert_into_post_button()"
	"_ipad_meta":
		"prefix":"_ipad_meta"
		"body":"_ipad_meta()"
	"Return if a menu item is valid.":
		"prefix":"_is_valid_nav_menu_item"
		"body":"_is_valid_nav_menu_item( ${1:\\$item} )"
	"_json_decode_object_helper":
		"prefix":"_json_decode_object_helper"
		"body":"_json_decode_object_helper( ${1:\\$data} )"
	"Callback to add a base url to relative links in passed content.":
		"prefix":"_links_add_base"
		"body":"_links_add_base( ${1:\\$m} )"
	"Callback to add a target attribute to all links in passed content.":
		"prefix":"_links_add_target"
		"body":"_links_add_target( ${1:\\$m} )"
	"Outputs a single row of public meta data in the Custom Fields meta box.":
		"prefix":"_list_meta_row"
		"body":"_list_meta_row( ${1:\\$entry}${2:, \\$count} )"
	"Retrieve the path or url of an attachment's attached file.":
		"prefix":"_load_image_to_edit_path"
		"body":"_load_image_to_edit_path( ${1:\\$attachment_id}${2:, \\$size = 'full'} )"
	"Loads plugin and theme textdomains just-in-time.":
		"prefix":"_load_textdomain_just_in_time"
		"body":"_load_textdomain_just_in_time( ${1:\\$domain} )"
	"Output the HTML for restoring the post data from DOM storage":
		"prefix":"_local_storage_notice"
		"body":"_local_storage_notice()"
	"Update category structure to old pre 2.3 from new taxonomy structure.":
		"prefix":"_make_cat_compat"
		"body":"_make_cat_compat( ${1:\\$category} )"
	"Callback to convert email address match to HTML A element.":
		"prefix":"_make_email_clickable_cb"
		"body":"_make_email_clickable_cb( ${1:\\$matches} )"
	"Callback to convert URI match to HTML A element.":
		"prefix":"_make_url_clickable_cb"
		"body":"_make_url_clickable_cb( ${1:\\$matches} )"
	"Callback to convert URL match to HTML A element.":
		"prefix":"_make_web_ftp_clickable_cb"
		"body":"_make_web_ftp_clickable_cb( ${1:\\$matches} )"
	"Determines whether core should be updated.":
		"prefix":"_maybe_update_core"
		"body":"_maybe_update_core()"
	"Check the last time plugins were run before checking plugin versions.":
		"prefix":"_maybe_update_plugins"
		"body":"_maybe_update_plugins()"
	"Check themes versions only after a duration of time.":
		"prefix":"_maybe_update_themes"
		"body":"_maybe_update_themes()"
	"Internal compat function to mimic mb_strlen().":
		"prefix":"_mb_strlen"
		"body":"_mb_strlen( ${1:\\$str}${2:, \\$encoding = null} )"
	"Internal compat function to mimic mb_substr().":
		"prefix":"_mb_substr"
		"body":"_mb_substr( ${1:\\$str}${2:, \\$start}${3:, \\$length = null}${4:, \\$encoding = null} )"
	"Set the localized direction for MCE plugin.":
		"prefix":"_mce_set_direction"
		"body":"_mce_set_direction( ${1:\\$mce_init} )"
	"This was once used to display a media button.":
		"prefix":"_media_button"
		"body":"_media_button()"
	"_media_states":
		"prefix":"_media_states"
		"body":"_media_states( ${1:\\$post} )"
	"Translates and retrieves the singular or plural form based on the supplied number.":
		"prefix":"_n"
		"body":"_n( ${1:\\$single}${2:, \\$plural}${3:, \\$number}${4:, \\$domain = 'default'} )"
	"Registers plural strings in POT file, but does not translate them.":
		"prefix":"_n_noop"
		"body":"_n_noop( ${1:\\$singular}${2:, \\$plural}${3:, \\$domain = null} )"
	"Prevents a menu item ID from being used more than once.":
		"prefix":"_nav_menu_item_id_use_once"
		"body":"_nav_menu_item_id_use_once( ${1:\\$id}${2:, \\$item} )"
	"Wraps passed links in navigational markup.":
		"prefix":"_navigation_markup"
		"body":"_navigation_markup( ${1:\\$links}${2:, \\$class = 'posts-navigation'}${3:, \\$screen_reader_text = ''} )"
	"Legacy version of _n(), which supports contexts.":
		"prefix":"_nc"
		"body":"_nc( ${1:\\$single}${2:, \\$plural}${3:, \\$number}${4:, \\$domain = 'default'} )"
	"Translates and retrieves the singular or plural form based on the supplied number, with gettext context.":
		"prefix":"_nx"
		"body":"_nx( ${1:\\$single}${2:, \\$plural}${3:, \\$number}${4:, \\$context}${5:, \\$domain = 'default'} )"
	"Registers plural strings with gettext context in POT file, but does not translate them.":
		"prefix":"_nx_noop"
		"body":"_nx_noop( ${1:\\$singular}${2:, \\$plural}${3:, \\$context}${4:, \\$domain = null} )"
	"Creates an XML string from a given array.":
		"prefix":"_oembed_create_xml"
		"body":"_oembed_create_xml( ${1:\\$data}${2:, \\$node = null} )"
	"Prepare the oembed HTML to be displayed in an RSS feed.":
		"prefix":"_oembed_filter_feed_content"
		"body":"_oembed_filter_feed_content( ${1:\\$content} )"
	"Hooks into the REST API output to print XML instead of JSON.":
		"prefix":"_oembed_rest_pre_serve_request"
		"body":"_oembed_rest_pre_serve_request( ${1:\\$served}${2:, \\$result}${3:, \\$request}${4:, \\$server} )"
	"Add count of children to parent count.":
		"prefix":"_pad_term_counts"
		"body":"_pad_term_counts( ${1:\\$terms}${2:, \\$taxonomy} )"
	"Traverse and return all the nested children post names of a root page.":
		"prefix":"_page_traverse_name"
		"body":"_page_traverse_name( ${1:\\$page_id}${2:, \\$children}${3:, \\$result} )"
	"Remove the post format prefix from the name property of the term object created by get_term().":
		"prefix":"_post_format_get_term"
		"body":"_post_format_get_term( ${1:\\$term} )"
	"Remove the post format prefix from the name property of the term objects created by get_terms().":
		"prefix":"_post_format_get_terms"
		"body":"_post_format_get_terms( ${1:\\$terms}${2:, \\$taxonomies}${3:, \\$args} )"
	"Filters the post format term link to remove the format prefix.":
		"prefix":"_post_format_link"
		"body":"_post_format_link( ${1:\\$link}${2:, \\$term}${3:, \\$taxonomy} )"
	"Filters the request to allow for the format prefix.":
		"prefix":"_post_format_request"
		"body":"_post_format_request( ${1:\\$qvs} )"
	"Remove the post format prefix from the name property of the term objects created by wp_get_object_terms().":
		"prefix":"_post_format_wp_get_object_terms"
		"body":"_post_format_wp_get_object_terms( ${1:\\$terms} )"
	"_post_states":
		"prefix":"_post_states"
		"body":"_post_states( ${1:\\$post} )"
	"Store or return a list of post type meta caps for map_meta_cap().":
		"prefix":"_post_type_meta_capabilities"
		"body":"_post_type_meta_capabilities( ${1:\\$capabilities = null} )"
	"Private function to modify the current stylesheet when previewing a theme":
		"prefix":"_preview_theme_stylesheet_filter"
		"body":"_preview_theme_stylesheet_filter()"
	"Private function to modify the current template when previewing a theme":
		"prefix":"_preview_theme_template_filter"
		"body":"_preview_theme_template_filter()"
	"Adds any comments from the given IDs to the cache that do not already exist in cache.":
		"prefix":"_prime_comment_caches"
		"body":"_prime_comment_caches( ${1:\\$comment_ids}${2:, \\$update_meta_cache = true} )"
	"Adds any networks from the given IDs to the cache that do not already exist in cache.":
		"prefix":"_prime_network_caches"
		"body":"_prime_network_caches( ${1:\\$network_ids} )"
	"Adds any posts from the given ids to the cache that do not already exist in cache":
		"prefix":"_prime_post_caches"
		"body":"_prime_post_caches( ${1:\\$ids}${2:, \\$update_term_cache = true}${3:, \\$update_meta_cache = true} )"
	"Adds any sites from the given ids to the cache that do not already exist in cache.":
		"prefix":"_prime_site_caches"
		"body":"_prime_site_caches( ${1:\\$ids} )"
	"Adds any terms from the given IDs to the cache that do not already exist in cache.":
		"prefix":"_prime_term_caches"
		"body":"_prime_term_caches( ${1:\\$term_ids}${2:, \\$update_meta_cache = true} )"
	"Prints inline Emoji dection script":
		"prefix":"_print_emoji_detection_script"
		"body":"_print_emoji_detection_script()"
	"Print scripts (internal use only)":
		"prefix":"_print_scripts"
		"body":"_print_scripts()"
	"Print styles (internal use only)":
		"prefix":"_print_styles"
		"body":"_print_styles()"
	"Hook to schedule pings and enclosures when a post is published.":
		"prefix":"_publish_post_hook"
		"body":"_publish_post_hook( ${1:\\$post_id} )"
	"Redirect to the About WordPress page after a successful upgrade.":
		"prefix":"_redirect_to_about_wordpress"
		"body":"_redirect_to_about_wordpress( ${1:\\$new_version} )"
	"Registers the form callback for a widget.":
		"prefix":"_register_widget_form_callback"
		"body":"_register_widget_form_callback( ${1:\\$id}${2:, \\$name}${3:, \\$form_callback}${4:, \\$options = array()} )"
	"Registers the update callback for a widget.":
		"prefix":"_register_widget_update_callback"
		"body":"_register_widget_update_callback( ${1:\\$id_base}${2:, \\$update_callback}${3:, \\$options = array()} )"
	"This was once used to move child posts to a new parent.":
		"prefix":"_relocate_children"
		"body":"_relocate_children( ${1:\\$old_ID}${2:, \\$new_ID} )"
	"Removes arguments from a query string if they are not present in a URL
DO NOT use this in plugin code.":
		"prefix":"_remove_qs_args_if_not_in_url"
		"body":"_remove_qs_args_if_not_in_url( ${1:\\$query_string}${2:, \\$args_to_check}${3:, \\$url} )"
	"Do not use. Removes theme support internally, ignorant of the blacklist.":
		"prefix":"_remove_theme_support"
		"body":"_remove_theme_support( ${1:\\$feature} )"
	"Reset the page_on_front, show_on_front, and page_for_post settings when
a linked page is deleted or trashed.":
		"prefix":"_reset_front_page_settings_for_post"
		"body":"_reset_front_page_settings_for_post( ${1:\\$post_id} )"
	"Retrieve":
		"prefix":"_response_to_rss"
		"body":"_response_to_rss( ${1:\\$resp} )"
	"Returns an image resource. Internal use only.":
		"prefix":"_rotate_image_resource"
		"body":"_rotate_image_resource( ${1:\\$img}${2:, \\$angle} )"
	"Internal helper function to sanitize a string from user input or from the db":
		"prefix":"_sanitize_text_fields"
		"body":"_sanitize_text_fields( ${1:\\$str}${2:, \\$keep_newlines = false} )"
	"Callback formerly fired on the save_post hook. No longer needed.":
		"prefix":"_save_post_hook"
		"body":"_save_post_hook()"
	"Kill WordPress execution.":
		"prefix":"_scalar_wp_die_handler"
		"body":"_scalar_wp_die_handler( ${1:\\$message = ''} )"
	"Formerly used internally to tidy up the search terms.":
		"prefix":"_search_terms_tidy"
		"body":"_search_terms_tidy( ${1:\\$t} )"
	"Updates the CRON option with the new CRON array.":
		"prefix":"_set_cron_array"
		"body":"_set_cron_array( ${1:\\$cron} )"
	"Sets up the post object for preview based on the post autosave.":
		"prefix":"_set_preview"
		"body":"_set_preview( ${1:\\$post} )"
	"Filters the latest content for preview from the post autosave.":
		"prefix":"_show_post_preview"
		"body":"_show_post_preview()"
	"Callback to sort array by a 'name' key.":
		"prefix":"_sort_name_callback"
		"body":"_sort_name_callback()"
	"Sort menu items by the desired key.":
		"prefix":"_sort_nav_menu_items"
		"body":"_sort_nav_menu_items( ${1:\\$a}${2:, \\$b} )"
	"Callback to sort array by a 'Name' key.":
		"prefix":"_sort_uname_callback"
		"body":"_sort_uname_callback()"
	"Create a new term for a term_taxonomy item that currently shares its term
with another term_taxonomy.":
		"prefix":"_split_shared_term"
		"body":"_split_shared_term( ${1:\\$term_id}${2:, \\$term_taxonomy_id}${3:, \\$record = true} )"
	"Breaks a string into chunks by splitting at whitespace characters.":
		"prefix":"_split_str_by_whitespace"
		"body":"_split_str_by_whitespace( ${1:\\$string}${2:, \\$goal} )"
	"Thickbox image paths for Network Admin.":
		"prefix":"_thickbox_path_admin_subfolder"
		"body":"_thickbox_path_admin_subfolder()"
	"Hook for managing future post transitions to published.":
		"prefix":"_transition_post_status"
		"body":"_transition_post_status( ${1:\\$new_status}${2:, \\$old_status}${3:, \\$post} )"
	"Truncate a post slug.":
		"prefix":"_truncate_post_slug"
		"body":"_truncate_post_slug( ${1:\\$slug}${2:, \\$length = 200} )"
	"This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library.":
		"prefix":"_unzip_file_pclzip"
		"body":"_unzip_file_pclzip( ${1:\\$file}${2:, \\$to}${3:, \\$needed_dirs = array()} )"
	"This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class.":
		"prefix":"_unzip_file_ziparchive"
		"body":"_unzip_file_ziparchive( ${1:\\$file}${2:, \\$to}${3:, \\$needed_dirs = array()} )"
	"Handler for updating the blog date when a published post is deleted.":
		"prefix":"_update_blog_date_on_post_delete"
		"body":"_update_blog_date_on_post_delete( ${1:\\$post_id} )"
	"Handler for updating the blog date when a post is published or an already published post is changed.":
		"prefix":"_update_blog_date_on_post_publish"
		"body":"_update_blog_date_on_post_publish( ${1:\\$new_status}${2:, \\$old_status}${3:, \\$post} )"
	"Will update term count based on number of objects.":
		"prefix":"_update_generic_term_count"
		"body":"_update_generic_term_count( ${1:\\$terms}${2:, \\$taxonomy} )"
	"Will update term count based on object types of the current taxonomy.":
		"prefix":"_update_post_term_count"
		"body":"_update_post_term_count( ${1:\\$terms}${2:, \\$taxonomy} )"
	"Handler for updating the blog posts count date when a post is deleted.":
		"prefix":"_update_posts_count_on_delete"
		"body":"_update_posts_count_on_delete( ${1:\\$post_id} )"
	"Handler for updating the blog posts count date when a post status changes.":
		"prefix":"_update_posts_count_on_transition_post_status"
		"body":"_update_posts_count_on_transition_post_status( ${1:\\$new_status}${2:, \\$old_status} )"
	"Update the custom taxonomies' term counts when a post's status is changed.":
		"prefix":"_update_term_count_on_transition_post_status"
		"body":"_update_term_count_on_transition_post_status( ${1:\\$new_status}${2:, \\$old_status}${3:, \\$post} )"
	"Recursively find Genericons example files in a given folder.":
		"prefix":"_upgrade_422_find_genericons_files_in_folder"
		"body":"_upgrade_422_find_genericons_files_in_folder( ${1:\\$directory} )"
	"Cleans up Genericons example files.":
		"prefix":"_upgrade_422_remove_genericons"
		"body":"_upgrade_422_remove_genericons()"
	"_upgrade_440_force_deactivate_incompatible_plugins":
		"prefix":"_upgrade_440_force_deactivate_incompatible_plugins"
		"body":"_upgrade_440_force_deactivate_incompatible_plugins()"
	"Upgrade a Cron info array.":
		"prefix":"_upgrade_cron_array"
		"body":"_upgrade_cron_array( ${1:\\$cron} )"
	"Sorts a multidimensional array by first member of each top level member":
		"prefix":"_usort_by_first_member"
		"body":"_usort_by_first_member( ${1:\\$a}${2:, \\$b} )"
	"Sort categories by ID.":
		"prefix":"_usort_terms_by_id"
		"body":"_usort_terms_by_id( ${1:\\$a}${2:, \\$b} )"
	"Sort categories by name.":
		"prefix":"_usort_terms_by_name"
		"body":"_usort_terms_by_name( ${1:\\$a}${2:, \\$b} )"
	"The formatted output of a list of bookmarks.":
		"prefix":"_walk_bookmarks"
		"body":"_walk_bookmarks( ${1:\\$bookmarks}${2:, \\$args = ''} )"
	"Helper function to add global attributes to a tag in the allowed html list.":
		"prefix":"_wp_add_global_attributes"
		"body":"_wp_add_global_attributes( ${1:\\$value} )"
	"Instantiate the admin bar object and set it up as a global for access elsewhere.":
		"prefix":"_wp_admin_bar_init"
		"body":"_wp_admin_bar_init()"
	"_wp_admin_html_begin":
		"prefix":"_wp_admin_html_begin"
		"body":"_wp_admin_html_begin()"
	"Ajax handler for adding a hierarchical term.":
		"prefix":"_wp_ajax_add_hierarchical_term"
		"body":"_wp_ajax_add_hierarchical_term()"
	"Sends back current comment total and new page links if they need to be updated.":
		"prefix":"_wp_ajax_delete_comment_response"
		"body":"_wp_ajax_delete_comment_response( ${1:\\$comment_id}${2:, \\$delta = -1} )"
	"Prints the appropriate response to a menu quick search.":
		"prefix":"_wp_ajax_menu_quick_search"
		"body":"_wp_ajax_menu_quick_search( ${1:\\$request = array()} )"
	"Automatically add newly published page objects to menus with that as an option.":
		"prefix":"_wp_auto_add_pages_to_menu"
		"body":"_wp_auto_add_pages_to_menu( ${1:\\$new_status}${2:, \\$old_status}${3:, \\$post} )"
	"Splits a batch of shared taxonomy terms.":
		"prefix":"_wp_batch_split_terms"
		"body":"_wp_batch_split_terms()"
	"Call the 'all' hook, which will process the functions hooked into it.":
		"prefix":"_wp_call_all_hook"
		"body":"_wp_call_all_hook( ${1:\\$args} )"
	"Returns whether PCRE/u (PCRE_UTF8 modifier) is available for use.":
		"prefix":"_wp_can_use_pcre_u"
		"body":"_wp_can_use_pcre_u( ${1:\\$set = null} )"
	"In order to avoid the _wp_batch_split_terms() job being accidentally removed,
check that it's still scheduled while we haven't finished splitting terms.":
		"prefix":"_wp_check_for_scheduled_split_terms"
		"body":"_wp_check_for_scheduled_split_terms()"
	"Check default categories when a term gets split to see if any of them need to be updated.":
		"prefix":"_wp_check_split_default_terms"
		"body":"_wp_check_split_default_terms( ${1:\\$term_id}${2:, \\$new_term_id}${3:, \\$term_taxonomy_id}${4:, \\$taxonomy} )"
	"If the term being split is a nav_menu, change associations.":
		"prefix":"_wp_check_split_nav_menu_terms"
		"body":"_wp_check_split_nav_menu_terms( ${1:\\$term_id}${2:, \\$new_term_id}${3:, \\$term_taxonomy_id}${4:, \\$taxonomy} )"
	"Check menu items when a term gets split to see if any of them need to be updated.":
		"prefix":"_wp_check_split_terms_in_menus"
		"body":"_wp_check_split_terms_in_menus( ${1:\\$term_id}${2:, \\$new_term_id}${3:, \\$term_taxonomy_id}${4:, \\$taxonomy} )"
	"Retrieve the link to a contributor's WordPress.org profile page.":
		"prefix":"_wp_credits_add_profile_link"
		"body":"_wp_credits_add_profile_link( ${1:\\$display_name}${2:, \\$username}${3:, \\$profiles} )"
	"Retrieve the link to an external library used in WordPress.":
		"prefix":"_wp_credits_build_object_link"
		"body":"_wp_credits_build_object_link( ${1:\\$data} )"
	"Filters changeset post data upon insert to ensure post_name is intact.":
		"prefix":"_wp_customize_changeset_filter_insert_post_data"
		"body":"_wp_customize_changeset_filter_insert_post_data( ${1:\\$post_data}${2:, \\$supplied_post_data} )"
	"Includes and instantiates the WP_Customize_Manager class.":
		"prefix":"_wp_customize_include"
		"body":"_wp_customize_include()"
	"Adds settings for the customize-loader script.":
		"prefix":"_wp_customize_loader_settings"
		"body":"_wp_customize_loader_settings()"
	"Publish a snapshot's changes.":
		"prefix":"_wp_customize_publish_changeset"
		"body":"_wp_customize_publish_changeset( ${1:\\$new_status}${2:, \\$old_status}${3:, \\$changeset_post} )"
	"Outputs controls for the current dashboard widget.":
		"prefix":"_wp_dashboard_control_callback"
		"body":"_wp_dashboard_control_callback( ${1:\\$dashboard}${2:, \\$meta_box} )"
	"Outputs a row for the Recent Comments widget.":
		"prefix":"_wp_dashboard_recent_comments_row"
		"body":"_wp_dashboard_recent_comments_row( ${1:\\$comment}${2:, \\$show_date = true} )"
	"Delete auto-draft posts associated with the supplied changeset.":
		"prefix":"_wp_delete_customize_changeset_dependent_auto_drafts"
		"body":"_wp_delete_customize_changeset_dependent_auto_drafts( ${1:\\$post_id} )"
	"Deletes orphaned draft menu items":
		"prefix":"_wp_delete_orphaned_draft_menu_items"
		"body":"_wp_delete_orphaned_draft_menu_items()"
	"Callback for handling a menu item when its original object is deleted.":
		"prefix":"_wp_delete_post_menu_item"
		"body":"_wp_delete_post_menu_item( ${1:\\$object_id} )"
	"Serves as a callback for handling a menu item when its original object is deleted.":
		"prefix":"_wp_delete_tax_menu_item"
		"body":"_wp_delete_tax_menu_item( ${1:\\$object_id}${2:, \\$tt_id}${3:, \\$taxonomy} )"
	"If a JSON blob of navigation menu data is in POST data, expand it and inject
it into `$_POST` to avoid PHP `max_input_vars` limitations. See #14134.":
		"prefix":"_wp_expand_nav_menu_post_data"
		"body":"_wp_expand_nav_menu_post_data()"
	"Build Unique ID for storage and retrieval.":
		"prefix":"_wp_filter_build_unique_id"
		"body":"_wp_filter_build_unique_id( ${1:\\$tag}${2:, \\$function}${3:, \\$priority} )"
	"Filters the URL base for taxonomies.":
		"prefix":"_wp_filter_taxonomy_base"
		"body":"_wp_filter_taxonomy_base( ${1:\\$base} )"
	"Private, for use in *_footer_scripts hooks":
		"prefix":"_wp_footer_scripts"
		"body":"_wp_footer_scripts()"
	"Get the attachment path relative to the upload directory.":
		"prefix":"_wp_get_attachment_relative_path"
		"body":"_wp_get_attachment_relative_path( ${1:\\$file} )"
	"Retrieves the current user object.":
		"prefix":"_wp_get_current_user"
		"body":"_wp_get_current_user()"
	"Get the image size as array from its meta data.":
		"prefix":"_wp_get_image_size_from_meta"
		"body":"_wp_get_image_size_from_meta( ${1:\\$size_name}${2:, \\$image_meta} )"
	"Gets the post revision version.":
		"prefix":"_wp_get_post_revision_version"
		"body":"_wp_get_post_revision_version( ${1:\\$revision} )"
	"The old private function for setting up user contact methods.":
		"prefix":"_wp_get_user_contactmethods"
		"body":"_wp_get_user_contactmethods( ${1:\\$user = null} )"
	"Handle PHP uploads in WordPress, sanitizing file names, checking extensions for mime type,
and moving the file to the appropriate directory within the uploads directory.":
		"prefix":"_wp_handle_upload"
		"body":"_wp_handle_upload( ${1:\\$file}${2:, \\$overrides}${3:, \\$time}${4:, \\$action} )"
	"Returns the initialized WP_Http Object":
		"prefix":"_wp_http_get_object"
		"body":"_wp_http_get_object()"
	"Tests which editors are capable of supporting the request.":
		"prefix":"_wp_image_editor_choose"
		"body":"_wp_image_editor_choose( ${1:\\$args = array()} )"
	"Helper function to convert hex encoded chars to ASCII":
		"prefix":"_wp_iso_convert"
		"body":"_wp_iso_convert( ${1:\\$match} )"
	"Convert a string to UTF-8, so that it can be safely encoded to JSON.":
		"prefix":"_wp_json_convert_string"
		"body":"_wp_json_convert_string( ${1:\\$string} )"
	"Prepares response data to be serialized to JSON.":
		"prefix":"_wp_json_prepare_data"
		"body":"_wp_json_prepare_data( ${1:\\$data} )"
	"Perform sanity checks on data that shall be encoded to JSON.":
		"prefix":"_wp_json_sanity_check"
		"body":"_wp_json_sanity_check( ${1:\\$data}${2:, \\$depth} )"
	"Make sure that auto-draft posts get their post_date bumped to prevent premature garbage-collection.":
		"prefix":"_wp_keep_alive_customize_changeset_dependent_auto_drafts"
		"body":"_wp_keep_alive_customize_changeset_dependent_auto_drafts( ${1:\\$new_status}${2:, \\$old_status}${3:, \\$post} )"
	"Regex callback for wp_kses_decode_entities":
		"prefix":"_wp_kses_decode_entities_chr"
		"body":"_wp_kses_decode_entities_chr( ${1:\\$match} )"
	"Regex callback for wp_kses_decode_entities()":
		"prefix":"_wp_kses_decode_entities_chr_hexdec"
		"body":"_wp_kses_decode_entities_chr_hexdec( ${1:\\$match} )"
	"Callback for wp_kses_split.":
		"prefix":"_wp_kses_split_callback"
		"body":"_wp_kses_split_callback()"
	"Helper function for wp_link_pages().":
		"prefix":"_wp_link_page"
		"body":"_wp_link_page( ${1:\\$i} )"
	"Add the class property classes for the current context, if applicable.":
		"prefix":"_wp_menu_item_classes_by_context"
		"body":"_wp_menu_item_classes_by_context( ${1:\\$menu_items} )"
	"Display menu.":
		"prefix":"_wp_menu_output"
		"body":"_wp_menu_output( ${1:\\$menu}${2:, \\$submenu}${3:, \\$submenu_as_parent = true} )"
	"Return a MySQL expression for selecting the week number based on the start_of_week option.":
		"prefix":"_wp_mysql_week"
		"body":"_wp_mysql_week( ${1:\\$column} )"
	"Adds custom arguments to some of the meta box object types.":
		"prefix":"_wp_nav_menu_meta_box_object"
		"body":"_wp_nav_menu_meta_box_object( ${1:\\$object = null} )"
	"Serves as a callback for comparing objects based on count.":
		"prefix":"_wp_object_count_sort_cb"
		"body":"_wp_object_count_sort_cb( ${1:\\$a}${2:, \\$b} )"
	"Serves as a callback for comparing objects based on name.":
		"prefix":"_wp_object_name_sort_cb"
		"body":"_wp_object_name_sort_cb( ${1:\\$a}${2:, \\$b} )"
	"Returns the initialized WP_oEmbed object.":
		"prefix":"_wp_oembed_get_object"
		"body":"_wp_oembed_get_object()"
	"Returns a post array ready to be inserted into the posts table as a post revision.":
		"prefix":"_wp_post_revision_data"
		"body":"_wp_post_revision_data( ${1:\\$post = array()}${2:, \\$autosave = false} )"
	"Determines which fields of posts are to be saved in revisions.":
		"prefix":"_wp_post_revision_fields"
		"body":"_wp_post_revision_fields( ${1:\\$post = array()}${2:, \\$deprecated = false} )"
	"Adds a 'wp-post-image' class to post thumbnails. Internal use only.":
		"prefix":"_wp_post_thumbnail_class_filter"
		"body":"_wp_post_thumbnail_class_filter( ${1:\\$attr} )"
	"Adds '_wp_post_thumbnail_class_filter' callback to the 'wp_get_attachment_image_attributes'
filter hook. Internal use only.":
		"prefix":"_wp_post_thumbnail_class_filter_add"
		"body":"_wp_post_thumbnail_class_filter_add( ${1:\\$attr} )"
	"Removes the '_wp_post_thumbnail_class_filter' callback from the 'wp_get_attachment_image_attributes'
filter hook. Internal use only.":
		"prefix":"_wp_post_thumbnail_class_filter_remove"
		"body":"_wp_post_thumbnail_class_filter_remove( ${1:\\$attr} )"
	"Output HTML for the post thumbnail meta-box.":
		"prefix":"_wp_post_thumbnail_html"
		"body":"_wp_post_thumbnail_html( ${1:\\$thumbnail_id = null}${2:, \\$post = null} )"
	"Output a notice when editing the page for posts (internal use only).":
		"prefix":"_wp_posts_page_notice"
		"body":"_wp_posts_page_notice()"
	"Filters post thumbnail lookup to set the post thumbnail.":
		"prefix":"_wp_preview_post_thumbnail_filter"
		"body":"_wp_preview_post_thumbnail_filter( ${1:\\$value}${2:, \\$post_id}${3:, \\$meta_key} )"
	"Filters terms lookup to set the post format.":
		"prefix":"_wp_preview_terms_filter"
		"body":"_wp_preview_terms_filter( ${1:\\$terms}${2:, \\$post_id}${3:, \\$taxonomy} )"
	"Inserts post data into the posts table as a post revision.":
		"prefix":"_wp_put_post_revision"
		"body":"_wp_put_post_revision( ${1:\\$post = null}${2:, \\$autosave = false} )"
	"Filter out `register_meta()` args based on a whitelist.":
		"prefix":"_wp_register_meta_args_whitelist"
		"body":"_wp_register_meta_args_whitelist( ${1:\\$args}${2:, \\$default_args} )"
	"Return relative path to an uploaded file.":
		"prefix":"_wp_relative_upload_path"
		"body":"_wp_relative_upload_path( ${1:\\$path} )"
	"Displays title tag with content.":
		"prefix":"_wp_render_title_tag"
		"body":"_wp_render_title_tag()"
	"URL encode UTF-8 characters in a URL.":
		"prefix":"_wp_sanitize_utf8_in_redirect"
		"body":"_wp_sanitize_utf8_in_redirect( ${1:\\$matches} )"
	"Helper function to output a _doing_it_wrong message when applicable.":
		"prefix":"_wp_scripts_maybe_doing_it_wrong"
		"body":"_wp_scripts_maybe_doing_it_wrong( ${1:\\$function} )"
	"Handle sidebars config after theme change":
		"prefix":"_wp_sidebars_changed"
		"body":"_wp_sidebars_changed()"
	"Converts a number of special characters into their HTML entities.":
		"prefix":"_wp_specialchars"
		"body":"_wp_specialchars( ${1:\\$string}${2:, \\$quote_style = ENT_NOQUOTES}${3:, \\$charset = false}${4:, \\$double_encode = false} )"
	"Sort-helper for timezones.":
		"prefix":"_wp_timezone_choice_usort_callback"
		"body":"_wp_timezone_choice_usort_callback( ${1:\\$a}${2:, \\$b} )"
	"Translate a PHP_URL_* constant to the named array keys PHP uses.":
		"prefix":"_wp_translate_php_url_constant_to_key"
		"body":"_wp_translate_php_url_constant_to_key( ${1:\\$constant} )"
	"Rename $_POST data from form names to DB post columns.":
		"prefix":"_wp_translate_postdata"
		"body":"_wp_translate_postdata( ${1:\\$update = false}${2:, \\$post_data = null} )"
	"Upgrade the revisions author, add the current post as a revision and set the revisions version to 1":
		"prefix":"_wp_upgrade_revisions_of_post"
		"body":"_wp_upgrade_revisions_of_post( ${1:\\$post}${2:, \\$revisions} )"
	"A non-filtered, non-cached version of wp_upload_dir() that doesn't check the path.":
		"prefix":"_wp_upload_dir"
		"body":"_wp_upload_dir( ${1:\\$time = null} )"
	"Search for disabled element tags. Push element to stack on tag open and pop
on tag close.":
		"prefix":"_wptexturize_pushpop_element"
		"body":"_wptexturize_pushpop_element( ${1:\\$text}${2:, \\$stack}${3:, \\$disabled_elements} )"
	"Retrieve translated string with gettext context.":
		"prefix":"_x"
		"body":"_x( ${1:\\$text}${2:, \\$context}${3:, \\$domain = 'default'} )"
	"Kill WordPress execution and display XML message with error message.":
		"prefix":"_xmlrpc_wp_die_handler"
		"body":"_xmlrpc_wp_die_handler( ${1:\\$message}${2:, \\$title = ''}${3:, \\$args = array()} )"
	"Convert a value to non-negative integer.":
		"prefix":"absint"
		"body":"absint( ${1:\\$maybeint} )"
	"Attempts activation of plugin in a &quot;sandbox&quot; and redirects on success.":
		"prefix":"activate_plugin"
		"body":"activate_plugin( ${1:\\$plugin}${2:, \\$redirect = ''}${3:, \\$network_wide = false}${4:, \\$silent = false} )"
	"Activate multiple plugins.":
		"prefix":"activate_plugins"
		"body":"activate_plugins( ${1:\\$plugins}${2:, \\$redirect = ''}${3:, \\$network_wide = false}${4:, \\$silent = false} )"
	"Deprecated functionality for activating a network-only plugin.":
		"prefix":"activate_sitewide_plugin"
		"body":"activate_sitewide_plugin()"
	"Hooks a function on to a specific action.":
		"prefix":"add_action"
		"body":"add_action( ${1:\\$tag}${2:, \\$function_to_add}${3:, \\$priority = 10}${4:, \\$accepted_args = 1} )"
	"Add a new option for a given blog id.":
		"prefix":"add_blog_option"
		"body":"add_blog_option( ${1:\\$id}${2:, \\$option}${3:, \\$value} )"
	"Adds an index to a specified table.":
		"prefix":"add_clean_index"
		"body":"add_clean_index( ${1:\\$table}${2:, \\$index} )"
	"Add meta data field to a comment.":
		"prefix":"add_comment_meta"
		"body":"add_comment_meta( ${1:\\$comment_id}${2:, \\$meta_key}${3:, \\$meta_value}${4:, \\$unique = false} )"
	"Add submenu page to the Comments main menu.":
		"prefix":"add_comments_page"
		"body":"add_comments_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Add contextual help text for a page.":
		"prefix":"add_contextual_help"
		"body":"add_contextual_help( ${1:\\$screen}${2:, \\$help} )"
	"add_cssclass":
		"prefix":"add_cssclass"
		"body":"add_cssclass( ${1:\\$add}${2:, \\$class} )"
	"Add callbacks for background image display.":
		"prefix":"add_custom_background"
		"body":"add_custom_background( ${1:\\$wp_head_callback = ''}${2:, \\$admin_head_callback = ''}${3:, \\$admin_preview_callback = ''} )"
	"Add callbacks for image header display.":
		"prefix":"add_custom_image_header"
		"body":"add_custom_image_header( ${1:\\$wp_head_callback}${2:, \\$admin_head_callback}${3:, \\$admin_preview_callback = ''} )"
	"Add submenu page to the Dashboard main menu.":
		"prefix":"add_dashboard_page"
		"body":"add_dashboard_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Add callback for custom TinyMCE editor stylesheets.":
		"prefix":"add_editor_style"
		"body":"add_editor_style( ${1:\\$stylesheet = 'editor-style.css'} )"
	"Add a user to a blog based on details from maybe_add_existing_user_to_blog().":
		"prefix":"add_existing_user_to_blog"
		"body":"add_existing_user_to_blog( ${1:\\$details = false} )"
	"Add a new feed type like /atom1/.":
		"prefix":"add_feed"
		"body":"add_feed( ${1:\\$feedname}${2:, \\$function} )"
	"Hook a function or method to a specific filter action.":
		"prefix":"add_filter"
		"body":"add_filter( ${1:\\$tag}${2:, \\$function_to_add}${3:, \\$priority = 10}${4:, \\$accepted_args = 1} )"
	"Register a new image size.":
		"prefix":"add_image_size"
		"body":"add_image_size( ${1:\\$name}${2:, \\$width}${3:, \\$height}${4:, \\$crop = false} )"
	"Add a link to using values provided in $_POST.":
		"prefix":"add_link"
		"body":"add_link()"
	"Add submenu page to the Links main menu.":
		"prefix":"add_links_page"
		"body":"add_links_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Walks the array while sanitizing the contents.":
		"prefix":"add_magic_quotes"
		"body":"add_magic_quotes( ${1:\\$array} )"
	"Add submenu page to the Tools main menu.":
		"prefix":"add_management_page"
		"body":"add_management_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Add submenu page to the Media main menu.":
		"prefix":"add_media_page"
		"body":"add_media_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"add_menu_classes":
		"prefix":"add_menu_classes"
		"body":"add_menu_classes( ${1:\\$menu} )"
	"Add a top-level menu page.":
		"prefix":"add_menu_page"
		"body":"add_menu_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''}${6:, \\$icon_url = ''}${7:, \\$position = null} )"
	"Add post meta data defined in $_POST superglobal for post with given ID.":
		"prefix":"add_meta"
		"body":"add_meta( ${1:\\$post_ID} )"
	"Adds a meta box to one or more screens.":
		"prefix":"add_meta_box"
		"body":"add_meta_box( ${1:\\$id}${2:, \\$title}${3:, \\$callback}${4:, \\$screen = null}${5:, \\$context = 'advanced'}${6:, \\$priority = 'default'}${7:, \\$callback_args = null} )"
	"Add metadata for the specified object.":
		"prefix":"add_metadata"
		"body":"add_metadata( ${1:\\$meta_type}${2:, \\$object_id}${3:, \\$meta_key}${4:, \\$meta_value}${5:, \\$unique = false} )"
	"Add a new network option.":
		"prefix":"add_network_option"
		"body":"add_network_option( ${1:\\$network_id}${2:, \\$option}${3:, \\$value} )"
	"Adds a newly created user to the appropriate blog":
		"prefix":"add_new_user_to_blog"
		"body":"add_new_user_to_blog( ${1:\\$user_id}${2:, \\$password}${3:, \\$meta} )"
	"Add a top-level menu page in the 'objects' section.":
		"prefix":"add_object_page"
		"body":"add_object_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''}${6:, \\$icon_url = ''} )"
	"Add a new option.":
		"prefix":"add_option"
		"body":"add_option( ${1:\\$option}${2:, \\$value = ''}${3:, \\$deprecated = ''}${4:, \\$autoload = 'yes'} )"
	"Register a setting and its sanitization callback":
		"prefix":"add_option_update_handler"
		"body":"add_option_update_handler( ${1:\\$option_group}${2:, \\$option_name}${3:, \\$sanitize_callback = ''} )"
	"Adds an array of options to the options whitelist.":
		"prefix":"add_option_whitelist"
		"body":"add_option_whitelist( ${1:\\$new_options}${2:, \\$options = ''} )"
	"Add submenu page to the Settings main menu.":
		"prefix":"add_options_page"
		"body":"add_options_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Add submenu page to the Pages main menu.":
		"prefix":"add_pages_page"
		"body":"add_pages_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Add permalink structure.":
		"prefix":"add_permastruct"
		"body":"add_permastruct( ${1:\\$name}${2:, \\$struct}${3:, \\$args = array()} )"
	"Add a URL to those already pinged.":
		"prefix":"add_ping"
		"body":"add_ping( ${1:\\$post_id}${2:, \\$uri} )"
	"Add submenu page to the Plugins main menu.":
		"prefix":"add_plugins_page"
		"body":"add_plugins_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Add meta data field to a post.":
		"prefix":"add_post_meta"
		"body":"add_post_meta( ${1:\\$post_id}${2:, \\$meta_key}${3:, \\$meta_value}${4:, \\$unique = false} )"
	"Register support of certain features for a post type.":
		"prefix":"add_post_type_support"
		"body":"add_post_type_support( ${1:\\$post_type}${2:, \\$feature} )"
	"Add submenu page to the Posts main menu.":
		"prefix":"add_posts_page"
		"body":"add_posts_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Retrieves a modified URL query string.":
		"prefix":"add_query_arg"
		"body":"add_query_arg( ${1:\\$key}${2:, \\$value}${3:, \\$url} )"
	"Add an endpoint, like /trackback/.":
		"prefix":"add_rewrite_endpoint"
		"body":"add_rewrite_endpoint( ${1:\\$name}${2:, \\$places}${3:, \\$query_var = true} )"
	"Adds a rewrite rule that transforms a URL structure to a set of query vars.":
		"prefix":"add_rewrite_rule"
		"body":"add_rewrite_rule( ${1:\\$regex}${2:, \\$query}${3:, \\$after = 'bottom'} )"
	"Add a new rewrite tag (like %postname%).":
		"prefix":"add_rewrite_tag"
		"body":"add_rewrite_tag( ${1:\\$tag}${2:, \\$regex}${3:, \\$query = ''} )"
	"Add role, if it does not exist.":
		"prefix":"add_role"
		"body":"add_role( ${1:\\$role}${2:, \\$display_name}${3:, \\$capabilities = array()} )"
	"Register and configure an admin screen option":
		"prefix":"add_screen_option"
		"body":"add_screen_option( ${1:\\$option}${2:, \\$args = array()} )"
	"Register a settings error to be displayed to the user":
		"prefix":"add_settings_error"
		"body":"add_settings_error( ${1:\\$setting}${2:, \\$code}${3:, \\$message}${4:, \\$type = 'error'} )"
	"Add a new field to a section of a settings page":
		"prefix":"add_settings_field"
		"body":"add_settings_field( ${1:\\$id}${2:, \\$title}${3:, \\$callback}${4:, \\$page}${5:, \\$section = 'default'}${6:, \\$args = array()} )"
	"Add a new section to a settings page.":
		"prefix":"add_settings_section"
		"body":"add_settings_section( ${1:\\$id}${2:, \\$title}${3:, \\$callback}${4:, \\$page} )"
	"Add hook for shortcode tag.":
		"prefix":"add_shortcode"
		"body":"add_shortcode( ${1:\\$tag}${2:, \\$func} )"
	"Add a new option for the current network.":
		"prefix":"add_site_option"
		"body":"add_site_option( ${1:\\$option}${2:, \\$value} )"
	"Add a submenu page.":
		"prefix":"add_submenu_page"
		"body":"add_submenu_page( ${1:\\$parent_slug}${2:, \\$page_title}${3:, \\$menu_title}${4:, \\$capability}${5:, \\$menu_slug}${6:, \\$function = ''} )"
	"Adds metadata to a term.":
		"prefix":"add_term_meta"
		"body":"add_term_meta( ${1:\\$term_id}${2:, \\$meta_key}${3:, \\$meta_value}${4:, \\$unique = false} )"
	"Add submenu page to the Appearance main menu.":
		"prefix":"add_theme_page"
		"body":"add_theme_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Registers theme support for a given feature.":
		"prefix":"add_theme_support"
		"body":"add_theme_support( ${1:\\$feature}${2:, \\$args,...} )"
	"Enqueues the default ThickBox js and css.":
		"prefix":"add_thickbox"
		"body":"add_thickbox()"
	"Creates a new user from the &quot;Users&quot; form using $_POST information.":
		"prefix":"add_user"
		"body":"add_user()"
	"Add meta data field to a user.":
		"prefix":"add_user_meta"
		"body":"add_user_meta( ${1:\\$user_id}${2:, \\$meta_key}${3:, \\$meta_value}${4:, \\$unique = false} )"
	"Adds a user to a blog.":
		"prefix":"add_user_to_blog"
		"body":"add_user_to_blog( ${1:\\$blog_id}${2:, \\$user_id}${3:, \\$role} )"
	"Add submenu page to the Users/Profile main menu.":
		"prefix":"add_users_page"
		"body":"add_users_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''} )"
	"Add a top-level menu page in the 'utility' section.":
		"prefix":"add_utility_page"
		"body":"add_utility_page( ${1:\\$page_title}${2:, \\$menu_title}${3:, \\$capability}${4:, \\$menu_slug}${5:, \\$function = ''}${6:, \\$icon_url = ''} )"
	"Adds slashes to escape strings.":
		"prefix":"addslashes_gpc"
		"body":"addslashes_gpc( ${1:\\$gpc} )"
	"Displays next or previous image link that has the same post parent.":
		"prefix":"adjacent_image_link"
		"body":"adjacent_image_link( ${1:\\$prev = true}${2:, \\$size = 'thumbnail'}${3:, \\$text = false} )"
	"Displays the adjacent post link.":
		"prefix":"adjacent_post_link"
		"body":"adjacent_post_link( ${1:\\$format}${2:, \\$link}${3:, \\$in_same_term = false}${4:, \\$excluded_terms = ''}${5:, \\$previous = true}${6:, \\$taxonomy = 'category'} )"
	"Displays the relational links for the posts adjacent to the current post.":
		"prefix":"adjacent_posts_rel_link"
		"body":"adjacent_posts_rel_link( ${1:\\$title = '%title'}${2:, \\$in_same_term = false}${3:, \\$excluded_terms = ''}${4:, \\$taxonomy = 'category'} )"
	"Displays relational links for the posts adjacent to the current post for single post pages.":
		"prefix":"adjacent_posts_rel_link_wp_head"
		"body":"adjacent_posts_rel_link_wp_head()"
	"Display the default admin color scheme picker (Used in user-edit.php)":
		"prefix":"admin_color_scheme_picker"
		"body":"admin_color_scheme_picker( ${1:\\$user_id} )"
	"admin_created_user_email":
		"prefix":"admin_created_user_email"
		"body":"admin_created_user_email( ${1:\\$text} )"
	"Retrieves the URL to the admin area for the current site.":
		"prefix":"admin_url"
		"body":"admin_url( ${1:\\$path = ''}${2:, \\$scheme = 'admin'} )"
	"Allow subdirectory install.":
		"prefix":"allow_subdirectory_install"
		"body":"allow_subdirectory_install()"
	"Allow subdomain install":
		"prefix":"allow_subdomain_install"
		"body":"allow_subdomain_install()"
	"Whitelists allowed redirect hosts for safe HTTP requests as well.":
		"prefix":"allowed_http_request_hosts"
		"body":"allowed_http_request_hosts( ${1:\\$is_external}${2:, \\$host} )"
	"Display all of the allowed tags in HTML format with attributes.":
		"prefix":"allowed_tags"
		"body":"allowed_tags()"
	"Converts email addresses characters to HTML entities to block spam bots.":
		"prefix":"antispambot"
		"body":"antispambot( ${1:\\$email_address}${2:, \\$hex_encoding} )"
	"Does the specified module exist in the Apache config?":
		"prefix":"apache_mod_loaded"
		"body":"apache_mod_loaded( ${1:\\$mod}${2:, \\$default = false} )"
	"Call the functions added to a filter hook.":
		"prefix":"apply_filters"
		"body":"apply_filters( ${1:\\$tag}${2:, \\$value}${3:, \\$var,...} )"
	"Fires functions attached to a deprecated filter hook.":
		"prefix":"apply_filters_deprecated"
		"body":"apply_filters_deprecated( ${1:\\$tag}${2:, \\$args}${3:, \\$version}${4:, \\$replacement = false}${5:, \\$message = null} )"
	"Execute functions hooked on a specific filter hook, specifying arguments in an array.":
		"prefix":"apply_filters_ref_array"
		"body":"apply_filters_ref_array( ${1:\\$tag}${2:, \\$args} )"
	"PHP-agnostic version of {@link array_replace_recursive()}.":
		"prefix":"array_replace_recursive"
		"body":"array_replace_recursive( ${1:\\$base = array()}${2:, \\$replacements = array()} )"
	"Display the atom enclosure for the current post.":
		"prefix":"atom_enclosure"
		"body":"atom_enclosure()"
	"Displays Site Icon in atom feeds.":
		"prefix":"atom_site_icon"
		"body":"atom_site_icon()"
	"Display fields for ID3 data":
		"prefix":"attachment_id3_data_meta_box"
		"body":"attachment_id3_data_meta_box( ${1:\\$post} )"
	"Display attachment submit form fields.":
		"prefix":"attachment_submit_meta_box"
		"body":"attachment_submit_meta_box( ${1:\\$post} )"
	"Displays non-editable attachment metadata in the publish meta box.":
		"prefix":"attachment_submitbox_metadata"
		"body":"attachment_submitbox_metadata()"
	"Tries to convert an attachment URL into a post ID.":
		"prefix":"attachment_url_to_postid"
		"body":"attachment_url_to_postid( ${1:\\$url} )"
	"Escaping for HTML attributes":
		"prefix":"attribute_escape"
		"body":"attribute_escape( ${1:\\$text} )"
	"Checks if a user is logged in, if not it redirects them to the login page.":
		"prefix":"auth_redirect"
		"body":"auth_redirect()"
	"Whether author of supplied post has capability or role.":
		"prefix":"author_can"
		"body":"author_can( ${1:\\$post}${2:, \\$capability} )"
	"Enable/disable automatic general feed link outputting.":
		"prefix":"automatic_feed_links"
		"body":"automatic_feed_links( ${1:\\$add = true} )"
	"Avoids a collision between a site slug and a permalink slug.":
		"prefix":"avoid_blog_page_permalink_collision"
		"body":"avoid_blog_page_permalink_collision( ${1:\\$data}${2:, \\$postarr} )"
	"Display background color value.":
		"prefix":"background_color"
		"body":"background_color()"
	"Display background image path.":
		"prefix":"background_image"
		"body":"background_image()"
	"Adds backslashes before letters and before a number at the start of a string.":
		"prefix":"backslashit"
		"body":"backslashit( ${1:\\$string} )"
	"Balances tags if forced to, or if the 'use_balanceTags' option is set to true.":
		"prefix":"balancetags"
		"body":"balancetags( ${1:\\$text}${2:, \\$force = false} )"
	"Remove last item on a pipe-delimited string.":
		"prefix":"before_last_bar"
		"body":"before_last_bar( ${1:\\$string} )"
	"Displays information about the current site.":
		"prefix":"bloginfo"
		"body":"bloginfo( ${1:\\$show = ''} )"
	"Display RSS container for the bloginfo function.":
		"prefix":"bloginfo_rss"
		"body":"bloginfo_rss( ${1:\\$show = ''} )"
	"Display the classes for the body element.":
		"prefix":"body_class"
		"body":"body_class( ${1:\\$class = ''} )"
	"Whether input is yes or no.":
		"prefix":"bool_from_yn"
		"body":"bool_from_yn( ${1:\\$yn} )"
	"Build URL query based on an associative and, or indexed array.":
		"prefix":"build_query"
		"body":"build_query( ${1:\\$data} )"
	"Process the post data for the bulk editing of posts.":
		"prefix":"bulk_edit_posts"
		"body":"bulk_edit_posts( ${1:\\$post_data = null} )"
	"Set the headers for caching for 10 days with JavaScript content type.":
		"prefix":"cache_javascript_headers"
		"body":"cache_javascript_headers()"
	"Retrieve info for user lists to prevent multiple queries by get_userdata()":
		"prefix":"cache_users"
		"body":"cache_users( ${1:\\$user_ids} )"
	"Get number of days since the start of the week.":
		"prefix":"calendar_week_mod"
		"body":"calendar_week_mod( ${1:\\$num} )"
	"Whether or not we can edit this network from this page.":
		"prefix":"can_edit_network"
		"body":"can_edit_network( ${1:\\$site_id} )"
	"Display HTML content for cancel comment reply link.":
		"prefix":"cancel_comment_reply_link"
		"body":"cancel_comment_reply_link( ${1:\\$text = ''} )"
	"Forever eliminate &quot;Wordpress&quot; from the planet (or at least the little bit we can influence).":
		"prefix":"capital_p_dangit"
		"body":"capital_p_dangit( ${1:\\$text} )"
	"Check if a category is an ancestor of another category.":
		"prefix":"cat_is_ancestor_of"
		"body":"cat_is_ancestor_of( ${1:\\$cat1}${2:, \\$cat2} )"
	"Retrieve category description.":
		"prefix":"category_description"
		"body":"category_description( ${1:\\$category} )"
	"Check whether a category exists.":
		"prefix":"category_exists"
		"body":"category_exists( ${1:\\$cat_name}${2:, \\$parent = null} )"
	"Makes sure that a user was referred from another admin page.":
		"prefix":"check_admin_referer"
		"body":"check_admin_referer( ${1:\\$action = -1}${2:, \\$query_arg = '_wpnonce'} )"
	"Verifies the Ajax request to prevent processing requests external of the blog.":
		"prefix":"check_ajax_referer"
		"body":"check_ajax_referer( ${1:\\$action = -1}${2:, \\$query_arg = false}${3:, \\$die = true} )"
	"Publish future post and make sure post ID has future post status.":
		"prefix":"check_and_publish_future_post"
		"body":"check_and_publish_future_post( ${1:\\$post_id} )"
	"Check column matches criteria.":
		"prefix":"check_column"
		"body":"check_column( ${1:\\$table_name}${2:, \\$col_name}${3:, \\$col_type}${4:, \\$is_null = null}${5:, \\$key = null}${6:, \\$default = null}${7:, \\$extra = null} )"
	"Check whether a comment passes internal checks to be allowed to add.":
		"prefix":"check_comment"
		"body":"check_comment( ${1:\\$author}${2:, \\$email}${3:, \\$url}${4:, \\$comment}${5:, \\$user_ip}${6:, \\$user_agent}${7:, \\$comment_type} )"
	"Hooks WP's native database-based comment-flood check.":
		"prefix":"check_comment_flood_db"
		"body":"check_comment_flood_db()"
	"Checks if the current user has permissions to import new users.":
		"prefix":"check_import_new_users"
		"body":"check_import_new_users( ${1:\\$permission} )"
	"Retrieves a user row based on password reset key and login":
		"prefix":"check_password_reset_key"
		"body":"check_password_reset_key( ${1:\\$key}${2:, \\$login} )"
	"Checks if a theme has been changed and runs 'after_switch_theme' hook on the next WP load.":
		"prefix":"check_theme_switched"
		"body":"check_theme_switched()"
	"Check an array of MIME types against a whitelist.":
		"prefix":"check_upload_mimes"
		"body":"check_upload_mimes( ${1:\\$mimes} )"
	"Determine if uploaded file exceeds space quota.":
		"prefix":"check_upload_size"
		"body":"check_upload_size( ${1:\\$file} )"
	"Outputs the html checked attribute.":
		"prefix":"checked"
		"body":"checked( ${1:\\$checked}${2:, \\$current = true}${3:, \\$echo = true} )"
	"Handles the display of choosing a user's primary site.":
		"prefix":"choose_primary_blog"
		"body":"choose_primary_blog()"
	"Will clean the attachment in the cache.":
		"prefix":"clean_attachment_cache"
		"body":"clean_attachment_cache( ${1:\\$id}${2:, \\$clean_terms = false} )"
	"Clean the blog cache":
		"prefix":"clean_blog_cache"
		"body":"clean_blog_cache( ${1:\\$blog} )"
	"Deletes the bookmark cache.":
		"prefix":"clean_bookmark_cache"
		"body":"clean_bookmark_cache( ${1:\\$bookmark_id} )"
	"Remove the category cache data based on ID.":
		"prefix":"clean_category_cache"
		"body":"clean_category_cache( ${1:\\$id} )"
	"Removes a comment from the object cache.":
		"prefix":"clean_comment_cache"
		"body":"clean_comment_cache( ${1:\\$ids} )"
	"Removes a network from the object cache.":
		"prefix":"clean_network_cache"
		"body":"clean_network_cache( ${1:\\$ids} )"
	"Removes the taxonomy relationship to terms from the cache.":
		"prefix":"clean_object_term_cache"
		"body":"clean_object_term_cache( ${1:\\$object_ids}${2:, \\$object_type} )"
	"Will clean the page in the cache.":
		"prefix":"clean_page_cache"
		"body":"clean_page_cache( ${1:\\$id} )"
	"Will clean the post in the cache.":
		"prefix":"clean_post_cache"
		"body":"clean_post_cache( ${1:\\$post} )"
	"Accepts matches array from preg_replace_callback in wpautop() or a string.":
		"prefix":"clean_pre"
		"body":"clean_pre( ${1:\\$matches} )"
	"Cleans the site details cache for a site.":
		"prefix":"clean_site_details_cache"
		"body":"clean_site_details_cache( ${1:\\$site_id} )"
	"Clean the caches for a taxonomy.":
		"prefix":"clean_taxonomy_cache"
		"body":"clean_taxonomy_cache( ${1:\\$taxonomy} )"
	"Will remove all of the term ids from the cache.":
		"prefix":"clean_term_cache"
		"body":"clean_term_cache( ${1:\\$ids}${2:, \\$taxonomy = ''}${3:, \\$clean_taxonomy = true} )"
	"Checks and cleans a URLr":
		"prefix":"clean_url"
		"body":"clean_url( ${1:\\$url}${2:, \\$protocols = null}${3:, \\$context = 'display'} )"
	"Clean all user caches":
		"prefix":"clean_user_cache"
		"body":"clean_user_cache( ${1:\\$user} )"
	"Deprecated functionality to clear the global post cache.":
		"prefix":"clear_global_post_cache"
		"body":"clear_global_post_cache( ${1:\\$post_id} )"
	"Adds JavaScript required to make CodePress work on the theme/plugin editors.":
		"prefix":"codepress_footer_js"
		"body":"codepress_footer_js()"
	"Determines the language to use for CodePress syntax highlighting.":
		"prefix":"codepress_get_lang"
		"body":"codepress_get_lang( ${1:\\$filename} )"
	"Displays the author of the current comment.":
		"prefix":"comment_author"
		"body":"comment_author( ${1:\\$comment_ID} )"
	"Display the email of the author of the current global $comment.":
		"prefix":"comment_author_email"
		"body":"comment_author_email( ${1:\\$comment_ID} )"
	"Display the html email link to the author of the current comment.":
		"prefix":"comment_author_email_link"
		"body":"comment_author_email_link( ${1:\\$linktext = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$comment = null} )"
	"Display the IP address of the author of the current comment.":
		"prefix":"comment_author_ip"
		"body":"comment_author_ip( ${1:\\$comment_ID} )"
	"Display the html link to the url of the author of the current comment.":
		"prefix":"comment_author_link"
		"body":"comment_author_link( ${1:\\$comment_ID} )"
	"Display the current comment author in the feed.":
		"prefix":"comment_author_rss"
		"body":"comment_author_rss()"
	"Display the url of the author of the current comment.":
		"prefix":"comment_author_url"
		"body":"comment_author_url( ${1:\\$comment_ID} )"
	"Displays the HTML link of the url of the author of the current comment.":
		"prefix":"comment_author_url_link"
		"body":"comment_author_url_link( ${1:\\$linktext = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$comment} )"
	"Generates semantic classes for each comment element.":
		"prefix":"comment_class"
		"body":"comment_class( ${1:\\$class = ''}${2:, \\$comment = null}${3:, \\$post_id = null}${4:, \\$echo = true} )"
	"Display the comment date of the current comment.":
		"prefix":"comment_date"
		"body":"comment_date( ${1:\\$d = ''}${2:, \\$comment_ID} )"
	"Display the excerpt of the current comment.":
		"prefix":"comment_excerpt"
		"body":"comment_excerpt( ${1:\\$comment_ID} )"
	"Determine if a comment exists based on author and date.":
		"prefix":"comment_exists"
		"body":"comment_exists( ${1:\\$comment_author}${2:, \\$comment_date}${3:, \\$timezone = 'blog'} )"
	"Display error message at bottom of comments.":
		"prefix":"comment_footer_die"
		"body":"comment_footer_die( ${1:\\$msg} )"
	"Outputs a complete commenting form for use within a template.":
		"prefix":"comment_form"
		"body":"comment_form( ${1:\\$args = array()}${2:, \\$post_id = null} )"
	"Display text based on comment reply status.":
		"prefix":"comment_form_title"
		"body":"comment_form_title( ${1:\\$noreplytext = false}${2:, \\$replytext = false}${3:, \\$linktoparent = true} )"
	"Display the feed GUID for the current comment.":
		"prefix":"comment_guid"
		"body":"comment_guid( ${1:\\$comment_id = null} )"
	"Display the comment id of the current comment.":
		"prefix":"comment_id"
		"body":"comment_id()"
	"Output hidden input HTML for replying to comments.":
		"prefix":"comment_id_fields"
		"body":"comment_id_fields( ${1:\\$id} )"
	"Display the link to the comments.":
		"prefix":"comment_link"
		"body":"comment_link( ${1:\\$comment = null} )"
	"Displays the HTML content for reply to comment link.":
		"prefix":"comment_reply_link"
		"body":"comment_reply_link( ${1:\\$args = array()}${2:, \\$comment = null}${3:, \\$post = null} )"
	"Display the text of the current comment.":
		"prefix":"comment_text"
		"body":"comment_text( ${1:\\$comment_ID}${2:, \\$args = array()} )"
	"Display the current comment content for use in the feeds.":
		"prefix":"comment_text_rss"
		"body":"comment_text_rss()"
	"Display the comment time of the current comment.":
		"prefix":"comment_time"
		"body":"comment_time( ${1:\\$d = ''} )"
	"Display the comment type of the current comment.":
		"prefix":"comment_type"
		"body":"comment_type( ${1:\\$commenttxt = false}${2:, \\$trackbacktxt = false}${3:, \\$pingbacktxt = false} )"
	"Display the link to the current post comments.":
		"prefix":"comments_link"
		"body":"comments_link( ${1:\\$deprecated = ''}${2:, \\$deprecated_2 = ''} )"
	"Outputs the link to the comments for the current post in an xml safe way":
		"prefix":"comments_link_feed"
		"body":"comments_link_feed()"
	"Display the language string for the number of comments the current post has.":
		"prefix":"comments_number"
		"body":"comments_number( ${1:\\$zero = false}${2:, \\$one = false}${3:, \\$more = false}${4:, \\$deprecated = ''} )"
	"Whether the current post is open for comments.":
		"prefix":"comments_open"
		"body":"comments_open( ${1:\\$post_id = null} )"
	"Displays the link to the comments for the current post ID.":
		"prefix":"comments_popup_link"
		"body":"comments_popup_link( ${1:\\$zero = false}${2:, \\$one = false}${3:, \\$more = false}${4:, \\$css_class = ''}${5:, \\$none = false} )"
	"Display the JS popup script to show a comment.":
		"prefix":"comments_popup_script"
		"body":"comments_popup_script()"
	"Return link to the post RSS feed.":
		"prefix":"comments_rss"
		"body":"comments_rss()"
	"Print RSS comment feed link.":
		"prefix":"comments_rss_link"
		"body":"comments_rss_link( ${1:\\$link_text = 'Comments RSS'} )"
	"Load the comment template specified in $file.":
		"prefix":"comments_template"
		"body":"comments_template( ${1:\\$file = '/comments.php'}${2:, \\$separate_comments = false} )"
	"Test support for compressing JavaScript from PHP":
		"prefix":"compression_test"
		"body":"compression_test()"
	"Confirm a new site signup.":
		"prefix":"confirm_another_blog_signup"
		"body":"confirm_another_blog_signup( ${1:\\$domain}${2:, \\$path}${3:, \\$blog_title}${4:, \\$user_name}${5:, \\$user_email = ''}${6:, \\$meta = array()}${7:, \\$blog_id} )"
	"New site signup confirmation":
		"prefix":"confirm_blog_signup"
		"body":"confirm_blog_signup( ${1:\\$domain}${2:, \\$path}${3:, \\$blog_title}${4:, \\$user_name = ''}${5:, \\$user_email = ''}${6:, \\$meta = array()} )"
	"confirm_delete_users":
		"prefix":"confirm_delete_users"
		"body":"confirm_delete_users( ${1:\\$users} )"
	"New user signup confirmation":
		"prefix":"confirm_user_signup"
		"body":"confirm_user_signup( ${1:\\$user_name}${2:, \\$user_email} )"
	"Retrieves the URL to the content directory.":
		"prefix":"content_url"
		"body":"content_url( ${1:\\$path = ''} )"
	"Converts lone &amp; characters into `&amp;#038;` (a.k.a. `&amp;amp;`)":
		"prefix":"convert_chars"
		"body":"convert_chars( ${1:\\$content}${2:, \\$deprecated = ''} )"
	"Converts invalid Unicode references range to valid range.":
		"prefix":"convert_invalid_entities"
		"body":"convert_invalid_entities( ${1:\\$content} )"
	"Convert text equivalent of smilies to images.":
		"prefix":"convert_smilies"
		"body":"convert_smilies( ${1:\\$text} )"
	"Convert a screen string to a screen object":
		"prefix":"convert_to_screen"
		"body":"convert_to_screen( ${1:\\$hook_name} )"
	"Copies a directory from one location to another via the WordPress Filesystem Abstraction.":
		"prefix":"copy_dir"
		"body":"copy_dir( ${1:\\$from}${2:, \\$to}${3:, \\$skip_list = array()} )"
	"core_update_footer":
		"prefix":"core_update_footer"
		"body":"core_update_footer( ${1:\\$msg = ''} )"
	"Display upgrade WordPress for downloading latest or upgrading automatically form.":
		"prefix":"core_upgrade_preamble"
		"body":"core_upgrade_preamble()"
	"Number of posts written by a list of users.":
		"prefix":"count_many_users_posts"
		"body":"count_many_users_posts( ${1:\\$users}${2:, \\$post_type = 'post'}${3:, \\$public_only = false} )"
	"Number of posts user has written.":
		"prefix":"count_user_posts"
		"body":"count_user_posts( ${1:\\$userid}${2:, \\$post_type = 'post'}${3:, \\$public_only = false} )"
	"Count number of users who have each of the user roles.":
		"prefix":"count_users"
		"body":"count_users( ${1:\\$strategy = 'time'} )"
	"Create an empty blog.":
		"prefix":"create_empty_blog"
		"body":"create_empty_blog( ${1:\\$domain}${2:, \\$path}${3:, \\$weblog_title}${4:, \\$site_id = 1} )"
	"Creates the initial post types when 'init' action is fired.":
		"prefix":"create_initial_post_types"
		"body":"create_initial_post_types()"
	"Registers default REST API routes.":
		"prefix":"create_initial_rest_routes"
		"body":"create_initial_rest_routes()"
	"Creates the initial taxonomies.":
		"prefix":"create_initial_taxonomies"
		"body":"create_initial_taxonomies()"
	"An alias of wp_create_user().":
		"prefix":"create_user"
		"body":"create_user( ${1:\\$username}${2:, \\$password}${3:, \\$email} )"
	"Retrieve the name of the current action.":
		"prefix":"current_action"
		"body":"current_action()"
	"Retrieve the name of the current filter or action.":
		"prefix":"current_filter"
		"body":"current_filter()"
	"Retrieves information on the current active theme.":
		"prefix":"current_theme_info"
		"body":"current_theme_info()"
	"Checks a theme's support for a given feature":
		"prefix":"current_theme_supports"
		"body":"current_theme_supports( ${1:\\$feature} )"
	"Retrieve the current time based on specified type.":
		"prefix":"current_time"
		"body":"current_time( ${1:\\$type}${2:, \\$gmt} )"
	"Whether the current user has a specific capability.":
		"prefix":"current_user_can"
		"body":"current_user_can( ${1:\\$capability}${2:, \\$object_id} )"
	"Whether current user has a capability or role for a given site.":
		"prefix":"current_user_can_for_blog"
		"body":"current_user_can_for_blog( ${1:\\$blog_id}${2:, \\$capability} )"
	"Print JS templates for the theme-browsing UI in the Customizer.":
		"prefix":"customize_themes_print_templates"
		"body":"customize_themes_print_templates()"
	"dashboard_browser_nag_class":
		"prefix":"dashboard_browser_nag_class"
		"body":"dashboard_browser_nag_class( ${1:\\$classes} )"
	"Retrieve the date in localized format, based on timestamp.":
		"prefix":"date_i18n"
		"body":"date_i18n( ${1:\\$dateformatstring}${2:, \\$unixtimestamp = false}${3:, \\$gmt = false} )"
	"Modifies the database based on specified SQL statements.":
		"prefix":"dbdelta"
		"body":"dbdelta( ${1:\\$queries = ''}${2:, \\$execute = true} )"
	"Deactivate a single plugin or multiple plugins.":
		"prefix":"deactivate_plugins"
		"body":"deactivate_plugins( ${1:\\$plugins}${2:, \\$silent = false}${3:, \\$network_wide = null} )"
	"Deprecated functionality for deactivating a network-only plugin.":
		"prefix":"deactivate_sitewide_plugin"
		"body":"deactivate_sitewide_plugin()"
	"Load custom DB error or display WordPress DB error.":
		"prefix":"dead_db"
		"body":"dead_db()"
	"Close the debugging file handle.":
		"prefix":"debug_fclose"
		"body":"debug_fclose( ${1:\\$fp} )"
	"Open the file handle for debugging.":
		"prefix":"debug_fopen"
		"body":"debug_fopen( ${1:\\$filename}${2:, \\$mode} )"
	"Write contents to the file used for debugging.":
		"prefix":"debug_fwrite"
		"body":"debug_fwrite( ${1:\\$fp}${2:, \\$string} )"
	"default_password_nag":
		"prefix":"default_password_nag"
		"body":"default_password_nag()"
	"default_password_nag_edit_user":
		"prefix":"default_password_nag_edit_user"
		"body":"default_password_nag_edit_user( ${1:\\$user_ID}${2:, \\$old_data} )"
	"default_password_nag_handler":
		"prefix":"default_password_nag_handler"
		"body":"default_password_nag_handler( ${1:\\$errors = false} )"
	"Default topic count scaling for tag links.":
		"prefix":"default_topic_count_scale"
		"body":"default_topic_count_scale( ${1:\\$count} )"
	"Old callback for tag link tooltips.":
		"prefix":"default_topic_count_text"
		"body":"default_topic_count_text( ${1:\\$count} )"
	"Delete the user settings of the current user.":
		"prefix":"delete_all_user_settings"
		"body":"delete_all_user_settings()"
	"Removes option by name for a given blog id. Prevents removal of protected WordPress options.":
		"prefix":"delete_blog_option"
		"body":"delete_blog_option( ${1:\\$id}${2:, \\$option} )"
	"Remove metadata matching criteria from a comment.":
		"prefix":"delete_comment_meta"
		"body":"delete_comment_meta( ${1:\\$comment_id}${2:, \\$meta_key}${3:, \\$meta_value = ''} )"
	"Purge the cached results of get_calendar.":
		"prefix":"delete_get_calendar_cache"
		"body":"delete_get_calendar_cache()"
	"Delete post meta data by meta ID.":
		"prefix":"delete_meta"
		"body":"delete_meta( ${1:\\$mid} )"
	"Delete metadata for the specified object.":
		"prefix":"delete_metadata"
		"body":"delete_metadata( ${1:\\$meta_type}${2:, \\$object_id}${3:, \\$meta_key}${4:, \\$meta_value = ''}${5:, \\$delete_all = false} )"
	"Delete meta data by meta ID":
		"prefix":"delete_metadata_by_mid"
		"body":"delete_metadata_by_mid( ${1:\\$meta_type}${2:, \\$meta_id} )"
	"Removes a network option by name.":
		"prefix":"delete_network_option"
		"body":"delete_network_option( ${1:\\$network_id}${2:, \\$option} )"
	"Removes option by name. Prevents removal of protected WordPress options.":
		"prefix":"delete_option"
		"body":"delete_option( ${1:\\$option} )"
	"Remove directory and files of a plugin for a list of plugins.":
		"prefix":"delete_plugins"
		"body":"delete_plugins( ${1:\\$plugins}${2:, \\$deprecated = ''} )"
	"Remove metadata matching criteria from a post.":
		"prefix":"delete_post_meta"
		"body":"delete_post_meta( ${1:\\$post_id}${2:, \\$meta_key}${3:, \\$meta_value = ''} )"
	"Delete everything from post meta matching meta key.":
		"prefix":"delete_post_meta_by_key"
		"body":"delete_post_meta_by_key( ${1:\\$post_meta_key} )"
	"Remove a post thumbnail.":
		"prefix":"delete_post_thumbnail"
		"body":"delete_post_thumbnail( ${1:\\$post} )"
	"Removes a option by name for the current network.":
		"prefix":"delete_site_option"
		"body":"delete_site_option( ${1:\\$option} )"
	"Delete a site transient.":
		"prefix":"delete_site_transient"
		"body":"delete_site_transient( ${1:\\$transient} )"
	"Removes metadata matching criteria from a term.":
		"prefix":"delete_term_meta"
		"body":"delete_term_meta( ${1:\\$term_id}${2:, \\$meta_key}${3:, \\$meta_value = ''} )"
	"Remove a theme":
		"prefix":"delete_theme"
		"body":"delete_theme( ${1:\\$stylesheet}${2:, \\$redirect = ''} )"
	"Delete a transient.":
		"prefix":"delete_transient"
		"body":"delete_transient( ${1:\\$transient} )"
	"Remove metadata matching criteria from a user.":
		"prefix":"delete_user_meta"
		"body":"delete_user_meta( ${1:\\$user_id}${2:, \\$meta_key}${3:, \\$meta_value = ''} )"
	"Delete user option with global blog capability.":
		"prefix":"delete_user_option"
		"body":"delete_user_option( ${1:\\$user_id}${2:, \\$option_name}${3:, \\$global = false} )"
	"Delete user interface settings.":
		"prefix":"delete_user_setting"
		"body":"delete_user_setting( ${1:\\$names} )"
	"Remove user meta data.":
		"prefix":"delete_usermeta"
		"body":"delete_usermeta( ${1:\\$user_id}${2:, \\$meta_key}${3:, \\$meta_value = ''} )"
	"delete_users_add_js":
		"prefix":"delete_users_add_js"
		"body":"delete_users_add_js()"
	"Filters for content to remove unnecessary slashes.":
		"prefix":"deslash"
		"body":"deslash( ${1:\\$content} )"
	"Retrieve the number of times an action is fired.":
		"prefix":"did_action"
		"body":"did_action( ${1:\\$tag} )"
	"Outputs the html disabled attribute.":
		"prefix":"disabled"
		"body":"disabled( ${1:\\$disabled}${2:, \\$current = true}${3:, \\$echo = true} )"
	"Finds a pingback server URI based on the given URL.":
		"prefix":"discover_pingback_server_uri"
		"body":"discover_pingback_server_uri( ${1:\\$url}${2:, \\$deprecated = ''} )"
	"dismiss_core_update":
		"prefix":"dismiss_core_update"
		"body":"dismiss_core_update( ${1:\\$update} )"
	"dismissed_updates":
		"prefix":"dismissed_updates"
		"body":"dismissed_updates()"
	"Display install header.":
		"prefix":"display_header"
		"body":"display_header( ${1:\\$body_classes = ''} )"
	"Whether to display the header text.":
		"prefix":"display_header_text"
		"body":"display_header_text()"
	"Display plugin content based on plugin list.":
		"prefix":"display_plugins_table"
		"body":"display_plugins_table()"
	"Display installer setup form.":
		"prefix":"display_setup_form"
		"body":"display_setup_form( ${1:\\$error = null} )"
	"Displays the amount of disk space used by the current site. Not used in core.":
		"prefix":"display_space_usage"
		"body":"display_space_usage()"
	"Prints a theme on the Install Themes pages.":
		"prefix":"display_theme"
		"body":"display_theme( ${1:\\$theme} )"
	"Display theme content based on theme list.":
		"prefix":"display_themes"
		"body":"display_themes()"
	"Meta Box Accordion Template Function":
		"prefix":"do_accordion_sections"
		"body":"do_accordion_sections( ${1:\\$screen}${2:, \\$context}${3:, \\$object} )"
	"Execute functions hooked on a specific action hook.":
		"prefix":"do_action"
		"body":"do_action( ${1:\\$tag}${2:, \\$arg,... = ''} )"
	"Fires functions attached to a deprecated action hook.":
		"prefix":"do_action_deprecated"
		"body":"do_action_deprecated( ${1:\\$tag}${2:, \\$args}${3:, \\$version}${4:, \\$replacement = false}${5:, \\$message = null} )"
	"Execute functions hooked on a specific action hook, specifying arguments in an array.":
		"prefix":"do_action_ref_array"
		"body":"do_action_ref_array( ${1:\\$tag}${2:, \\$args} )"
	"Adds an action hook specific to this page.":
		"prefix":"do_activate_header"
		"body":"do_activate_header()"
	"Perform all pingbacks, enclosures, trackbacks, and send to pingback services.":
		"prefix":"do_all_pings"
		"body":"do_all_pings()"
	"Upgrade WordPress core display.":
		"prefix":"do_core_upgrade"
		"body":"do_core_upgrade( ${1:\\$reinstall = false} )"
	"do_dismiss_core_update":
		"prefix":"do_dismiss_core_update"
		"body":"do_dismiss_core_update()"
	"Check content for video and audio links to add as enclosures.":
		"prefix":"do_enclose"
		"body":"do_enclose( ${1:\\$content}${2:, \\$post_ID} )"
	"Load the feed template from the use of an action hook.":
		"prefix":"do_feed"
		"body":"do_feed()"
	"Load either Atom comment feed or Atom posts feed.":
		"prefix":"do_feed_atom"
		"body":"do_feed_atom( ${1:\\$for_comments} )"
	"Load the RDF RSS 0.91 Feed template.":
		"prefix":"do_feed_rdf"
		"body":"do_feed_rdf()"
	"Load the RSS 1.0 Feed Template.":
		"prefix":"do_feed_rss"
		"body":"do_feed_rss()"
	"Load either the RSS2 comment feed or the RSS2 posts feed.":
		"prefix":"do_feed_rss2"
		"body":"do_feed_rss2( ${1:\\$for_comments} )"
	"Meta-Box template function":
		"prefix":"do_meta_boxes"
		"body":"do_meta_boxes( ${1:\\$screen}${2:, \\$context}${3:, \\$object} )"
	"Display the robots.txt file content.":
		"prefix":"do_robots"
		"body":"do_robots()"
	"Print out the settings fields for a particular settings section":
		"prefix":"do_settings_fields"
		"body":"do_settings_fields( ${1:\\$page}${2:, \\$section} )"
	"Prints out all settings sections added to a particular settings page":
		"prefix":"do_settings_sections"
		"body":"do_settings_sections( ${1:\\$page} )"
	"Search content for shortcodes and filter shortcodes through their hooks.":
		"prefix":"do_shortcode"
		"body":"do_shortcode( ${1:\\$content}${2:, \\$ignore_html = false} )"
	"Regular Expression callable for do_shortcode() for calling shortcode hook.":
		"prefix":"do_shortcode_tag"
		"body":"do_shortcode_tag( ${1:\\$m} )"
	"Search only inside HTML elements for shortcodes and process them.":
		"prefix":"do_shortcodes_in_html_tags"
		"body":"do_shortcodes_in_html_tags( ${1:\\$content}${2:, \\$ignore_html}${3:, \\$tagnames} )"
	"Prints signup_header via wp_head":
		"prefix":"do_signup_header"
		"body":"do_signup_header()"
	"Perform trackbacks.":
		"prefix":"do_trackbacks"
		"body":"do_trackbacks( ${1:\\$post_id} )"
	"do_undismiss_core_update":
		"prefix":"do_undismiss_core_update"
		"body":"do_undismiss_core_update()"
	"Unused Admin function.":
		"prefix":"documentation_link"
		"body":"documentation_link()"
	"Retrieve the name of an action currently being processed.":
		"prefix":"doing_action"
		"body":"doing_action( ${1:\\$action = null} )"
	"Retrieve the name of a filter currently being processed.":
		"prefix":"doing_filter"
		"body":"doing_filter( ${1:\\$filter = null} )"
	"Check whether a blogname is already taken.":
		"prefix":"domain_exists"
		"body":"domain_exists( ${1:\\$domain}${2:, \\$path}${3:, \\$site_id = 1} )"
	"Downloads a URL to a local temporary file using the WordPress HTTP Class.":
		"prefix":"download_url"
		"body":"download_url( ${1:\\$url}${2:, \\$timeout = 300} )"
	"Drops a specified index from a table.":
		"prefix":"drop_index"
		"body":"drop_index( ${1:\\$table}${2:, \\$index} )"
	"Legacy function used to generate the categories checklist control.":
		"prefix":"dropdown_categories"
		"body":"dropdown_categories( ${1:\\$default}${2:, \\$parent}${3:, \\$popular_ids = array()} )"
	"Deprecated method for generating a drop-down of categories.":
		"prefix":"dropdown_cats"
		"body":"dropdown_cats( ${1:\\$optionall = 1}${2:, \\$all = 'All'}${3:, \\$orderby = 'ID'}${4:, \\$order = 'asc'}${5:, \\$show_last_update}${6:, \\$show_count}${7:, \\$hide_empty = 1}${8:, \\$optionnone = false}${9:, \\$selected}${10:, \\$exclude} )"
	"Legacy function used to generate a link categories checklist control.":
		"prefix":"dropdown_link_categories"
		"body":"dropdown_link_categories( ${1:\\$default} )"
	"Display dynamic sidebar.":
		"prefix":"dynamic_sidebar"
		"body":"dynamic_sidebar( ${1:\\$index = 1} )"
	"Displays the edit bookmark link anchor content.":
		"prefix":"edit_bookmark_link"
		"body":"edit_bookmark_link( ${1:\\$link = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$bookmark = null} )"
	"Update a comment with values provided in $_POST.":
		"prefix":"edit_comment"
		"body":"edit_comment()"
	"Displays the edit comment link with formatting.":
		"prefix":"edit_comment_link"
		"body":"edit_comment_link( ${1:\\$text = null}${2:, \\$before = ''}${3:, \\$after = ''} )"
	"Displays the image and editor in the post editor":
		"prefix":"edit_form_image_editor"
		"body":"edit_form_image_editor( ${1:\\$post} )"
	"Updates or inserts a link using values provided in $_POST.":
		"prefix":"edit_link"
		"body":"edit_link( ${1:\\$link_id} )"
	"Update an existing post with values provided in $_POST.":
		"prefix":"edit_post"
		"body":"edit_post( ${1:\\$post_data = null} )"
	"Displays the edit post link for post.":
		"prefix":"edit_post_link"
		"body":"edit_post_link( ${1:\\$text = null}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$id}${5:, \\$class = 'post-edit-link'} )"
	"Displays or retrieves the edit link for a tag with formatting.":
		"prefix":"edit_tag_link"
		"body":"edit_tag_link( ${1:\\$link = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$tag = null} )"
	"Displays or retrieves the edit term link with formatting.":
		"prefix":"edit_term_link"
		"body":"edit_term_link( ${1:\\$link = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$term = null}${5:, \\$echo = true} )"
	"Edit user settings based on contents of $_POST":
		"prefix":"edit_user"
		"body":"edit_user( ${1:\\$user_id} )"
	"Checks whether the given email exists.":
		"prefix":"email_exists"
		"body":"email_exists( ${1:\\$email} )"
	"XML callback function that is called at the end of a XML tag.":
		"prefix":"endelement"
		"body":"endelement( ${1:\\$parser}${2:, \\$tagName} )"
	"enqueue_comment_hotkeys_js":
		"prefix":"enqueue_comment_hotkeys_js"
		"body":"enqueue_comment_hotkeys_js()"
	"Enqueue embed iframe default CSS and JS &amp; fire do_action('enqueue_embed_scripts')":
		"prefix":"enqueue_embed_scripts"
		"body":"enqueue_embed_scripts()"
	"Converts named entities into numbered entities.":
		"prefix":"ent2ncr"
		"body":"ent2ncr( ${1:\\$text} )"
	"Escaping for HTML attributes.":
		"prefix":"esc_attr"
		"body":"esc_attr( ${1:\\$text} )"
	"Retrieve the translation of $text and escapes it for safe use in an attribute.":
		"prefix":"esc_attr__"
		"body":"esc_attr__( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Display translated text that has been escaped for safe use in an attribute.":
		"prefix":"esc_attr_e"
		"body":"esc_attr_e( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Translate string with gettext context, and escapes it for safe use in an attribute.":
		"prefix":"esc_attr_x"
		"body":"esc_attr_x( ${1:\\$text}${2:, \\$context}${3:, \\$domain = 'default'} )"
	"Escaping for HTML blocks.":
		"prefix":"esc_html"
		"body":"esc_html( ${1:\\$text} )"
	"Retrieve the translation of $text and escapes it for safe use in HTML output.":
		"prefix":"esc_html__"
		"body":"esc_html__( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Display translated text that has been escaped for safe use in HTML output.":
		"prefix":"esc_html_e"
		"body":"esc_html_e( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Translate string with gettext context, and escapes it for safe use in HTML output.":
		"prefix":"esc_html_x"
		"body":"esc_html_x( ${1:\\$text}${2:, \\$context}${3:, \\$domain = 'default'} )"
	"Escape single quotes, htmlspecialchar &quot; &lt; &gt; &amp;, and fix line endings.":
		"prefix":"esc_js"
		"body":"esc_js( ${1:\\$text} )"
	"Escapes data for use in a MySQL query.":
		"prefix":"esc_sql"
		"body":"esc_sql( ${1:\\$data} )"
	"Escaping for textarea values.":
		"prefix":"esc_textarea"
		"body":"esc_textarea( ${1:\\$text} )"
	"Checks and cleans a URL.":
		"prefix":"esc_url"
		"body":"esc_url( ${1:\\$url}${2:, \\$protocols = null}${3:, \\$_context = 'display'} )"
	"Performs esc_url() for database usage.":
		"prefix":"esc_url_raw"
		"body":"esc_url_raw( ${1:\\$url}${2:, \\$protocols = null} )"
	"Display JavaScript on the page.":
		"prefix":"export_add_js"
		"body":"export_add_js()"
	"Create the date options fields for exporting a given post type.":
		"prefix":"export_date_options"
		"body":"export_date_options( ${1:\\$post_type = 'post'} )"
	"Generates the WXR export file for download.":
		"prefix":"export_wp"
		"body":"export_wp( ${1:\\$args = array()} )"
	"Extracts strings from between the BEGIN and END markers in the .htaccess file.":
		"prefix":"extract_from_markers"
		"body":"extract_from_markers( ${1:\\$filename}${2:, \\$marker} )"
	"Favorite actions were deprecated in version 3.2. Use the admin bar instead.":
		"prefix":"favorite_actions"
		"body":"favorite_actions()"
	"Return the content type for specified feed type.":
		"prefix":"feed_content_type"
		"body":"feed_content_type( ${1:\\$type = ''} )"
	"Display the links to the general feeds.":
		"prefix":"feed_links"
		"body":"feed_links( ${1:\\$args = array()} )"
	"Display the links to the extra feeds such as category feeds.":
		"prefix":"feed_links_extra"
		"body":"feed_links_extra( ${1:\\$args = array()} )"
	"Build SimplePie object based on RSS or Atom feed from URL.":
		"prefix":"fetch_feed"
		"body":"fetch_feed( ${1:\\$url} )"
	"Build Magpie object based on RSS from URL.":
		"prefix":"fetch_rss"
		"body":"fetch_rss( ${1:\\$url} )"
	"Validate that file is suitable for displaying within a web page.":
		"prefix":"file_is_displayable_image"
		"body":"file_is_displayable_image( ${1:\\$path} )"
	"Validate that file is an image.":
		"prefix":"file_is_valid_image"
		"body":"file_is_valid_image( ${1:\\$path} )"
	"Filter the default value for the option.":
		"prefix":"filter_default_option"
		"body":"filter_default_option( ${1:\\$default}${2:, \\$option}${3:, \\$passed_default} )"
	"Formats a URL to use https.":
		"prefix":"filter_ssl"
		"body":"filter_ssl( ${1:\\$url} )"
	"Gets the best available (and enabled) Auto-Update for WordPress Core.":
		"prefix":"find_core_auto_update"
		"body":"find_core_auto_update()"
	"find_core_update":
		"prefix":"find_core_update"
		"body":"find_core_update( ${1:\\$version}${2:, \\$locale} )"
	"Outputs the modal window used for attaching media to posts or pages in the media-listing screen.":
		"prefix":"find_posts_div"
		"body":"find_posts_div( ${1:\\$found_action = ''} )"
	"Get the remaining upload space for this site.":
		"prefix":"fix_import_form_size"
		"body":"fix_import_form_size( ${1:\\$size} )"
	"Correct From host on outgoing mail to match the site domain":
		"prefix":"fix_phpmailer_messageid"
		"body":"fix_phpmailer_messageid( ${1:\\$phpmailer} )"
	"Add avatars to relevant places in admin, or try to.":
		"prefix":"floated_admin_avatar"
		"body":"floated_admin_avatar( ${1:\\$name} )"
	"Remove rewrite rules and then recreate rewrite rules.":
		"prefix":"flush_rewrite_rules"
		"body":"flush_rewrite_rules( ${1:\\$hard = true} )"
	"Balances tags of string using a modified stack.":
		"prefix":"force_balance_tags"
		"body":"force_balance_tags( ${1:\\$text} )"
	"Whether to force SSL used for the Administration Screens.":
		"prefix":"force_ssl_admin"
		"body":"force_ssl_admin( ${1:\\$force = null} )"
	"Whether to force SSL on content.":
		"prefix":"force_ssl_content"
		"body":"force_ssl_content( ${1:\\$force = ''} )"
	"Whether SSL login should be forced.":
		"prefix":"force_ssl_login"
		"body":"force_ssl_login( ${1:\\$force = null} )"
	"Print option value after sanitizing for forms.":
		"prefix":"form_option"
		"body":"form_option( ${1:\\$option} )"
	"Returns the language for a language code.":
		"prefix":"format_code_lang"
		"body":"format_code_lang( ${1:\\$code = ''} )"
	"Formats text for the editor.":
		"prefix":"format_for_editor"
		"body":"format_for_editor( ${1:\\$text}${2:, \\$default_editor = null} )"
	"Acts on text which is about to be edited.":
		"prefix":"format_to_edit"
		"body":"format_to_edit( ${1:\\$content}${2:, \\$rich_text = false} )"
	"Formerly used to escape strings before inserting into the DB.":
		"prefix":"format_to_post"
		"body":"format_to_post( ${1:\\$content} )"
	"Callback used to change %uXXXX to &amp;#YYY; syntax":
		"prefix":"funky_javascript_callback"
		"body":"funky_javascript_callback( ${1:\\$matches} )"
	"Fixes JavaScript bugs in browsers.":
		"prefix":"funky_javascript_fix"
		"body":"funky_javascript_fix( ${1:\\$text} )"
	"Builds the Gallery shortcode output.":
		"prefix":"gallery_shortcode"
		"body":"gallery_shortcode( ${1:\\$attr} )"
	"Check if the installed version of GD supports particular image type":
		"prefix":"gd_edit_image_support"
		"body":"gd_edit_image_support( ${1:\\$mime_type} )"
	"Generates a random password.":
		"prefix":"generate_random_password"
		"body":"generate_random_password( ${1:\\$len = 8} )"
	"Sends pings to all of the ping site services.":
		"prefix":"generic_ping"
		"body":"generic_ping( ${1:\\$post_id} )"
	"Retrieve path of 404 template in current or parent template.":
		"prefix":"get_404_template"
		"body":"get_404_template()"
	"Get one of a user's active blogs":
		"prefix":"get_active_blog_for_user"
		"body":"get_active_blog_for_user( ${1:\\$user_id} )"
	"Retrieves the adjacent post.":
		"prefix":"get_adjacent_post"
		"body":"get_adjacent_post( ${1:\\$in_same_term = false}${2:, \\$excluded_terms = ''}${3:, \\$previous = true}${4:, \\$taxonomy = 'category'} )"
	"Retrieves the adjacent post link.":
		"prefix":"get_adjacent_post_link"
		"body":"get_adjacent_post_link( ${1:\\$format}${2:, \\$link}${3:, \\$in_same_term = false}${4:, \\$excluded_terms = ''}${5:, \\$previous = true}${6:, \\$taxonomy = 'category'} )"
	"Retrieves the adjacent post relational link.":
		"prefix":"get_adjacent_post_rel_link"
		"body":"get_adjacent_post_rel_link( ${1:\\$title = '%title'}${2:, \\$in_same_term = false}${3:, \\$excluded_terms = ''}${4:, \\$previous = true}${5:, \\$taxonomy = 'category'} )"
	"get_admin_page_parent":
		"prefix":"get_admin_page_parent"
		"body":"get_admin_page_parent()"
	"get_admin_page_title":
		"prefix":"get_admin_page_title"
		"body":"get_admin_page_title()"
	"Retrieves the URL to the admin area for a given site.":
		"prefix":"get_admin_url"
		"body":"get_admin_url( ${1:\\$blog_id = null}${2:, \\$path = ''}${3:, \\$scheme = 'admin'} )"
	"Get the admin for a domain/path combination.":
		"prefix":"get_admin_users_for_domain"
		"body":"get_admin_users_for_domain( ${1:\\$sitedomain = ''}${2:, \\$path = ''} )"
	"Retrieves all category IDs.":
		"prefix":"get_all_category_ids"
		"body":"get_all_category_ids()"
	"Get a list of page IDs.":
		"prefix":"get_all_page_ids"
		"body":"get_all_page_ids()"
	"Get all the post type features":
		"prefix":"get_all_post_type_supports"
		"body":"get_all_post_type_supports( ${1:\\$post_type} )"
	"Retrieve all user interface settings.":
		"prefix":"get_all_user_settings"
		"body":"get_all_user_settings()"
	"Retrieve all autoload options, or all options if no autoloaded ones exist.":
		"prefix":"get_alloptions"
		"body":"get_alloptions()"
	"Retrieve all options as it was for 1.2.":
		"prefix":"get_alloptions_110"
		"body":"get_alloptions_110()"
	"Retrieve list of allowed HTTP origins.":
		"prefix":"get_allowed_http_origins"
		"body":"get_allowed_http_origins()"
	"Retrieve list of allowed mime types and file extensions.":
		"prefix":"get_allowed_mime_types"
		"body":"get_allowed_mime_types( ${1:\\$user = null} )"
	"Get the allowed themes for the current site.":
		"prefix":"get_allowed_themes"
		"body":"get_allowed_themes()"
	"Get an array of ancestor IDs for a given object.":
		"prefix":"get_ancestors"
		"body":"get_ancestors( ${1:\\$object_id}${2:, \\$object_type = ''}${3:, \\$resource_type = ''} )"
	"Retrieve the approved comments for post $post_id.":
		"prefix":"get_approved_comments"
		"body":"get_approved_comments( ${1:\\$post_id}${2:, \\$args = array()} )"
	"Retrieve path of archive template in current or parent template.":
		"prefix":"get_archive_template"
		"body":"get_archive_template()"
	"Retrieves a list of archives.":
		"prefix":"get_archives"
		"body":"get_archives( ${1:\\$type = ''}${2:, \\$limit = ''}${3:, \\$format = 'html'}${4:, \\$before = ''}${5:, \\$after = ''}${6:, \\$show_post_count = false} )"
	"Retrieve archive link content based on predefined or custom code.":
		"prefix":"get_archives_link"
		"body":"get_archives_link( ${1:\\$url}${2:, \\$text}${3:, \\$format = 'html'}${4:, \\$before = ''}${5:, \\$after = ''} )"
	"Retrieve attached file path based on attachment ID.":
		"prefix":"get_attached_file"
		"body":"get_attached_file( ${1:\\$attachment_id}${2:, \\$unfiltered = false} )"
	"Retrieves media attached to the passed post.":
		"prefix":"get_attached_media"
		"body":"get_attached_media( ${1:\\$type}${2:, \\$post} )"
	"Retrieves the attachment fields to edit form fields.":
		"prefix":"get_attachment_fields_to_edit"
		"body":"get_attachment_fields_to_edit( ${1:\\$post}${2:, \\$errors = null} )"
	"Retrieve HTML content of icon attachment image element.":
		"prefix":"get_attachment_icon"
		"body":"get_attachment_icon( ${1:\\$id}${2:, \\$fullsize = false}${3:, \\$max_dims = false} )"
	"Retrieve icon URL and Path.":
		"prefix":"get_attachment_icon_src"
		"body":"get_attachment_icon_src( ${1:\\$id}${2:, \\$fullsize = false} )"
	"Retrieve HTML content of image element.":
		"prefix":"get_attachment_innerhtml"
		"body":"get_attachment_innerhtml( ${1:\\$id}${2:, \\$fullsize = false}${3:, \\$max_dims = false} )"
	"Retrieves the permalink for an attachment.":
		"prefix":"get_attachment_link"
		"body":"get_attachment_link( ${1:\\$post = null}${2:, \\$leavename = false} )"
	"Retrieves taxonomies attached to given the attachment.":
		"prefix":"get_attachment_taxonomies"
		"body":"get_attachment_taxonomies( ${1:\\$attachment}${2:, \\$output = 'names'} )"
	"Retrieve path of attachment template in current or parent template.":
		"prefix":"get_attachment_template"
		"body":"get_attachment_template()"
	"Retrieves the feed link for a given author.":
		"prefix":"get_author_feed_link"
		"body":"get_author_feed_link( ${1:\\$author_id}${2:, \\$feed = ''} )"
	"Returns or Prints link to the author's posts.":
		"prefix":"get_author_link"
		"body":"get_author_link( ${1:\\$echo}${2:, \\$author_id}${3:, \\$author_nicename = ''} )"
	"Retrieve the specified author's preferred display name.":
		"prefix":"get_author_name"
		"body":"get_author_name( ${1:\\$auth_id = false} )"
	"Retrieve the URL to the author page for the user with the ID provided.":
		"prefix":"get_author_posts_url"
		"body":"get_author_posts_url( ${1:\\$author_id}${2:, \\$author_nicename = ''} )"
	"Print/Return link to author RSS feed.":
		"prefix":"get_author_rss_link"
		"body":"get_author_rss_link( ${1:\\$echo = false}${2:, \\$author_id = 1} )"
	"Retrieve path of author template in current or parent template.":
		"prefix":"get_author_template"
		"body":"get_author_template()"
	"Get all user IDs.":
		"prefix":"get_author_user_ids"
		"body":"get_author_user_ids()"
	"Gets the auto_toggle setting.":
		"prefix":"get_autotoggle"
		"body":"get_autotoggle( ${1:\\$id} )"
	"Get all available languages based on the presence of *.mo files in a given directory.":
		"prefix":"get_available_languages"
		"body":"get_available_languages( ${1:\\$dir = null} )"
	"Get all available post MIME types for a given post type.":
		"prefix":"get_available_post_mime_types"
		"body":"get_available_post_mime_types( ${1:\\$type = 'attachment'} )"
	"Get all the possible statuses for a post_type":
		"prefix":"get_available_post_statuses"
		"body":"get_available_post_statuses( ${1:\\$type = 'post'} )"
	"Retrieve the avatar `&lt;img&gt;` tag for a user, email address, MD5 hash, comment, or post.":
		"prefix":"get_avatar"
		"body":"get_avatar( ${1:\\$id_or_email}${2:, \\$size = 96}${3:, \\$default = ''}${4:, \\$alt = ''}${5:, \\$args = null} )"
	"Retrieves default data about the avatar.":
		"prefix":"get_avatar_data"
		"body":"get_avatar_data( ${1:\\$id_or_email}${2:, \\$args = null} )"
	"Retrieves the avatar URL.":
		"prefix":"get_avatar_url"
		"body":"get_avatar_url( ${1:\\$id_or_email}${2:, \\$args = null} )"
	"Retrieve value for custom background color.":
		"prefix":"get_background_color"
		"body":"get_background_color()"
	"Retrieve background image for custom background.":
		"prefix":"get_background_image"
		"body":"get_background_image()"
	"The number of active sites on your installation.":
		"prefix":"get_blog_count"
		"body":"get_blog_count( ${1:\\$network_id = null} )"
	"Retrieve the details for a blog from the blogs table and blog options.":
		"prefix":"get_blog_details"
		"body":"get_blog_details( ${1:\\$fields = null}${2:, \\$get_all = true} )"
	"Get a blog's numeric ID from its URL.":
		"prefix":"get_blog_id_from_url"
		"body":"get_blog_id_from_url( ${1:\\$domain}${2:, \\$path = '/'} )"
	"Deprecated functionality to retrieve a list of all sites.":
		"prefix":"get_blog_list"
		"body":"get_blog_list( ${1:\\$start}${2:, \\$num = 10}${3:, \\$deprecated = ''} )"
	"Retrieve option value for a given blog id based on name of option.":
		"prefix":"get_blog_option"
		"body":"get_blog_option( ${1:\\$id}${2:, \\$option}${3:, \\$default = false} )"
	"Get the permalink for a post on another blog.":
		"prefix":"get_blog_permalink"
		"body":"get_blog_permalink( ${1:\\$blog_id}${2:, \\$post_id} )"
	"Get a blog post from any site on the network.":
		"prefix":"get_blog_post"
		"body":"get_blog_post( ${1:\\$blog_id}${2:, \\$post_id} )"
	"Get a blog details field.":
		"prefix":"get_blog_status"
		"body":"get_blog_status( ${1:\\$id}${2:, \\$pref} )"
	"Get a full blog URL, given a domain and a path.":
		"prefix":"get_blogaddress_by_domain"
		"body":"get_blogaddress_by_domain( ${1:\\$domain}${2:, \\$path} )"
	"Get a full blog URL, given a blog id.":
		"prefix":"get_blogaddress_by_id"
		"body":"get_blogaddress_by_id( ${1:\\$blog_id} )"
	"Get a full blog URL, given a blog name.":
		"prefix":"get_blogaddress_by_name"
		"body":"get_blogaddress_by_name( ${1:\\$blogname} )"
	"Retrieves information about the current site.":
		"prefix":"get_bloginfo"
		"body":"get_bloginfo( ${1:\\$show = ''}${2:, \\$filter = 'raw'} )"
	"RSS container for the bloginfo function.":
		"prefix":"get_bloginfo_rss"
		"body":"get_bloginfo_rss( ${1:\\$show = ''} )"
	"Get the sites a user belongs to.":
		"prefix":"get_blogs_of_user"
		"body":"get_blogs_of_user( ${1:\\$user_id}${2:, \\$all = false} )"
	"Retrieve the classes for the body element as an array.":
		"prefix":"get_body_class"
		"body":"get_body_class( ${1:\\$class = ''} )"
	"Retrieve Bookmark data":
		"prefix":"get_bookmark"
		"body":"get_bookmark( ${1:\\$bookmark}${2:, \\$output = OBJECT}${3:, \\$filter = 'raw'} )"
	"Retrieve single bookmark data item or field.":
		"prefix":"get_bookmark_field"
		"body":"get_bookmark_field( ${1:\\$field}${2:, \\$bookmark}${3:, \\$context = 'display'} )"
	"Retrieves the list of bookmarks":
		"prefix":"get_bookmarks"
		"body":"get_bookmarks( ${1:\\$args = ''} )"
	"Retrieves the boundary post.":
		"prefix":"get_boundary_post"
		"body":"get_boundary_post( ${1:\\$in_same_term = false}${2:, \\$excluded_terms = ''}${3:, \\$start = true}${4:, \\$taxonomy = 'category'} )"
	"Get boundary post relational link.":
		"prefix":"get_boundary_post_rel_link"
		"body":"get_boundary_post_rel_link( ${1:\\$title = '%title'}${2:, \\$in_same_cat = false}${3:, \\$excluded_categories = ''}${4:, \\$start = true} )"
	"Retrieves a list of broken themes.":
		"prefix":"get_broken_themes"
		"body":"get_broken_themes()"
	"Display calendar with days that have posts as links.":
		"prefix":"get_calendar"
		"body":"get_calendar( ${1:\\$initial = true}${2:, \\$echo = true} )"
	"Retrieve HTML content for cancel comment reply link.":
		"prefix":"get_cancel_comment_reply_link"
		"body":"get_cancel_comment_reply_link( ${1:\\$text = ''} )"
	"Retrieve the ID of a category from its name.":
		"prefix":"get_cat_id"
		"body":"get_cat_id( ${1:\\$cat_name} )"
	"Retrieve the name of a category from its ID.":
		"prefix":"get_cat_name"
		"body":"get_cat_name( ${1:\\$cat_id} )"
	"Retrieve list of category objects.":
		"prefix":"get_categories"
		"body":"get_categories( ${1:\\$args = ''} )"
	"Retrieves category data given a category ID or category object.":
		"prefix":"get_category"
		"body":"get_category( ${1:\\$category}${2:, \\$output = OBJECT}${3:, \\$filter = 'raw'} )"
	"Retrieve category based on URL containing the category slug.":
		"prefix":"get_category_by_path"
		"body":"get_category_by_path( ${1:\\$category_path}${2:, \\$full_match = true}${3:, \\$output = OBJECT} )"
	"Retrieve category object by category slug.":
		"prefix":"get_category_by_slug"
		"body":"get_category_by_slug( ${1:\\$slug} )"
	"Retrieve category children list separated before and after the term IDs.":
		"prefix":"get_category_children"
		"body":"get_category_children( ${1:\\$id}${2:, \\$before = '/'}${3:, \\$after = ''}${4:, \\$visited = array()} )"
	"Retrieves the feed link for a category.":
		"prefix":"get_category_feed_link"
		"body":"get_category_feed_link( ${1:\\$cat_id}${2:, \\$feed = ''} )"
	"Retrieve category link URL.":
		"prefix":"get_category_link"
		"body":"get_category_link( ${1:\\$category} )"
	"Retrieve category parents with separator.":
		"prefix":"get_category_parents"
		"body":"get_category_parents( ${1:\\$id}${2:, \\$link = false}${3:, \\$separator = '/'}${4:, \\$nicename = false}${5:, \\$deprecated = array()} )"
	"Print/Return link to category RSS2 feed.":
		"prefix":"get_category_rss_link"
		"body":"get_category_rss_link( ${1:\\$echo = false}${2:, \\$cat_ID = 1} )"
	"Retrieve path of category template in current or parent template.":
		"prefix":"get_category_template"
		"body":"get_category_template()"
	"Get category object for given ID and 'edit' filter context.":
		"prefix":"get_category_to_edit"
		"body":"get_category_to_edit( ${1:\\$id} )"
	"Retrieve the category name by the category ID.":
		"prefix":"get_catname"
		"body":"get_catname( ${1:\\$cat_ID} )"
	"Retrieve all children of the post parent ID.":
		"prefix":"get_children"
		"body":"get_children( ${1:\\$args = ''}${2:, \\$output = OBJECT} )"
	"Get base domain of network.":
		"prefix":"get_clean_basedomain"
		"body":"get_clean_basedomain()"
	"Returns value of command line params.":
		"prefix":"get_cli_args"
		"body":"get_cli_args( ${1:\\$param}${2:, \\$required = false} )"
	"Get the column headers for a screen":
		"prefix":"get_column_headers"
		"body":"get_column_headers( ${1:\\$screen} )"
	"Retrieves comment data given a comment ID or comment object.":
		"prefix":"get_comment"
		"body":"get_comment( ${1:\\$comment = null}${2:, \\$output = OBJECT} )"
	"Retrieve the author of the current comment.":
		"prefix":"get_comment_author"
		"body":"get_comment_author( ${1:\\$comment_ID} )"
	"Retrieve the email of the author of the current comment.":
		"prefix":"get_comment_author_email"
		"body":"get_comment_author_email( ${1:\\$comment_ID} )"
	"Return the html email link to the author of the current comment.":
		"prefix":"get_comment_author_email_link"
		"body":"get_comment_author_email_link( ${1:\\$linktext = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$comment = null} )"
	"Retrieve the IP address of the author of the current comment.":
		"prefix":"get_comment_author_ip"
		"body":"get_comment_author_ip( ${1:\\$comment_ID} )"
	"Retrieve the HTML link to the URL of the author of the current comment.":
		"prefix":"get_comment_author_link"
		"body":"get_comment_author_link( ${1:\\$comment_ID} )"
	"Retrieve the current comment author for use in the feeds.":
		"prefix":"get_comment_author_rss"
		"body":"get_comment_author_rss()"
	"Retrieve the url of the author of the current comment.":
		"prefix":"get_comment_author_url"
		"body":"get_comment_author_url( ${1:\\$comment_ID} )"
	"Retrieves the HTML link of the url of the author of the current comment.":
		"prefix":"get_comment_author_url_link"
		"body":"get_comment_author_url_link( ${1:\\$linktext = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$comment} )"
	"Returns the classes for the comment div as an array.":
		"prefix":"get_comment_class"
		"body":"get_comment_class( ${1:\\$class = ''}${2:, \\$comment_id = null}${3:, \\$post_id = null} )"
	"The amount of comments in a post or total comments.":
		"prefix":"get_comment_count"
		"body":"get_comment_count( ${1:\\$post_id} )"
	"Retrieve the comment date of the current comment.":
		"prefix":"get_comment_date"
		"body":"get_comment_date( ${1:\\$d = ''}${2:, \\$comment_ID} )"
	"Retrieve the excerpt of the current comment.":
		"prefix":"get_comment_excerpt"
		"body":"get_comment_excerpt( ${1:\\$comment_ID} )"
	"Retrieve the feed GUID for the current comment.":
		"prefix":"get_comment_guid"
		"body":"get_comment_guid( ${1:\\$comment_id = null} )"
	"Retrieve the comment id of the current comment.":
		"prefix":"get_comment_id"
		"body":"get_comment_id()"
	"Retrieve hidden input HTML for replying to comments.":
		"prefix":"get_comment_id_fields"
		"body":"get_comment_id_fields( ${1:\\$id} )"
	"Retrieve the link to a given comment.":
		"prefix":"get_comment_link"
		"body":"get_comment_link( ${1:\\$comment = null}${2:, \\$args = array()} )"
	"Retrieve comment meta field for a comment.":
		"prefix":"get_comment_meta"
		"body":"get_comment_meta( ${1:\\$comment_id}${2:, \\$key = ''}${3:, \\$single = false} )"
	"Calculate the total number of comment pages.":
		"prefix":"get_comment_pages_count"
		"body":"get_comment_pages_count( ${1:\\$comments = null}${2:, \\$per_page = null}${3:, \\$threaded = null} )"
	"Retrieve HTML content for reply to comment link.":
		"prefix":"get_comment_reply_link"
		"body":"get_comment_reply_link( ${1:\\$args = array()}${2:, \\$comment = null}${3:, \\$post = null} )"
	"Retrieve all of the WordPress supported comment statuses.":
		"prefix":"get_comment_statuses"
		"body":"get_comment_statuses()"
	"Retrieve the text of the current comment.":
		"prefix":"get_comment_text"
		"body":"get_comment_text( ${1:\\$comment_ID}${2:, \\$args = array()} )"
	"Retrieve the comment time of the current comment.":
		"prefix":"get_comment_time"
		"body":"get_comment_time( ${1:\\$d = ''}${2:, \\$gmt = false}${3:, \\$translate = true} )"
	"Returns a WP_Comment object based on comment ID.":
		"prefix":"get_comment_to_edit"
		"body":"get_comment_to_edit( ${1:\\$id} )"
	"Retrieve the comment type of the current comment.":
		"prefix":"get_comment_type"
		"body":"get_comment_type( ${1:\\$comment_ID} )"
	"Retrieve an array of comment data about comment $comment_ID.":
		"prefix":"get_commentdata"
		"body":"get_commentdata( ${1:\\$comment_ID}${2:, \\$no_cache}${3:, \\$include_unapproved = false} )"
	"Retrieve a list of comments.":
		"prefix":"get_comments"
		"body":"get_comments( ${1:\\$args = ''} )"
	"Retrieves the link to the current post comments.":
		"prefix":"get_comments_link"
		"body":"get_comments_link( ${1:\\$post_id} )"
	"Retrieve the amount of comments a post has.":
		"prefix":"get_comments_number"
		"body":"get_comments_number( ${1:\\$post_id} )"
	"Display the language string for the number of comments the current post has":
		"prefix":"get_comments_number_text"
		"body":"get_comments_number_text( ${1:\\$zero = false}${2:, \\$one = false}${3:, \\$more = false} )"
	"Retrieves the comments page number link.":
		"prefix":"get_comments_pagenum_link"
		"body":"get_comments_pagenum_link( ${1:\\$pagenum = 1}${2:, \\$max_page} )"
	"Retrieve path of comment popup template in current or parent template.":
		"prefix":"get_comments_popup_template"
		"body":"get_comments_popup_template()"
	"get_compat_media_markup":
		"prefix":"get_compat_media_markup"
		"body":"get_compat_media_markup( ${1:\\$attachment_id}${2:, \\$args = null} )"
	"Gets and caches the checksums for the given version of WordPress.":
		"prefix":"get_core_checksums"
		"body":"get_core_checksums( ${1:\\$version}${2:, \\$locale} )"
	"Get available core updates.":
		"prefix":"get_core_updates"
		"body":"get_core_updates( ${1:\\$options = array()} )"
	"Retrieve the current site ID.":
		"prefix":"get_current_blog_id"
		"body":"get_current_blog_id()"
	"Retrieves the current network ID.":
		"prefix":"get_current_network_id"
		"body":"get_current_network_id()"
	"Get the current screen object":
		"prefix":"get_current_screen"
		"body":"get_current_screen()"
	"Get the current network.":
		"prefix":"get_current_site"
		"body":"get_current_site()"
	"This deprecated function formerly set the site_name property of the $current_site object.":
		"prefix":"get_current_site_name"
		"body":"get_current_site_name( ${1:\\$current_site} )"
	"Retrieve current theme name.":
		"prefix":"get_current_theme"
		"body":"get_current_theme()"
	"Get the current user's ID":
		"prefix":"get_current_user_id"
		"body":"get_current_user_id()"
	"Populate global variables with information about the currently logged in user.":
		"prefix":"get_currentuserinfo"
		"body":"get_currentuserinfo()"
	"Get the header image data.":
		"prefix":"get_custom_header"
		"body":"get_custom_header()"
	"Retrieve the markup for a custom header.":
		"prefix":"get_custom_header_markup"
		"body":"get_custom_header_markup()"
	"Returns a custom logo, linked to home.":
		"prefix":"get_custom_logo"
		"body":"get_custom_logo( ${1:\\$blog_id} )"
	"Get the &quot;dashboard blog&quot;, the blog where users without a blog edit their profile data.":
		"prefix":"get_dashboard_blog"
		"body":"get_dashboard_blog()"
	"Retrieves the URL to the user's dashboard.":
		"prefix":"get_dashboard_url"
		"body":"get_dashboard_url( ${1:\\$user_id}${2:, \\$path = ''}${3:, \\$scheme = 'admin'} )"
	"Converts a GMT date into the correct format for the blog.":
		"prefix":"get_date_from_gmt"
		"body":"get_date_from_gmt( ${1:\\$string}${2:, \\$format = 'Y-m-d H:i:s'} )"
	"Retrieve path of date template in current or parent template.":
		"prefix":"get_date_template"
		"body":"get_date_template()"
	"Retrieves the permalink for the day archives with year and month.":
		"prefix":"get_day_link"
		"body":"get_day_link( ${1:\\$year}${2:, \\$month}${3:, \\$day} )"
	"Gets the default comment status for a post type.":
		"prefix":"get_default_comment_status"
		"body":"get_default_comment_status( ${1:\\$post_type = 'post'}${2:, \\$comment_type = 'comment'} )"
	"Retrieve the default feed.":
		"prefix":"get_default_feed"
		"body":"get_default_feed()"
	"Retrieves the default link for editing.":
		"prefix":"get_default_link_to_edit"
		"body":"get_default_link_to_edit()"
	"Gets the default page information to use.":
		"prefix":"get_default_page_to_edit"
		"body":"get_default_page_to_edit()"
	"Default post information to use when populating the &quot;Write Post&quot; form.":
		"prefix":"get_default_post_to_edit"
		"body":"get_default_post_to_edit( ${1:\\$post_type = 'post'}${2:, \\$create_in_db = false} )"
	"Retrieves the delete posts link for post.":
		"prefix":"get_delete_post_link"
		"body":"get_delete_post_link( ${1:\\$id}${2:, \\$deprecated = ''}${3:, \\$force_delete = false} )"
	"Get the size of a directory.":
		"prefix":"get_dirsize"
		"body":"get_dirsize( ${1:\\$directory} )"
	"Check the wp-content directory and retrieve all drop-ins with any plugin data.":
		"prefix":"get_dropins"
		"body":"get_dropins()"
	"Displays the edit bookmark link.":
		"prefix":"get_edit_bookmark_link"
		"body":"get_edit_bookmark_link( ${1:\\$link} )"
	"Retrieves the edit comment link.":
		"prefix":"get_edit_comment_link"
		"body":"get_edit_comment_link( ${1:\\$comment_id} )"
	"Retrieves the edit post link for post.":
		"prefix":"get_edit_post_link"
		"body":"get_edit_post_link( ${1:\\$id}${2:, \\$context = 'display'} )"
	"Retrieves the URL to the user's profile editor.":
		"prefix":"get_edit_profile_url"
		"body":"get_edit_profile_url( ${1:\\$user_id}${2:, \\$scheme = 'admin'} )"
	"Retrieves the edit link for a tag.":
		"prefix":"get_edit_tag_link"
		"body":"get_edit_tag_link( ${1:\\$tag_id}${2:, \\$taxonomy = 'post_tag'} )"
	"Retrieves the URL for editing a given term.":
		"prefix":"get_edit_term_link"
		"body":"get_edit_term_link( ${1:\\$term_id}${2:, \\$taxonomy = ''}${3:, \\$object_type = ''} )"
	"Retrieves the edit user link.":
		"prefix":"get_edit_user_link"
		"body":"get_edit_user_link( ${1:\\$user_id = null} )"
	"Gets author users who can edit posts.":
		"prefix":"get_editable_authors"
		"body":"get_editable_authors( ${1:\\$user_id} )"
	"Fetch a filtered list of user roles that the current user is
allowed to edit.":
		"prefix":"get_editable_roles"
		"body":"get_editable_roles()"
	"Gets the IDs of any users who can edit posts.":
		"prefix":"get_editable_user_ids"
		"body":"get_editable_user_ids( ${1:\\$user_id}${2:, \\$exclude_zeros = true} )"
	"Retrieve any registered editor stylesheets":
		"prefix":"get_editor_stylesheets"
		"body":"get_editor_stylesheets()"
	"Retrieves an embed template path in the current or parent template.":
		"prefix":"get_embed_template"
		"body":"get_embed_template()"
	"Retrieve enclosures already enclosed for a post.":
		"prefix":"get_enclosed"
		"body":"get_enclosed( ${1:\\$post_id} )"
	"Get extended entry info (&lt;!--more--&gt;).":
		"prefix":"get_extended"
		"body":"get_extended( ${1:\\$post} )"
	"Retrieves the permalink for the feed type.":
		"prefix":"get_feed_link"
		"body":"get_feed_link( ${1:\\$feed = ''} )"
	"Retrieve metadata from a file.":
		"prefix":"get_file_data"
		"body":"get_file_data( ${1:\\$file}${2:, \\$default_headers}${3:, \\$context = ''} )"
	"Get the description for standard WordPress theme files and other various standard
WordPress files":
		"prefix":"get_file_description"
		"body":"get_file_description( ${1:\\$file} )"
	"Determines which method to use for reading, writing, modifying, or deleting
files on the filesystem.":
		"prefix":"get_filesystem_method"
		"body":"get_filesystem_method( ${1:\\$args = array()}${2:, \\$context = ''}${3:, \\$allow_relaxed_file_ownership = false} )"
	"Load footer template.":
		"prefix":"get_footer"
		"body":"get_footer( ${1:\\$name = null} )"
	"Retrieve path of front page template in current or parent template.":
		"prefix":"get_front_page_template"
		"body":"get_front_page_template()"
	"Returns a date in the GMT equivalent.":
		"prefix":"get_gmt_from_date"
		"body":"get_gmt_from_date( ${1:\\$string}${2:, \\$format = 'Y-m-d H:i:s'} )"
	"Load header template.":
		"prefix":"get_header"
		"body":"get_header( ${1:\\$name = null} )"
	"Retrieve header image for custom header.":
		"prefix":"get_header_image"
		"body":"get_header_image()"
	"Create image tag markup for a custom header image.":
		"prefix":"get_header_image_tag"
		"body":"get_header_image_tag( ${1:\\$attr = array()} )"
	"Retrieves the custom header text color in 3- or 6-digit hexadecimal form.":
		"prefix":"get_header_textcolor"
		"body":"get_header_textcolor()"
	"Retrieve header video settings.":
		"prefix":"get_header_video_settings"
		"body":"get_header_video_settings()"
	"Retrieve header video URL for custom header.":
		"prefix":"get_header_video_url"
		"body":"get_header_video_url()"
	"Get a list of hidden columns.":
		"prefix":"get_hidden_columns"
		"body":"get_hidden_columns( ${1:\\$screen} )"
	"Get Hidden Meta Boxes":
		"prefix":"get_hidden_meta_boxes"
		"body":"get_hidden_meta_boxes( ${1:\\$screen} )"
	"Get the absolute filesystem path to the root of the WordPress installation":
		"prefix":"get_home_path"
		"body":"get_home_path()"
	"Retrieve path of home template in current or parent template.":
		"prefix":"get_home_template"
		"body":"get_home_template()"
	"Retrieves the URL for a given site where the front end is accessible.":
		"prefix":"get_home_url"
		"body":"get_home_url( ${1:\\$blog_id = null}${2:, \\$path = ''}${3:, \\$scheme = null} )"
	"Retrieve the regular expression for an HTML element.":
		"prefix":"get_html_split_regex"
		"body":"get_html_split_regex()"
	"Get the HTTP Origin of the current request.":
		"prefix":"get_http_origin"
		"body":"get_http_origin()"
	"Retrieves a sites ID given its (subdomain or directory) slug.":
		"prefix":"get_id_from_blogname"
		"body":"get_id_from_blogname( ${1:\\$slug} )"
	"Retrieves the image HTML to send to the editor.":
		"prefix":"get_image_send_to_editor"
		"body":"get_image_send_to_editor( ${1:\\$id}${2:, \\$caption}${3:, \\$title}${4:, \\$align}${5:, \\$url = ''}${6:, \\$rel = false}${7:, \\$size = 'medium'}${8:, \\$alt = ''} )"
	"Gets an img tag for an image attachment, scaling it down if requested.":
		"prefix":"get_image_tag"
		"body":"get_image_tag( ${1:\\$id}${2:, \\$alt}${3:, \\$title}${4:, \\$align}${5:, \\$size = 'medium'} )"
	"Retrieve list of importers.":
		"prefix":"get_importers"
		"body":"get_importers()"
	"Get site index relational link.":
		"prefix":"get_index_rel_link"
		"body":"get_index_rel_link()"
	"Retrieve path of index template in current or parent template.":
		"prefix":"get_index_template"
		"body":"get_index_template()"
	"Adds hidden fields with the data for use in the inline editor for posts and pages.":
		"prefix":"get_inline_data"
		"body":"get_inline_data( ${1:\\$post} )"
	"Gets the available intermediate image sizes.":
		"prefix":"get_intermediate_image_sizes"
		"body":"get_intermediate_image_sizes()"
	"Gets the language attributes for the html tag.":
		"prefix":"get_language_attributes"
		"body":"get_language_attributes( ${1:\\$doctype = 'html'} )"
	"Get a list of most recently updated blogs.":
		"prefix":"get_last_updated"
		"body":"get_last_updated( ${1:\\$deprecated = ''}${2:, \\$start}${3:, \\$quantity = 40} )"
	"The date the last comment was modified.":
		"prefix":"get_lastcommentmodified"
		"body":"get_lastcommentmodified( ${1:\\$timezone = 'server'} )"
	"Retrieve the date that the last post was published.":
		"prefix":"get_lastpostdate"
		"body":"get_lastpostdate( ${1:\\$timezone = 'server'}${2:, \\$post_type = 'any'} )"
	"Get the timestamp of the last time any post was modified.":
		"prefix":"get_lastpostmodified"
		"body":"get_lastpostmodified( ${1:\\$timezone = 'server'}${2:, \\$post_type = 'any'} )"
	"Retrieves bookmark data based on ID.":
		"prefix":"get_link"
		"body":"get_link( ${1:\\$bookmark_id}${2:, \\$output = OBJECT}${3:, \\$filter = 'raw'} )"
	"Retrieves link data based on its ID.":
		"prefix":"get_link_to_edit"
		"body":"get_link_to_edit( ${1:\\$link} )"
	"Gets the name of category by id.":
		"prefix":"get_linkcatname"
		"body":"get_linkcatname( ${1:\\$id} )"
	"Gets an array of link objects associated with category n.":
		"prefix":"get_linkobjects"
		"body":"get_linkobjects( ${1:\\$category}${2:, \\$orderby = 'name'}${3:, \\$limit} )"
	"Gets an array of link objects associated with category $cat_name.":
		"prefix":"get_linkobjectsbyname"
		"body":"get_linkobjectsbyname( ${1:\\$cat_name = 'noname'}${2:, \\$orderby = 'name'}${3:, \\$limit = -1} )"
	"Legacy function that retrieved the value of a link's link_rating field.":
		"prefix":"get_linkrating"
		"body":"get_linkrating( ${1:\\$link} )"
	"Gets the links associated with category by id.":
		"prefix":"get_links"
		"body":"get_links( ${1:\\$category = -1}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$between = ' '}${5:, \\$show_images = true}${6:, \\$orderby = 'name'}${7:, \\$show_description = true}${8:, \\$show_rating = false}${9:, \\$limit = -1}${10:, \\$show_updated = 1}${11:, \\$echo = true} )"
	"Output entire list of links by category.":
		"prefix":"get_links_list"
		"body":"get_links_list( ${1:\\$order = 'name'} )"
	"Gets the links associated with category n and display rating stars/chars.":
		"prefix":"get_links_withrating"
		"body":"get_links_withrating( ${1:\\$category = -1}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$between = ''}${5:, \\$show_images = true}${6:, \\$orderby = 'id'}${7:, \\$show_description = true}${8:, \\$limit = -1}${9:, \\$show_updated} )"
	"Gets the links associated with category $cat_name.":
		"prefix":"get_linksbyname"
		"body":"get_linksbyname( ${1:\\$cat_name = 'noname'}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$between = ''}${5:, \\$show_images = true}${6:, \\$orderby = 'id'}${7:, \\$show_description = true}${8:, \\$show_rating = false}${9:, \\$limit = -1}${10:, \\$show_updated} )"
	"Gets the links associated with category 'cat_name' and display rating stars/chars.":
		"prefix":"get_linksbyname_withrating"
		"body":"get_linksbyname_withrating( ${1:\\$cat_name = 'noname'}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$between = ''}${5:, \\$show_images = true}${6:, \\$orderby = 'id'}${7:, \\$show_description = true}${8:, \\$limit = -1}${9:, \\$show_updated} )"
	"Retrieves the current locale.":
		"prefix":"get_locale"
		"body":"get_locale()"
	"Retrieves the localized stylesheet URI.":
		"prefix":"get_locale_stylesheet_uri"
		"body":"get_locale_stylesheet_uri()"
	"Get the main network ID.":
		"prefix":"get_main_network_id"
		"body":"get_main_network_id()"
	"Check the content blob for an audio, video, object, embed, or iframe tags.":
		"prefix":"get_media_embedded_in_content"
		"body":"get_media_embedded_in_content( ${1:\\$content}${2:, \\$types = null} )"
	"Retrieve HTML form for modifying the image attachment.":
		"prefix":"get_media_item"
		"body":"get_media_item( ${1:\\$attachment_id}${2:, \\$args = null} )"
	"Retrieve HTML for media items of post gallery.":
		"prefix":"get_media_items"
		"body":"get_media_items( ${1:\\$post_id}${2:, \\$errors} )"
	"Get a list of previously defined keys.":
		"prefix":"get_meta_keys"
		"body":"get_meta_keys()"
	"Given a meta query, generates SQL clauses to be appended to a main query.":
		"prefix":"get_meta_sql"
		"body":"get_meta_sql( ${1:\\$meta_query}${2:, \\$type}${3:, \\$primary_table}${4:, \\$primary_id_column}${5:, \\$context = null} )"
	"Retrieve metadata for the specified object.":
		"prefix":"get_metadata"
		"body":"get_metadata( ${1:\\$meta_type}${2:, \\$object_id}${3:, \\$meta_key = ''}${4:, \\$single = false} )"
	"Get meta data by meta ID":
		"prefix":"get_metadata_by_mid"
		"body":"get_metadata_by_mid( ${1:\\$meta_type}${2:, \\$meta_id} )"
	"Retrieves the permalink for the month archives with year.":
		"prefix":"get_month_link"
		"body":"get_month_link( ${1:\\$year}${2:, \\$month} )"
	"Deprecated functionality to retrieve a list of the most active sites.":
		"prefix":"get_most_active_blogs"
		"body":"get_most_active_blogs( ${1:\\$num = 10}${2:, \\$display = true} )"
	"Get a user's most recent post.":
		"prefix":"get_most_recent_post_of_user"
		"body":"get_most_recent_post_of_user( ${1:\\$user_id} )"
	"Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data.":
		"prefix":"get_mu_plugins"
		"body":"get_mu_plugins()"
	"Retrieves all registered navigation menu locations and the menus assigned to them.":
		"prefix":"get_nav_menu_locations"
		"body":"get_nav_menu_locations()"
	"Retrieves network data given a network ID or network object.":
		"prefix":"get_network"
		"body":"get_network( ${1:\\$network = null} )"
	"Retrieve the closest matching network for a domain and path.":
		"prefix":"get_network_by_path"
		"body":"get_network_by_path( ${1:\\$domain}${2:, \\$path}${3:, \\$segments = null} )"
	"Retrieve a network's option value based on the option name.":
		"prefix":"get_network_option"
		"body":"get_network_option( ${1:\\$network_id}${2:, \\$option}${3:, \\$default = false} )"
	"Retrieves a list of networks.":
		"prefix":"get_networks"
		"body":"get_networks( ${1:\\$args = array()} )"
	"Retrieves the link to the next comments page.":
		"prefix":"get_next_comments_link"
		"body":"get_next_comments_link( ${1:\\$label = ''}${2:, \\$max_page} )"
	"Retrieves the next post that is adjacent to the current post.":
		"prefix":"get_next_post"
		"body":"get_next_post( ${1:\\$in_same_term = false}${2:, \\$excluded_terms = ''}${3:, \\$taxonomy = 'category'} )"
	"Retrieves the next post link that is adjacent to the current post.":
		"prefix":"get_next_post_link"
		"body":"get_next_post_link( ${1:\\$format = '%link &raquo;'}${2:, \\$link = '%title'}${3:, \\$in_same_term = false}${4:, \\$excluded_terms = ''}${5:, \\$taxonomy = 'category'} )"
	"Retrieves the next posts link.":
		"prefix":"get_next_posts_link"
		"body":"get_next_posts_link( ${1:\\$label = null}${2:, \\$max_page} )"
	"Retrieves the next posts page link.":
		"prefix":"get_next_posts_page_link"
		"body":"get_next_posts_page_link( ${1:\\$max_page} )"
	"Gets all users who are not authors.":
		"prefix":"get_nonauthor_user_ids"
		"body":"get_nonauthor_user_ids()"
	"Retrieve the number of database queries during the WordPress execution.":
		"prefix":"get_num_queries"
		"body":"get_num_queries()"
	"Return the names or objects of the taxonomies which are registered for the requested object or object type, such as
a post object or post type name.":
		"prefix":"get_object_taxonomies"
		"body":"get_object_taxonomies( ${1:\\$object}${2:, \\$output = 'names'} )"
	"Retrieves the taxonomy relationship to the term object id.":
		"prefix":"get_object_term_cache"
		"body":"get_object_term_cache( ${1:\\$id}${2:, \\$taxonomy} )"
	"Retrieve object_ids of valid taxonomy and term.":
		"prefix":"get_objects_in_term"
		"body":"get_objects_in_term( ${1:\\$term_ids}${2:, \\$taxonomies}${3:, \\$args = array()} )"
	"Retrieves the oEmbed endpoint URL for a given permalink.":
		"prefix":"get_oembed_endpoint_url"
		"body":"get_oembed_endpoint_url( ${1:\\$permalink = ''}${2:, \\$format = 'json'} )"
	"Retrieves the oEmbed response data for a given post.":
		"prefix":"get_oembed_response_data"
		"body":"get_oembed_response_data( ${1:\\$post}${2:, \\$width} )"
	"Filters the oEmbed response data to return an iframe embed code.":
		"prefix":"get_oembed_response_data_rich"
		"body":"get_oembed_response_data_rich( ${1:\\$data}${2:, \\$post}${3:, \\$width}${4:, \\$height} )"
	"Retrieves an option value based on an option name.":
		"prefix":"get_option"
		"body":"get_option( ${1:\\$option}${2:, \\$default = false} )"
	"Retrieve drafts from other users.":
		"prefix":"get_others_drafts"
		"body":"get_others_drafts( ${1:\\$user_id} )"
	"Retrieve pending review posts from other users.":
		"prefix":"get_others_pending"
		"body":"get_others_pending( ${1:\\$user_id} )"
	"Retrieves editable posts from other users.":
		"prefix":"get_others_unpublished_posts"
		"body":"get_others_unpublished_posts( ${1:\\$user_id}${2:, \\$type = 'any'} )"
	"Retrieves page data given a page ID or page object.":
		"prefix":"get_page"
		"body":"get_page( ${1:\\$page}${2:, \\$output = OBJECT}${3:, \\$filter = 'raw'} )"
	"Retrieves a page given its path.":
		"prefix":"get_page_by_path"
		"body":"get_page_by_path( ${1:\\$page_path}${2:, \\$output = OBJECT}${3:, \\$post_type = 'page'} )"
	"Retrieve a page given its title.":
		"prefix":"get_page_by_title"
		"body":"get_page_by_title( ${1:\\$page_title}${2:, \\$output = OBJECT}${3:, \\$post_type = 'page'} )"
	"Identify descendants of a given page ID in a list of page objects.":
		"prefix":"get_page_children"
		"body":"get_page_children( ${1:\\$page_id}${2:, \\$pages} )"
	"Order the pages with children under parents in a flat list.":
		"prefix":"get_page_hierarchy"
		"body":"get_page_hierarchy( ${1:\\$pages}${2:, \\$page_id} )"
	"Retrieves the permalink for the current page or page ID.":
		"prefix":"get_page_link"
		"body":"get_page_link( ${1:\\$post = false}${2:, \\$leavename = false}${3:, \\$sample = false} )"
	"Calculate what page number a comment will appear on for comment paging.":
		"prefix":"get_page_of_comment"
		"body":"get_page_of_comment( ${1:\\$comment_ID}${2:, \\$args = array()} )"
	"Retrieve all of the WordPress support page statuses.":
		"prefix":"get_page_statuses"
		"body":"get_page_statuses()"
	"Retrieve path of page template in current or parent template.":
		"prefix":"get_page_template"
		"body":"get_page_template()"
	"Get the specific template name for a given post.":
		"prefix":"get_page_template_slug"
		"body":"get_page_template_slug( ${1:\\$post = null} )"
	"Get the Page Templates available in this theme":
		"prefix":"get_page_templates"
		"body":"get_page_templates( ${1:\\$post = null}${2:, \\$post_type = 'page'} )"
	"Build the URI path for a page.":
		"prefix":"get_page_uri"
		"body":"get_page_uri( ${1:\\$page} )"
	"Retrieve path of paged template in current or parent template.":
		"prefix":"get_paged_template"
		"body":"get_paged_template()"
	"Retrieves the link for a page number.":
		"prefix":"get_pagenum_link"
		"body":"get_pagenum_link( ${1:\\$pagenum = 1}${2:, \\$escape = true} )"
	"Retrieve a list of pages (or hierarchical post type items).":
		"prefix":"get_pages"
		"body":"get_pages( ${1:\\$args = array()} )"
	"Get parent post relational link.":
		"prefix":"get_parent_post_rel_link"
		"body":"get_parent_post_rel_link( ${1:\\$title = '%title'} )"
	"Retrieves the path of a file in the parent theme.":
		"prefix":"get_parent_theme_file_path"
		"body":"get_parent_theme_file_path( ${1:\\$file = ''} )"
	"Retrieves the URL of a file in the parent theme.":
		"prefix":"get_parent_theme_file_uri"
		"body":"get_parent_theme_file_uri( ${1:\\$file = ''} )"
	"Creates, stores, then returns a password reset key for user.":
		"prefix":"get_password_reset_key"
		"body":"get_password_reset_key( ${1:\\$user} )"
	"Get the number of pending comments on a post or posts":
		"prefix":"get_pending_comments_num"
		"body":"get_pending_comments_num( ${1:\\$post_id} )"
	"Retrieves the full permalink for the current post or post ID.":
		"prefix":"get_permalink"
		"body":"get_permalink( ${1:\\$post}${2:, \\$leavename = false} )"
	"Parses the plugin contents to retrieve plugin's metadata.":
		"prefix":"get_plugin_data"
		"body":"get_plugin_data( ${1:\\$plugin_file}${2:, \\$markup = true}${3:, \\$translate = true} )"
	"Get a list of a plugin's files.":
		"prefix":"get_plugin_files"
		"body":"get_plugin_files( ${1:\\$plugin} )"
	"get_plugin_page_hook":
		"prefix":"get_plugin_page_hook"
		"body":"get_plugin_page_hook( ${1:\\$plugin_page}${2:, \\$parent_page} )"
	"get_plugin_page_hookname":
		"prefix":"get_plugin_page_hookname"
		"body":"get_plugin_page_hookname( ${1:\\$plugin_page}${2:, \\$parent_page} )"
	"get_plugin_updates":
		"prefix":"get_plugin_updates"
		"body":"get_plugin_updates()"
	"Check the plugins directory and retrieve all plugin files with plugin data.":
		"prefix":"get_plugins"
		"body":"get_plugins( ${1:\\$plugin_folder = ''} )"
	"Retrieves post data given a post ID or post object.":
		"prefix":"get_post"
		"body":"get_post( ${1:\\$post = null}${2:, \\$output = OBJECT}${3:, \\$filter = 'raw'} )"
	"Retrieve ancestors of a post.":
		"prefix":"get_post_ancestors"
		"body":"get_post_ancestors( ${1:\\$post} )"
	"Retrieves the classes for the post div as an array.":
		"prefix":"get_post_class"
		"body":"get_post_class( ${1:\\$class = ''}${2:, \\$post_id = null} )"
	"Retrieves the permalink for the post comments feed.":
		"prefix":"get_post_comments_feed_link"
		"body":"get_post_comments_feed_link( ${1:\\$post_id}${2:, \\$feed = ''} )"
	"Retrieve post meta fields, based on post ID.":
		"prefix":"get_post_custom"
		"body":"get_post_custom( ${1:\\$post_id} )"
	"Retrieve meta field names for a post.":
		"prefix":"get_post_custom_keys"
		"body":"get_post_custom_keys( ${1:\\$post_id} )"
	"Retrieve values for a custom post field.":
		"prefix":"get_post_custom_values"
		"body":"get_post_custom_values( ${1:\\$key = ''}${2:, \\$post_id} )"
	"Retrieves the embed code for a specific post.":
		"prefix":"get_post_embed_html"
		"body":"get_post_embed_html( ${1:\\$width}${2:, \\$height}${3:, \\$post = null} )"
	"Retrieves the URL to embed a specific post in an iframe.":
		"prefix":"get_post_embed_url"
		"body":"get_post_embed_url( ${1:\\$post = null} )"
	"Retrieve data from a post field based on Post ID.":
		"prefix":"get_post_field"
		"body":"get_post_field( ${1:\\$field}${2:, \\$post = null}${3:, \\$context = 'display'} )"
	"Retrieve the format slug for a post":
		"prefix":"get_post_format"
		"body":"get_post_format( ${1:\\$post = null} )"
	"Returns a link to a post format index.":
		"prefix":"get_post_format_link"
		"body":"get_post_format_link( ${1:\\$format} )"
	"Retrieves an array of post format slugs.":
		"prefix":"get_post_format_slugs"
		"body":"get_post_format_slugs()"
	"Returns a pretty, translated version of a post format slug":
		"prefix":"get_post_format_string"
		"body":"get_post_format_string( ${1:\\$slug} )"
	"Returns an array of post format slugs to their translated and pretty display versions":
		"prefix":"get_post_format_strings"
		"body":"get_post_format_strings()"
	"Retrieves galleries from the passed post's content.":
		"prefix":"get_post_galleries"
		"body":"get_post_galleries( ${1:\\$post}${2:, \\$html = true} )"
	"Retrieve the image srcs from galleries from a post's content, if present":
		"prefix":"get_post_galleries_images"
		"body":"get_post_galleries_images( ${1:\\$post} )"
	"Check a specified post's content for gallery and, if present, return the first":
		"prefix":"get_post_gallery"
		"body":"get_post_gallery( ${1:\\$post}${2:, \\$html = true} )"
	"Checks a post's content for galleries and return the image srcs for the first found gallery":
		"prefix":"get_post_gallery_images"
		"body":"get_post_gallery_images( ${1:\\$post} )"
	"Retrieve post meta field for a post.":
		"prefix":"get_post_meta"
		"body":"get_post_meta( ${1:\\$post_id}${2:, \\$key = ''}${3:, \\$single = false} )"
	"Get post meta data by meta ID.":
		"prefix":"get_post_meta_by_id"
		"body":"get_post_meta_by_id( ${1:\\$mid} )"
	"Retrieve the mime type of an attachment based on the ID.":
		"prefix":"get_post_mime_type"
		"body":"get_post_mime_type( ${1:\\$ID = ''} )"
	"Get default post mime types.":
		"prefix":"get_post_mime_types"
		"body":"get_post_mime_types()"
	"Retrieve the time at which the post was last modifiedre":
		"prefix":"get_post_modified_time"
		"body":"get_post_modified_time( ${1:\\$d = 'U'}${2:, \\$gmt = false}${3:, \\$post = null}${4:, \\$translate = false} )"
	"Retrieves the permalink for a post of a custom post type.":
		"prefix":"get_post_permalink"
		"body":"get_post_permalink( ${1:\\$id}${2:, \\$leavename = false}${3:, \\$sample = false} )"
	"Retrieve HTML content for reply to post link.":
		"prefix":"get_post_reply_link"
		"body":"get_post_reply_link( ${1:\\$args = array()}${2:, \\$post = null} )"
	"Get a list of post statuses.":
		"prefix":"get_post_stati"
		"body":"get_post_stati( ${1:\\$args = array()}${2:, \\$output = 'names'}${3:, \\$operator = 'and'} )"
	"Retrieve the post status based on the Post ID.":
		"prefix":"get_post_status"
		"body":"get_post_status( ${1:\\$ID = ''} )"
	"Retrieve a post status object by name.":
		"prefix":"get_post_status_object"
		"body":"get_post_status_object( ${1:\\$post_status} )"
	"Retrieve all of the WordPress supported post statuses.":
		"prefix":"get_post_statuses"
		"body":"get_post_statuses()"
	"Retrieve all taxonomies of a post with just the names.":
		"prefix":"get_post_taxonomies"
		"body":"get_post_taxonomies( ${1:\\$post} )"
	"Retrieve post thumbnail ID.":
		"prefix":"get_post_thumbnail_id"
		"body":"get_post_thumbnail_id( ${1:\\$post = null} )"
	"Retrieve the time at which the post was written.":
		"prefix":"get_post_time"
		"body":"get_post_time( ${1:\\$d = 'U'}${2:, \\$gmt = false}${3:, \\$post = null}${4:, \\$translate = false} )"
	"Gets an existing post and format it for editing.":
		"prefix":"get_post_to_edit"
		"body":"get_post_to_edit( ${1:\\$id} )"
	"Retrieves the post type of the current post or of a given post.":
		"prefix":"get_post_type"
		"body":"get_post_type( ${1:\\$post = null} )"
	"Retrieves the permalink for a post type archive feed.":
		"prefix":"get_post_type_archive_feed_link"
		"body":"get_post_type_archive_feed_link( ${1:\\$post_type}${2:, \\$feed = ''} )"
	"Retrieves the permalink for a post type archive.":
		"prefix":"get_post_type_archive_link"
		"body":"get_post_type_archive_link( ${1:\\$post_type} )"
	"Retrieve path of post type archive template in current or parent template.":
		"prefix":"get_post_type_archive_template"
		"body":"get_post_type_archive_template()"
	"Build an object with all post type capabilities out of a post type object":
		"prefix":"get_post_type_capabilities"
		"body":"get_post_type_capabilities( ${1:\\$args} )"
	"Builds an object with all post type labels out of a post type object.":
		"prefix":"get_post_type_labels"
		"body":"get_post_type_labels( ${1:\\$post_type_object} )"
	"Retrieves a post type object by name.":
		"prefix":"get_post_type_object"
		"body":"get_post_type_object( ${1:\\$post_type} )"
	"Get a list of all registered post type objects.":
		"prefix":"get_post_types"
		"body":"get_post_types( ${1:\\$args = array()}${2:, \\$output = 'names'}${3:, \\$operator = 'and'} )"
	"Retrieves a list of post type names that support a specific feature.":
		"prefix":"get_post_types_by_support"
		"body":"get_post_types_by_support( ${1:\\$feature}${2:, \\$operator = 'and'} )"
	"Retrieves all post data for a given post.":
		"prefix":"get_postdata"
		"body":"get_postdata( ${1:\\$postid} )"
	"Retrieve list of latest posts or posts matching criteria.":
		"prefix":"get_posts"
		"body":"get_posts( ${1:\\$args = null} )"
	"Retrieve the post SQL based on capability, author, and type.":
		"prefix":"get_posts_by_author_sql"
		"body":"get_posts_by_author_sql( ${1:\\$post_type}${2:, \\$full = true}${3:, \\$post_author = null}${4:, \\$public_only = false} )"
	"Retrieves the post pages link navigation for previous and next pages.":
		"prefix":"get_posts_nav_link"
		"body":"get_posts_nav_link( ${1:\\$args = array()} )"
	"Selects the first update version from the update_core option.":
		"prefix":"get_preferred_from_update_core"
		"body":"get_preferred_from_update_core()"
	"Retrieves the URL used for the post preview.":
		"prefix":"get_preview_post_link"
		"body":"get_preview_post_link( ${1:\\$post = null}${2:, \\$query_args = array()}${3:, \\$preview_link = ''} )"
	"Retrieves the link to the previous comments page.":
		"prefix":"get_previous_comments_link"
		"body":"get_previous_comments_link( ${1:\\$label = ''} )"
	"Retrieves the previous post that is adjacent to the current post.":
		"prefix":"get_previous_post"
		"body":"get_previous_post( ${1:\\$in_same_term = false}${2:, \\$excluded_terms = ''}${3:, \\$taxonomy = 'category'} )"
	"Retrieves the previous post link that is adjacent to the current post.":
		"prefix":"get_previous_post_link"
		"body":"get_previous_post_link( ${1:\\$format = '&laquo; %link'}${2:, \\$link = '%title'}${3:, \\$in_same_term = false}${4:, \\$excluded_terms = ''}${5:, \\$taxonomy = 'category'} )"
	"Retrieves the previous posts link.":
		"prefix":"get_previous_posts_link"
		"body":"get_previous_posts_link( ${1:\\$label = null} )"
	"Retrieves the previous posts page link.":
		"prefix":"get_previous_posts_page_link"
		"body":"get_previous_posts_page_link()"
	"Retrieve the private post SQL based on capability.":
		"prefix":"get_private_posts_cap_sql"
		"body":"get_private_posts_cap_sql( ${1:\\$post_type} )"
	"Retrieve user data based on field.":
		"prefix":"get_profile"
		"body":"get_profile( ${1:\\$field}${2:, \\$user = false} )"
	"Retrieve URLs already pinged for a post.":
		"prefix":"get_pung"
		"body":"get_pung( ${1:\\$post_id} )"
	"Retrieve the currently-queried object.":
		"prefix":"get_queried_object"
		"body":"get_queried_object()"
	"Retrieve ID of the current queried object.":
		"prefix":"get_queried_object_id"
		"body":"get_queried_object_id()"
	"Retrieve path to a template":
		"prefix":"get_query_template"
		"body":"get_query_template( ${1:\\$type}${2:, \\$templates = array()} )"
	"Retrieve variable in the WP_Query class.":
		"prefix":"get_query_var"
		"body":"get_query_var( ${1:\\$var}${2:, \\$default = ''} )"
	"Get random header image url from registered images in theme.":
		"prefix":"get_random_header_image"
		"body":"get_random_header_image()"
	"Get the raw theme root relative to the content directory with no filters applied.":
		"prefix":"get_raw_theme_root"
		"body":"get_raw_theme_root( ${1:\\$stylesheet_or_template}${2:, \\$skip_cache = false} )"
	"Get the real filesystem path to a file to edit within the admin.":
		"prefix":"get_real_file_to_edit"
		"body":"get_real_file_to_edit( ${1:\\$file} )"
	"Retrieves a list of registered meta keys for an object type.":
		"prefix":"get_registered_meta_keys"
		"body":"get_registered_meta_keys( ${1:\\$object_type} )"
	"Retrieves registered metadata for a specified object.":
		"prefix":"get_registered_metadata"
		"body":"get_registered_metadata( ${1:\\$object_type}${2:, \\$object_id}${3:, \\$meta_key = ''} )"
	"Retrieves all registered navigation menu locations in a theme.":
		"prefix":"get_registered_nav_menus"
		"body":"get_registered_nav_menus()"
	"Retrieves an array of registered settings.":
		"prefix":"get_registered_settings"
		"body":"get_registered_settings()"
	"Retrieves the URL to a REST endpoint on a site.":
		"prefix":"get_rest_url"
		"body":"get_rest_url( ${1:\\$blog_id = null}${2:, \\$path = '/'}${3:, \\$scheme = 'rest'} )"
	"Retrieve role object.":
		"prefix":"get_role"
		"body":"get_role( ${1:\\$role} )"
	"Display RSS items in HTML list items.":
		"prefix":"get_rss"
		"body":"get_rss( ${1:\\$url}${2:, \\$num_items = 5} )"
	"Get a sample permalink based off of the post name.":
		"prefix":"get_sample_permalink"
		"body":"get_sample_permalink( ${1:\\$id}${2:, \\$title = null}${3:, \\$name = null} )"
	"Returns the HTML of the sample permalink slug editor.":
		"prefix":"get_sample_permalink_html"
		"body":"get_sample_permalink_html( ${1:\\$id}${2:, \\$new_title = null}${3:, \\$new_slug = null} )"
	"Retrieves the screen icon (no longer used in 3.8+).":
		"prefix":"get_screen_icon"
		"body":"get_screen_icon()"
	"Retrieves the permalink for the search results comments feed.":
		"prefix":"get_search_comments_feed_link"
		"body":"get_search_comments_feed_link( ${1:\\$search_query = ''}${2:, \\$feed = ''} )"
	"Retrieves the permalink for the search results feed.":
		"prefix":"get_search_feed_link"
		"body":"get_search_feed_link( ${1:\\$search_query = ''}${2:, \\$feed = ''} )"
	"Display search form.":
		"prefix":"get_search_form"
		"body":"get_search_form( ${1:\\$echo = true} )"
	"Retrieves the permalink for a search.":
		"prefix":"get_search_link"
		"body":"get_search_link( ${1:\\$query = ''} )"
	"Retrieves the contents of the search WordPress query variable.":
		"prefix":"get_search_query"
		"body":"get_search_query( ${1:\\$escaped = true} )"
	"Retrieve path of search template in current or parent template.":
		"prefix":"get_search_template"
		"body":"get_search_template()"
	"Get value based on option.":
		"prefix":"get_settings"
		"body":"get_settings( ${1:\\$option} )"
	"Fetch settings errors registered by add_settings_error()":
		"prefix":"get_settings_errors"
		"body":"get_settings_errors( ${1:\\$setting = ''}${2:, \\$sanitize = false} )"
	"Retrieve the shortcode attributes regex.":
		"prefix":"get_shortcode_atts_regex"
		"body":"get_shortcode_atts_regex()"
	"Retrieve the shortcode regular expression for searching.":
		"prefix":"get_shortcode_regex"
		"body":"get_shortcode_regex( ${1:\\$tagnames = null} )"
	"Retrieves the Press This bookmarklet link.":
		"prefix":"get_shortcut_link"
		"body":"get_shortcut_link()"
	"Load sidebar template.":
		"prefix":"get_sidebar"
		"body":"get_sidebar( ${1:\\$name = null} )"
	"Retrieve path of single template in current or parent template. Applies to single Posts,
single Attachments, and single custom post types.":
		"prefix":"get_single_template"
		"body":"get_single_template()"
	"Retrieves the path of the singular template in current or parent template.":
		"prefix":"get_singular_template"
		"body":"get_singular_template()"
	"Retrieves site data given a site ID or site object.":
		"prefix":"get_site"
		"body":"get_site( ${1:\\$site = null} )"
	"Deprecated functionality for getting themes network-enabled themes.":
		"prefix":"get_site_allowed_themes"
		"body":"get_site_allowed_themes()"
	"Retrieves the closest matching site object by its domain and path.":
		"prefix":"get_site_by_path"
		"body":"get_site_by_path( ${1:\\$domain}${2:, \\$path}${3:, \\$segments = null} )"
	"Returns the Site Icon URL.":
		"prefix":"get_site_icon_url"
		"body":"get_site_icon_url( ${1:\\$size = 512}${2:, \\$url = ''}${3:, \\$blog_id} )"
	"Retrieve an option value for the current network based on name of option.":
		"prefix":"get_site_option"
		"body":"get_site_option( ${1:\\$option}${2:, \\$default = false}${3:, \\$deprecated = true} )"
	"Get the value of a site transient.":
		"prefix":"get_site_transient"
		"body":"get_site_transient( ${1:\\$transient} )"
	"Retrieves the URL for a given site where WordPress application files
(e.g. wp-blog-header.php or the wp-admin/ folder) are accessible.":
		"prefix":"get_site_url"
		"body":"get_site_url( ${1:\\$blog_id = null}${2:, \\$path = ''}${3:, \\$scheme = null} )"
	"Retrieves a list of sites matching requested arguments.":
		"prefix":"get_sites"
		"body":"get_sites( ${1:\\$args = array()} )"
	"Gets the network's site and user counts.":
		"prefix":"get_sitestats"
		"body":"get_sitestats()"
	"Returns the upload quota for the current blog.":
		"prefix":"get_space_allowed"
		"body":"get_space_allowed()"
	"Returns the space used by the current blog.":
		"prefix":"get_space_used"
		"body":"get_space_used()"
	"Retrieve the description for the HTTP status.":
		"prefix":"get_status_header_desc"
		"body":"get_status_header_desc( ${1:\\$code} )"
	"Retrieve name of the current stylesheet.":
		"prefix":"get_stylesheet"
		"body":"get_stylesheet()"
	"Retrieve stylesheet directory path for current theme.":
		"prefix":"get_stylesheet_directory"
		"body":"get_stylesheet_directory()"
	"Retrieve stylesheet directory URI.":
		"prefix":"get_stylesheet_directory_uri"
		"body":"get_stylesheet_directory_uri()"
	"Retrieves the URI of current theme stylesheet.":
		"prefix":"get_stylesheet_uri"
		"body":"get_stylesheet_uri()"
	"Retrieves a list of reserved site on a sub-directory Multisite install.":
		"prefix":"get_subdirectory_reserved_names"
		"body":"get_subdirectory_reserved_names()"
	"Returns a submit button, with provided text and appropriate class":
		"prefix":"get_submit_button"
		"body":"get_submit_button( ${1:\\$text = ''}${2:, \\$type = 'primary large'}${3:, \\$name = 'submit'}${4:, \\$wrap = true}${5:, \\$other_attributes = ''} )"
	"Retrieve a list of super admins.":
		"prefix":"get_super_admins"
		"body":"get_super_admins()"
	"Retrieve post tag by tag ID or tag object.":
		"prefix":"get_tag"
		"body":"get_tag( ${1:\\$tag}${2:, \\$output = OBJECT}${3:, \\$filter = 'raw'} )"
	"Retrieves the permalink for a tag feed.":
		"prefix":"get_tag_feed_link"
		"body":"get_tag_feed_link( ${1:\\$tag_id}${2:, \\$feed = ''} )"
	"Retrieve the link to the tag.":
		"prefix":"get_tag_link"
		"body":"get_tag_link( ${1:\\$tag} )"
	"Return RegEx body to liberally match an opening HTML tag.":
		"prefix":"get_tag_regex"
		"body":"get_tag_regex( ${1:\\$tag} )"
	"Retrieve path of tag template in current or parent template.":
		"prefix":"get_tag_template"
		"body":"get_tag_template()"
	"Retrieves all post tags.":
		"prefix":"get_tags"
		"body":"get_tags( ${1:\\$args = ''} )"
	"Get comma-separated list of tags available to edit.":
		"prefix":"get_tags_to_edit"
		"body":"get_tags_to_edit( ${1:\\$post_id}${2:, \\$taxonomy = 'post_tag'} )"
	"Given a taxonomy query, generates SQL to be appended to a main query.":
		"prefix":"get_tax_sql"
		"body":"get_tax_sql( ${1:\\$tax_query}${2:, \\$primary_table}${3:, \\$primary_id_column} )"
	"Retrieves a list of registered taxonomy names or objects.":
		"prefix":"get_taxonomies"
		"body":"get_taxonomies( ${1:\\$args = array()}${2:, \\$output = 'names'}${3:, \\$operator = 'and'} )"
	"Retrieves all of the taxonomy names that are registered for attachments.":
		"prefix":"get_taxonomies_for_attachments"
		"body":"get_taxonomies_for_attachments( ${1:\\$output = 'names'} )"
	"Retrieves the taxonomy object of $taxonomy.":
		"prefix":"get_taxonomy"
		"body":"get_taxonomy( ${1:\\$taxonomy} )"
	"Builds an object with all taxonomy labels out of a taxonomy object.":
		"prefix":"get_taxonomy_labels"
		"body":"get_taxonomy_labels( ${1:\\$tax} )"
	"Retrieve path of custom taxonomy term template in current or parent template.":
		"prefix":"get_taxonomy_template"
		"body":"get_taxonomy_template()"
	"Determine a writable directory for temporary files.":
		"prefix":"get_temp_dir"
		"body":"get_temp_dir()"
	"Retrieve name of the current theme.":
		"prefix":"get_template"
		"body":"get_template()"
	"Retrieve current theme directory.":
		"prefix":"get_template_directory"
		"body":"get_template_directory()"
	"Retrieve theme directory URI.":
		"prefix":"get_template_directory_uri"
		"body":"get_template_directory_uri()"
	"Loads a template part into a template.":
		"prefix":"get_template_part"
		"body":"get_template_part( ${1:\\$slug}${2:, \\$name = null} )"
	"Get all Term data from database by Term ID.":
		"prefix":"get_term"
		"body":"get_term( ${1:\\$term}${2:, \\$taxonomy = ''}${3:, \\$output = OBJECT}${4:, \\$filter = 'raw'} )"
	"Get all Term data from database by Term field and data.":
		"prefix":"get_term_by"
		"body":"get_term_by( ${1:\\$field}${2:, \\$value}${3:, \\$taxonomy = ''}${4:, \\$output = OBJECT}${5:, \\$filter = 'raw'} )"
	"Merge all term children into a single array of their IDs.":
		"prefix":"get_term_children"
		"body":"get_term_children( ${1:\\$term_id}${2:, \\$taxonomy} )"
	"Retrieves the feed link for a term.":
		"prefix":"get_term_feed_link"
		"body":"get_term_feed_link( ${1:\\$term_id}${2:, \\$taxonomy = 'category'}${3:, \\$feed = ''} )"
	"Get sanitized Term field.":
		"prefix":"get_term_field"
		"body":"get_term_field( ${1:\\$field}${2:, \\$term}${3:, \\$taxonomy = ''}${4:, \\$context = 'display'} )"
	"Generate a permalink for a taxonomy term archive.":
		"prefix":"get_term_link"
		"body":"get_term_link( ${1:\\$term}${2:, \\$taxonomy = ''} )"
	"Retrieves metadata for a term.":
		"prefix":"get_term_meta"
		"body":"get_term_meta( ${1:\\$term_id}${2:, \\$key = ''}${3:, \\$single = false} )"
	"Retrieve term parents with separator.":
		"prefix":"get_term_parents_list"
		"body":"get_term_parents_list( ${1:\\$term_id}${2:, \\$taxonomy}${3:, \\$args = array()} )"
	"Sanitizes Term for editing.":
		"prefix":"get_term_to_edit"
		"body":"get_term_to_edit( ${1:\\$id}${2:, \\$taxonomy} )"
	"Retrieve the terms in a given taxonomy or list of taxonomies.":
		"prefix":"get_terms"
		"body":"get_terms( ${1:\\$args = array()}${2:, \\$deprecated = ''} )"
	"Get comma-separated list of terms available to edit for the given post ID.":
		"prefix":"get_terms_to_edit"
		"body":"get_terms_to_edit( ${1:\\$post_id}${2:, \\$taxonomy = 'post_tag'} )"
	"Retrieves the description for an author, post type, or term archive.":
		"prefix":"get_the_archive_description"
		"body":"get_the_archive_description()"
	"Retrieve the archive title based on the queried object.":
		"prefix":"get_the_archive_title"
		"body":"get_the_archive_title()"
	"Retrieve HTML content of attachment image with link.":
		"prefix":"get_the_attachment_link"
		"body":"get_the_attachment_link( ${1:\\$id}${2:, \\$fullsize = false}${3:, \\$max_dims = false}${4:, \\$permalink = false} )"
	"Retrieve the author of the current post.":
		"prefix":"get_the_author"
		"body":"get_the_author( ${1:\\$deprecated = ''} )"
	"Retrieve the AIM address of the author of the current post.":
		"prefix":"get_the_author_aim"
		"body":"get_the_author_aim()"
	"Retrieve the description of the author of the current post.":
		"prefix":"get_the_author_description"
		"body":"get_the_author_description()"
	"Retrieve the email of the author of the current post.":
		"prefix":"get_the_author_email"
		"body":"get_the_author_email()"
	"Retrieve the first name of the author of the current post.":
		"prefix":"get_the_author_firstname"
		"body":"get_the_author_firstname()"
	"Retrieve the ICQ number of the author of the current post.":
		"prefix":"get_the_author_icq"
		"body":"get_the_author_icq()"
	"Retrieve the ID of the author of the current post.":
		"prefix":"get_the_author_id"
		"body":"get_the_author_id()"
	"Retrieve the last name of the author of the current post.":
		"prefix":"get_the_author_lastname"
		"body":"get_the_author_lastname()"
	"Retrieve either author's link or author's name.":
		"prefix":"get_the_author_link"
		"body":"get_the_author_link()"
	"Retrieve the login name of the author of the current post.":
		"prefix":"get_the_author_login"
		"body":"get_the_author_login()"
	"Retrieves the requested data of the author of the current post.":
		"prefix":"get_the_author_meta"
		"body":"get_the_author_meta( ${1:\\$field = ''}${2:, \\$user_id = false} )"
	"Retrieve the MSN address of the author of the current post.":
		"prefix":"get_the_author_msn"
		"body":"get_the_author_msn()"
	"Retrieve the nickname of the author of the current post.":
		"prefix":"get_the_author_nickname"
		"body":"get_the_author_nickname()"
	"Retrieve the number of posts by the author of the current post.":
		"prefix":"get_the_author_posts"
		"body":"get_the_author_posts()"
	"Retrieves an HTML link to the author page of the current post's author.":
		"prefix":"get_the_author_posts_link"
		"body":"get_the_author_posts_link()"
	"Retrieve the URL to the home page of the author of the current post.":
		"prefix":"get_the_author_url"
		"body":"get_the_author_url()"
	"Retrieve the Yahoo! IM name of the author of the current post.":
		"prefix":"get_the_author_yim"
		"body":"get_the_author_yim()"
	"Retrieve post categories.":
		"prefix":"get_the_category"
		"body":"get_the_category( ${1:\\$id = false} )"
	"Retrieve category name based on category ID.":
		"prefix":"get_the_category_by_id"
		"body":"get_the_category_by_id( ${1:\\$cat_ID} )"
	"Retrieve category list for a post in either HTML list or custom format.":
		"prefix":"get_the_category_list"
		"body":"get_the_category_list( ${1:\\$separator = ''}${2:, \\$parents = ''}${3:, \\$post_id = false} )"
	"Retrieve all of the post categories, formatted for use in feeds.":
		"prefix":"get_the_category_rss"
		"body":"get_the_category_rss( ${1:\\$type = null} )"
	"Retrieves navigation to next/previous set of comments, when applicable.":
		"prefix":"get_the_comments_navigation"
		"body":"get_the_comments_navigation( ${1:\\$args = array()} )"
	"Retrieves a paginated navigation to next/previous set of comments, when applicable.":
		"prefix":"get_the_comments_pagination"
		"body":"get_the_comments_pagination( ${1:\\$args = array()} )"
	"Retrieve the post content.":
		"prefix":"get_the_content"
		"body":"get_the_content( ${1:\\$more_link_text = null}${2:, \\$strip_teaser = false} )"
	"Retrieve the post content for feeds.":
		"prefix":"get_the_content_feed"
		"body":"get_the_content_feed( ${1:\\$feed_type = null} )"
	"Retrieve the date on which the post was written.":
		"prefix":"get_the_date"
		"body":"get_the_date( ${1:\\$d = ''}${2:, \\$post = null} )"
	"Retrieves the post excerpt.":
		"prefix":"get_the_excerpt"
		"body":"get_the_excerpt( ${1:\\$post = null} )"
	"Creates the generator XML or Comment for RSS, ATOM, etc.":
		"prefix":"get_the_generator"
		"body":"get_the_generator( ${1:\\$type = ''} )"
	"Retrieve the Post Global Unique Identifier (guid).":
		"prefix":"get_the_guid"
		"body":"get_the_guid( ${1:\\$post} )"
	"Retrieve the ID of the current item in the WordPress Loop.":
		"prefix":"get_the_id"
		"body":"get_the_id()"
	"Retrieve the author who last edited the current post.":
		"prefix":"get_the_modified_author"
		"body":"get_the_modified_author()"
	"Retrieve the date on which the post was last modified.":
		"prefix":"get_the_modified_date"
		"body":"get_the_modified_date( ${1:\\$d = ''}${2:, \\$post = null} )"
	"Retrieve the time at which the post was last modified.":
		"prefix":"get_the_modified_time"
		"body":"get_the_modified_time( ${1:\\$d = ''}${2:, \\$post = null} )"
	"Retrieve protected post password form content.":
		"prefix":"get_the_password_form"
		"body":"get_the_password_form( ${1:\\$post} )"
	"Retrieves the full permalink for the current post or post ID":
		"prefix":"get_the_permalink"
		"body":"get_the_permalink( ${1:\\$post}${2:, \\$leavename = false} )"
	"Retrieves the navigation to next/previous post, when applicable.":
		"prefix":"get_the_post_navigation"
		"body":"get_the_post_navigation( ${1:\\$args = array()} )"
	"Retrieve the post thumbnail.":
		"prefix":"get_the_post_thumbnail"
		"body":"get_the_post_thumbnail( ${1:\\$post = null}${2:, \\$size = 'post-thumbnail'}${3:, \\$attr = ''} )"
	"Returns the post thumbnail caption.":
		"prefix":"get_the_post_thumbnail_caption"
		"body":"get_the_post_thumbnail_caption( ${1:\\$post = null} )"
	"Return the post thumbnail URL.":
		"prefix":"get_the_post_thumbnail_url"
		"body":"get_the_post_thumbnail_url( ${1:\\$post = null}${2:, \\$size = 'post-thumbnail'} )"
	"Returns the navigation to next/previous set of posts, when applicable.":
		"prefix":"get_the_posts_navigation"
		"body":"get_the_posts_navigation( ${1:\\$args = array()} )"
	"Retrieves a paginated navigation to next/previous set of posts, when applicable.":
		"prefix":"get_the_posts_pagination"
		"body":"get_the_posts_pagination( ${1:\\$args = array()} )"
	"Retrieve the tags for a post formatted as a string.":
		"prefix":"get_the_tag_list"
		"body":"get_the_tag_list( ${1:\\$before = ''}${2:, \\$sep = ''}${3:, \\$after = ''}${4:, \\$id} )"
	"Retrieve the tags for a post. get_the_tags":
		"prefix":"get_the_tags"
		"body":"get_the_tags( ${1:\\$id} )"
	"Retrieve all taxonomies associated with a post.":
		"prefix":"get_the_taxonomies"
		"body":"get_the_taxonomies( ${1:\\$post}${2:, \\$args = array()} )"
	"Retrieve a post's terms as a list with specified format.":
		"prefix":"get_the_term_list"
		"body":"get_the_term_list( ${1:\\$id}${2:, \\$taxonomy}${3:, \\$before = ''}${4:, \\$sep = ''}${5:, \\$after = ''} )"
	"Retrieve the terms of the taxonomy that are attached to the post.":
		"prefix":"get_the_terms"
		"body":"get_the_terms( ${1:\\$post}${2:, \\$taxonomy} )"
	"Retrieve the time at which the post was written":
		"prefix":"get_the_time"
		"body":"get_the_time( ${1:\\$d = ''}${2:, \\$post = null} )"
	"Retrieve post title.":
		"prefix":"get_the_title"
		"body":"get_the_title( ${1:\\$post} )"
	"Retrieve the current post title for the feed.":
		"prefix":"get_the_title_rss"
		"body":"get_the_title_rss()"
	"Retrieve theme data.":
		"prefix":"get_theme"
		"body":"get_theme( ${1:\\$theme} )"
	"Retrieve theme data from parsed theme file.":
		"prefix":"get_theme_data"
		"body":"get_theme_data( ${1:\\$theme_file} )"
	"Retrieve list of WordPress theme features (aka theme tags)":
		"prefix":"get_theme_feature_list"
		"body":"get_theme_feature_list( ${1:\\$api = true} )"
	"Retrieves the path of a file in the theme.":
		"prefix":"get_theme_file_path"
		"body":"get_theme_file_path( ${1:\\$file = ''} )"
	"Retrieves the URL of a file in the theme.":
		"prefix":"get_theme_file_uri"
		"body":"get_theme_file_uri( ${1:\\$file = ''} )"
	"Retrieve theme modification value for the current theme.":
		"prefix":"get_theme_mod"
		"body":"get_theme_mod( ${1:\\$name}${2:, \\$default = false} )"
	"Retrieve all theme modifications.":
		"prefix":"get_theme_mods"
		"body":"get_theme_mods()"
	"Retrieve path to themes directory.":
		"prefix":"get_theme_root"
		"body":"get_theme_root( ${1:\\$stylesheet_or_template = false} )"
	"Retrieve URI for themes directory.":
		"prefix":"get_theme_root_uri"
		"body":"get_theme_root_uri( ${1:\\$stylesheet_or_template = false}${2:, \\$theme_root = false} )"
	"Retrieve theme roots.":
		"prefix":"get_theme_roots"
		"body":"get_theme_roots()"
	"Expand a theme's starter content configuration using core-provided data.":
		"prefix":"get_theme_starter_content"
		"body":"get_theme_starter_content()"
	"Gets the theme support arguments passed when registering that support":
		"prefix":"get_theme_support"
		"body":"get_theme_support( ${1:\\$feature} )"
	"Retrieve the update link if there is a theme update available.":
		"prefix":"get_theme_update_available"
		"body":"get_theme_update_available( ${1:\\$theme} )"
	"get_theme_updates":
		"prefix":"get_theme_updates"
		"body":"get_theme_updates()"
	"Retrieve list of themes with theme data in theme directory.":
		"prefix":"get_themes"
		"body":"get_themes()"
	"Retrieve URLs that need to be pinged.":
		"prefix":"get_to_ping"
		"body":"get_to_ping( ${1:\\$post_id} )"
	"Retrieve The current post's trackback URL.":
		"prefix":"get_trackback_url"
		"body":"get_trackback_url()"
	"Get the value of a transient.":
		"prefix":"get_transient"
		"body":"get_transient( ${1:\\$transient} )"
	"Return the Translations instance for a text domain.":
		"prefix":"get_translations_for_domain"
		"body":"get_translations_for_domain( ${1:\\$domain} )"
	"Calculated the new dimensions for a downsampled image.":
		"prefix":"get_udims"
		"body":"get_udims( ${1:\\$width}${2:, \\$height} )"
	"get_upload_iframe_src":
		"prefix":"get_upload_iframe_src"
		"body":"get_upload_iframe_src( ${1:\\$type = null}${2:, \\$post_id = null}${3:, \\$tab = null} )"
	"Determines if there is any upload space left in the current blog's quota":
		"prefix":"get_upload_space_available"
		"body":"get_upload_space_available()"
	"Get the header images uploaded for the current theme.":
		"prefix":"get_uploaded_header_images"
		"body":"get_uploaded_header_images()"
	"Extract and return the first URL from passed content.":
		"prefix":"get_url_in_content"
		"body":"get_url_in_content( ${1:\\$content} )"
	"Retrieve user info by a given field":
		"prefix":"get_user_by"
		"body":"get_user_by( ${1:\\$field}${2:, \\$value} )"
	"Retrieve user info by email.":
		"prefix":"get_user_by_email"
		"body":"get_user_by_email( ${1:\\$email} )"
	"The number of active users in your installation.":
		"prefix":"get_user_count"
		"body":"get_user_count( ${1:\\$network_id = null} )"
	"Deprecated functionality to retrieve user information.":
		"prefix":"get_user_details"
		"body":"get_user_details( ${1:\\$username} )"
	"Get a numeric user ID from either an email address or a login.":
		"prefix":"get_user_id_from_string"
		"body":"get_user_id_from_string( ${1:\\$string} )"
	"Retrieves the locale of a user.":
		"prefix":"get_user_locale"
		"body":"get_user_locale( ${1:\\$user_id} )"
	"Retrieve user meta field for a user.":
		"prefix":"get_user_meta"
		"body":"get_user_meta( ${1:\\$user_id}${2:, \\$key = ''}${3:, \\$single = false} )"
	"Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users":
		"prefix":"get_user_metavalues"
		"body":"get_user_metavalues( ${1:\\$ids} )"
	"Retrieve user option that can be either per Site or per Network.":
		"prefix":"get_user_option"
		"body":"get_user_option( ${1:\\$option}${2:, \\$user}${3:, \\$deprecated = ''} )"
	"Retrieve user interface setting value based on setting name.":
		"prefix":"get_user_setting"
		"body":"get_user_setting( ${1:\\$name}${2:, \\$default = false} )"
	"Retrieve user data and filter it.":
		"prefix":"get_user_to_edit"
		"body":"get_user_to_edit( ${1:\\$user_id} )"
	"Retrieve user info by user ID.":
		"prefix":"get_userdata"
		"body":"get_userdata( ${1:\\$user_id} )"
	"Retrieve user info by login name.":
		"prefix":"get_userdatabylogin"
		"body":"get_userdatabylogin( ${1:\\$user_login} )"
	"Retrieve user metadata.":
		"prefix":"get_usermeta"
		"body":"get_usermeta( ${1:\\$user_id}${2:, \\$meta_key = ''} )"
	"Retrieves the number of posts a user has written.":
		"prefix":"get_usernumposts"
		"body":"get_usernumposts( ${1:\\$userid} )"
	"Retrieve list of users matching criteria.":
		"prefix":"get_users"
		"body":"get_users( ${1:\\$args = array()} )"
	"Retrieve the user's drafts.":
		"prefix":"get_users_drafts"
		"body":"get_users_drafts( ${1:\\$user_id} )"
	"Get users for the site.":
		"prefix":"get_users_of_blog"
		"body":"get_users_of_blog( ${1:\\$id = ''} )"
	"Get the week start and end from the datetime or date string from MySQL.":
		"prefix":"get_weekstartend"
		"body":"get_weekstartend( ${1:\\$mysqlstring}${2:, \\$start_of_week = ''} )"
	"Retrieve the blog title for the feed title.":
		"prefix":"get_wp_title_rss"
		"body":"get_wp_title_rss( ${1:\\$deprecated = '&#8211;'} )"
	"Retrieves the permalink for the year archives.":
		"prefix":"get_year_link"
		"body":"get_year_link( ${1:\\$year} )"
	"Maintains a canonical list of terms by syncing terms created for each blog with the global terms table.":
		"prefix":"global_terms"
		"body":"global_terms( ${1:\\$term_id}${2:, \\$deprecated = ''} )"
	"Determine whether global terms are enabled.":
		"prefix":"global_terms_enabled"
		"body":"global_terms_enabled()"
	"Returns whether the server is running Apache with the mod_rewrite module loaded.":
		"prefix":"got_mod_rewrite"
		"body":"got_mod_rewrite()"
	"Returns whether the server supports URL rewriting.":
		"prefix":"got_url_rewrite"
		"body":"got_url_rewrite()"
	"Deprecated functionality to gracefully fail.":
		"prefix":"graceful_fail"
		"body":"graceful_fail()"
	"Grants Super Admin privileges.":
		"prefix":"grant_super_admin"
		"body":"grant_super_admin( ${1:\\$user_id} )"
	"Unused function.":
		"prefix":"gzip_compression"
		"body":"gzip_compression()"
	"Check if any action has been registered for a hook.":
		"prefix":"has_action"
		"body":"has_action( ${1:\\$tag}${2:, \\$function_to_check = false} )"
	"Check if the current post has any of given category.":
		"prefix":"has_category"
		"body":"has_category( ${1:\\$category = ''}${2:, \\$post = null} )"
	"Check whether a custom header is set or not.":
		"prefix":"has_custom_header"
		"body":"has_custom_header()"
	"Determines whether the site has a custom logo.":
		"prefix":"has_custom_logo"
		"body":"has_custom_logo( ${1:\\$blog_id} )"
	"Whether the post has a custom excerpt.":
		"prefix":"has_excerpt"
		"body":"has_excerpt( ${1:\\$post} )"
	"Check if any filter has been registered for a hook.":
		"prefix":"has_filter"
		"body":"has_filter( ${1:\\$tag}${2:, \\$function_to_check = false} )"
	"Check whether a header image is set or not.":
		"prefix":"has_header_image"
		"body":"has_header_image()"
	"Check whether a header video is set or not.":
		"prefix":"has_header_video"
		"body":"has_header_video()"
	"Check if an image size exists.":
		"prefix":"has_image_size"
		"body":"has_image_size( ${1:\\$name} )"
	"Get meta data for the given post ID.":
		"prefix":"has_meta"
		"body":"has_meta( ${1:\\$postid} )"
	"Determines whether a registered nav menu location has a menu assigned to it.":
		"prefix":"has_nav_menu"
		"body":"has_nav_menu( ${1:\\$location} )"
	"Check if a post has any of the given formats, or any format.":
		"prefix":"has_post_format"
		"body":"has_post_format( ${1:\\$format = array()}${2:, \\$post = null} )"
	"Check if post has an image attached.":
		"prefix":"has_post_thumbnail"
		"body":"has_post_thumbnail( ${1:\\$post = null} )"
	"Whether the passed content contains the specified shortcode":
		"prefix":"has_shortcode"
		"body":"has_shortcode( ${1:\\$content}${2:, \\$tag} )"
	"Whether the site has a Site Icon.":
		"prefix":"has_site_icon"
		"body":"has_site_icon( ${1:\\$blog_id} )"
	"Check if the current post has any of given tags.":
		"prefix":"has_tag"
		"body":"has_tag( ${1:\\$tag = ''}${2:, \\$post = null} )"
	"Check if the current post has any of given terms.":
		"prefix":"has_term"
		"body":"has_term( ${1:\\$term = ''}${2:, \\$taxonomy = ''}${3:, \\$post = null} )"
	"Get all meta data, including meta IDs, for the given term ID.":
		"prefix":"has_term_meta"
		"body":"has_term_meta( ${1:\\$term_id} )"
	"Timing attack safe string comparison":
		"prefix":"hash_equals"
		"body":"hash_equals( ${1:\\$a}${2:, \\$b} )"
	"Whether there are comments to loop over.":
		"prefix":"have_comments"
		"body":"have_comments()"
	"Whether current WordPress query has results to loop over.":
		"prefix":"have_posts"
		"body":"have_posts()"
	"Display header image URL.":
		"prefix":"header_image"
		"body":"header_image()"
	"Displays the custom header text color in 3- or 6-digit hexadecimal form (minus the hash symbol).":
		"prefix":"header_textcolor"
		"body":"header_textcolor()"
	"Autosave with heartbeat":
		"prefix":"heartbeat_autosave"
		"body":"heartbeat_autosave( ${1:\\$response}${2:, \\$data} )"
	"Retrieves the URL for the current site where the front end is accessible.":
		"prefix":"home_url"
		"body":"home_url( ${1:\\$path = ''}${2:, \\$scheme = null} )"
	"Display the HTML type based on the blog setting.":
		"prefix":"html_type_rss"
		"body":"html_type_rss()"
	"Convert entities, while preserving already-encoded entities.":
		"prefix":"htmlentities2"
		"body":"htmlentities2( ${1:\\$myHTML} )"
	"Determines the difference between two timestamps.":
		"prefix":"human_time_diff"
		"body":"human_time_diff( ${1:\\$from}${2:, \\$to = ''} )"
	"Generic Iframe footer for use with Thickbox":
		"prefix":"iframe_footer"
		"body":"iframe_footer()"
	"Generic Iframe header for use with Thickbox":
		"prefix":"iframe_header"
		"body":"iframe_header( ${1:\\$title = ''}${2:, \\$deprecated = false} )"
	"Add WordPress rewrite rule to the IIS 7+ configuration file.":
		"prefix":"iis7_add_rewrite_rule"
		"body":"iis7_add_rewrite_rule( ${1:\\$filename}${2:, \\$rewrite_rule} )"
	"Delete WordPress rewrite rule from web.config file if it exists there":
		"prefix":"iis7_delete_rewrite_rule"
		"body":"iis7_delete_rewrite_rule( ${1:\\$filename} )"
	"Check if rewrite rule for WordPress already exists in the IIS 7+ configuration file":
		"prefix":"iis7_rewrite_rule_exists"
		"body":"iis7_rewrite_rule_exists( ${1:\\$filename} )"
	"Updates the IIS web.config file with the current rules if it is writable.":
		"prefix":"iis7_save_url_rewrite_rules"
		"body":"iis7_save_url_rewrite_rules()"
	"Check if IIS 7+ supports pretty permalinks.":
		"prefix":"iis7_supports_permalinks"
		"body":"iis7_supports_permalinks()"
	"Adds image shortcode with caption to editor":
		"prefix":"image_add_caption"
		"body":"image_add_caption( ${1:\\$html}${2:, \\$id}${3:, \\$caption}${4:, \\$title}${5:, \\$align}${6:, \\$url}${7:, \\$size}${8:, \\$alt = ''} )"
	"Retrieve HTML for the image alignment radio buttons with the specified one checked.":
		"prefix":"image_align_input_fields"
		"body":"image_align_input_fields( ${1:\\$post}${2:, \\$checked = ''} )"
	"Retrieves the image attachment fields to edit form fields.":
		"prefix":"image_attachment_fields_to_edit"
		"body":"image_attachment_fields_to_edit( ${1:\\$form_fields}${2:, \\$post} )"
	"Filters input from media_upload_form_handler() and assigns a default
post_title from the file name if none supplied.":
		"prefix":"image_attachment_fields_to_save"
		"body":"image_attachment_fields_to_save( ${1:\\$post}${2:, \\$attachment} )"
	"Scale down the default size of an image.":
		"prefix":"image_constrain_size_for_editor"
		"body":"image_constrain_size_for_editor( ${1:\\$width}${2:, \\$height}${3:, \\$size = 'medium'}${4:, \\$context = null} )"
	"Scale an image to fit a particular size (such as 'thumb' or 'medium').":
		"prefix":"image_downsize"
		"body":"image_downsize( ${1:\\$id}${2:, \\$size = 'medium'} )"
	"Performs group of changes on Editor specified.":
		"prefix":"image_edit_apply_changes"
		"body":"image_edit_apply_changes( ${1:\\$image}${2:, \\$changes} )"
	"Retrieves the image's intermediate size (resized) path, width, and height.":
		"prefix":"image_get_intermediate_size"
		"body":"image_get_intermediate_size( ${1:\\$post_id}${2:, \\$size = 'thumbnail'} )"
	"Retrieve width and height attributes using given width and height values.":
		"prefix":"image_hwstring"
		"body":"image_hwstring( ${1:\\$width}${2:, \\$height} )"
	"Retrieve HTML for the Link URL buttons with the default link type as specified.":
		"prefix":"image_link_input_fields"
		"body":"image_link_input_fields( ${1:\\$post}${2:, \\$url_type = ''} )"
	"Resizes an image to make a thumbnail or intermediate size.":
		"prefix":"image_make_intermediate_size"
		"body":"image_make_intermediate_size( ${1:\\$file}${2:, \\$width}${3:, \\$height}${4:, \\$crop = false} )"
	"Retrieves the media element HTML to send to the editor.":
		"prefix":"image_media_send_to_editor"
		"body":"image_media_send_to_editor( ${1:\\$html}${2:, \\$attachment_id}${3:, \\$attachment} )"
	"Scale down an image to fit a particular size and save a new copy of the image.":
		"prefix":"image_resize"
		"body":"image_resize( ${1:\\$file}${2:, \\$max_w}${3:, \\$max_h}${4:, \\$crop = false}${5:, \\$suffix = null}${6:, \\$dest_path = null}${7:, \\$jpeg_quality = 90} )"
	"Retrieves calculated resize dimensions for use in WP_Image_Editor.":
		"prefix":"image_resize_dimensions"
		"body":"image_resize_dimensions( ${1:\\$orig_w}${2:, \\$orig_h}${3:, \\$dest_w}${4:, \\$dest_h}${5:, \\$crop = false} )"
	"Retrieve HTML for the size radio buttons with the specified one checked.":
		"prefix":"image_size_input_fields"
		"body":"image_size_input_fields( ${1:\\$post}${2:, \\$check = ''} )"
	"Builds the Caption shortcode output.":
		"prefix":"img_caption_shortcode"
		"body":"img_caption_shortcode( ${1:\\$attr}${2:, \\$content = null} )"
	"Check if the current post is within any of the given categories.":
		"prefix":"in_category"
		"body":"in_category( ${1:\\$category}${2:, \\$post = null} )"
	"Whether the caller is in the Loop.":
		"prefix":"in_the_loop"
		"body":"in_the_loop()"
	"Retrieves the URL to the includes directory.":
		"prefix":"includes_url"
		"body":"includes_url( ${1:\\$path = ''}${2:, \\$scheme = null} )"
	"Display relational link for the site index.":
		"prefix":"index_rel_link"
		"body":"index_rel_link()"
	"Store basic site info in the blogs table.":
		"prefix":"insert_blog"
		"body":"insert_blog( ${1:\\$domain}${2:, \\$path}${3:, \\$site_id} )"
	"Inserts an array of strings into a file (.htaccess ), placing it between
BEGIN and END markers.":
		"prefix":"insert_with_markers"
		"body":"insert_with_markers( ${1:\\$filename}${2:, \\$marker}${3:, \\$insertion} )"
	"Install an empty blog.":
		"prefix":"install_blog"
		"body":"install_blog( ${1:\\$blog_id}${2:, \\$blog_title = ''} )"
	"Set blog defaults.":
		"prefix":"install_blog_defaults"
		"body":"install_blog_defaults( ${1:\\$blog_id}${2:, \\$user_id} )"
	"install_dashboard":
		"prefix":"install_dashboard"
		"body":"install_dashboard()"
	"Install global terms.":
		"prefix":"install_global_terms"
		"body":"install_global_terms()"
	"Install Network.":
		"prefix":"install_network"
		"body":"install_network()"
	"Display plugin information in dialog box form.":
		"prefix":"install_plugin_information"
		"body":"install_plugin_information()"
	"Determine the status we can perform on a plugin.":
		"prefix":"install_plugin_install_status"
		"body":"install_plugin_install_status( ${1:\\$api}${2:, \\$loop = false} )"
	"Show a username form for the favorites page":
		"prefix":"install_plugins_favorites_form"
		"body":"install_plugins_favorites_form()"
	"Upload from zip":
		"prefix":"install_plugins_upload"
		"body":"install_plugins_upload()"
	"Retrieve popular WordPress plugin tags.":
		"prefix":"install_popular_tags"
		"body":"install_popular_tags( ${1:\\$args = array()} )"
	"Displays a search form for searching plugins.":
		"prefix":"install_search_form"
		"body":"install_search_form( ${1:\\$deprecated = true} )"
	"Display theme information in dialog box form.":
		"prefix":"install_theme_information"
		"body":"install_theme_information()"
	"Display search form for searching themes.":
		"prefix":"install_theme_search_form"
		"body":"install_theme_search_form( ${1:\\$type_selector = true} )"
	"Display tags filter for themes.":
		"prefix":"install_themes_dashboard"
		"body":"install_themes_dashboard()"
	"Retrieve list of WordPress theme features (aka theme tags).":
		"prefix":"install_themes_feature_list"
		"body":"install_themes_feature_list()"
	"install_themes_upload":
		"prefix":"install_themes_upload"
		"body":"install_themes_upload()"
	"Is the query a 404 (returns no results)?":
		"prefix":"is_404"
		"body":"is_404()"
	"Whether a sidebar is in use.":
		"prefix":"is_active_sidebar"
		"body":"is_active_sidebar( ${1:\\$index} )"
	"Whether widget is displayed on the front end.":
		"prefix":"is_active_widget"
		"body":"is_active_widget( ${1:\\$callback = false}${2:, \\$widget_id = false}${3:, \\$id_base = false}${4:, \\$skip_inactive = true} )"
	"Whether the current request is for an administrative interface page.":
		"prefix":"is_admin"
		"body":"is_admin()"
	"Determine whether the admin bar should be showing.":
		"prefix":"is_admin_bar_showing"
		"body":"is_admin_bar_showing()"
	"Determines if the HTTP origin is an authorized one.":
		"prefix":"is_allowed_http_origin"
		"body":"is_allowed_http_origin( ${1:\\$origin = null} )"
	"Is the query for an existing archive page?":
		"prefix":"is_archive"
		"body":"is_archive()"
	"Check if a particular blog is archived.":
		"prefix":"is_archived"
		"body":"is_archived( ${1:\\$id} )"
	"Is the query for an existing attachment page?":
		"prefix":"is_attachment"
		"body":"is_attachment( ${1:\\$attachment = ''} )"
	"Is the query for an existing author archive page?":
		"prefix":"is_author"
		"body":"is_author( ${1:\\$author = ''} )"
	"Whether the current request is for a site's admininstrative interface.":
		"prefix":"is_blog_admin"
		"body":"is_blog_admin()"
	"Test whether WordPress is already installed.":
		"prefix":"is_blog_installed"
		"body":"is_blog_installed()"
	"Checks if the current user belong to a given site.":
		"prefix":"is_blog_user"
		"body":"is_blog_user( ${1:\\$blog_id} )"
	"Is the query for an existing category archive page?":
		"prefix":"is_category"
		"body":"is_category( ${1:\\$category = ''} )"
	"Whether a child theme is in use.":
		"prefix":"is_child_theme"
		"body":"is_child_theme()"
	"is_client_error":
		"prefix":"is_client_error"
		"body":"is_client_error()"
	"Is the query for a comments feed?":
		"prefix":"is_comment_feed"
		"body":"is_comment_feed()"
	"Whether the current URL is within the comments popup window.":
		"prefix":"is_comments_popup"
		"body":"is_comments_popup()"
	"Whether the site is being previewed in the Customizer.":
		"prefix":"is_customize_preview"
		"body":"is_customize_preview()"
	"Is the query for an existing date archive?":
		"prefix":"is_date"
		"body":"is_date()"
	"Is the query for an existing day archive?":
		"prefix":"is_day"
		"body":"is_day()"
	"Whether the dynamic sidebar is enabled and used by theme.":
		"prefix":"is_dynamic_sidebar"
		"body":"is_dynamic_sidebar()"
	"Verifies that an email is valid.":
		"prefix":"is_email"
		"body":"is_email( ${1:\\$email}${2:, \\$deprecated = false} )"
	"Checks an email address against a list of banned domains.":
		"prefix":"is_email_address_unsafe"
		"body":"is_email_address_unsafe( ${1:\\$user_email} )"
	"Is the query for an embedded post?":
		"prefix":"is_embed"
		"body":"is_embed()"
	"is_error":
		"prefix":"is_error"
		"body":"is_error()"
	"Is the query for a feed?":
		"prefix":"is_feed"
		"body":"is_feed( ${1:\\$feeds = ''} )"
	"Is the query for the front page of the site?":
		"prefix":"is_front_page"
		"body":"is_front_page()"
	"Checks whether the custom header video is eligible to show on the current page.":
		"prefix":"is_header_video_active"
		"body":"is_header_video_active()"
	"Determines if the query is for the blog homepage.":
		"prefix":"is_home"
		"body":"is_home()"
	"is_info":
		"prefix":"is_info"
		"body":"is_info()"
	"Is the server running earlier than 1.5.0 version of lighttpd?":
		"prefix":"is_lighttpd_before_150"
		"body":"is_lighttpd_before_150()"
	"Check if the attachment URI is local one and is really an attachment.":
		"prefix":"is_local_attachment"
		"body":"is_local_attachment( ${1:\\$url} )"
	"Whether switch_to_locale() is in effect.":
		"prefix":"is_locale_switched"
		"body":"is_locale_switched()"
	"Deprecated functionality to determin if the current site is the main site.":
		"prefix":"is_main_blog"
		"body":"is_main_blog()"
	"Determine whether a network is the main network of the Multisite install.":
		"prefix":"is_main_network"
		"body":"is_main_network( ${1:\\$network_id = null} )"
	"Is the query the main query?":
		"prefix":"is_main_query"
		"body":"is_main_query()"
	"Determine whether a site is the main site of the current network.":
		"prefix":"is_main_site"
		"body":"is_main_site( ${1:\\$site_id = null} )"
	"Is the query for an existing month archive?":
		"prefix":"is_month"
		"body":"is_month()"
	"Does this site have more than one author":
		"prefix":"is_multi_author"
		"body":"is_multi_author()"
	"If Multisite is enabled.":
		"prefix":"is_multisite"
		"body":"is_multisite()"
	"Check if the given ID is a navigation menu.":
		"prefix":"is_nav_menu"
		"body":"is_nav_menu( ${1:\\$menu} )"
	"Determines whether the given ID is a nav menu item.":
		"prefix":"is_nav_menu_item"
		"body":"is_nav_menu_item( ${1:\\$menu_item_id} )"
	"Whether the current request is for the network administrative interface.":
		"prefix":"is_network_admin"
		"body":"is_network_admin()"
	"Checks for &quot;Network: true&quot; in the plugin header to see if this should
be activated only as a network wide plugin. The plugin would also work
when Multisite is not enabled.":
		"prefix":"is_network_only_plugin"
		"body":"is_network_only_plugin( ${1:\\$plugin} )"
	"Whether the publish date of the current post in the loop is different from the
publish date of the previous post in the loop.":
		"prefix":"is_new_day"
		"body":"is_new_day()"
	"Determine if the given object type is associated with the given taxonomy.":
		"prefix":"is_object_in_taxonomy"
		"body":"is_object_in_taxonomy( ${1:\\$object_type}${2:, \\$taxonomy} )"
	"Determine if the given object is associated with any of the given terms.":
		"prefix":"is_object_in_term"
		"body":"is_object_in_term( ${1:\\$object_id}${2:, \\$taxonomy}${3:, \\$terms = null} )"
	"Is the query for an existing single page?":
		"prefix":"is_page"
		"body":"is_page( ${1:\\$page = ''} )"
	"Whether currently in a page template.":
		"prefix":"is_page_template"
		"body":"is_page_template( ${1:\\$template = ''} )"
	"Is the query for paged result and not for the first page?":
		"prefix":"is_paged"
		"body":"is_paged()"
	"Check whether a plugin is active.":
		"prefix":"is_plugin_active"
		"body":"is_plugin_active( ${1:\\$plugin} )"
	"Check whether the plugin is active for the entire network.":
		"prefix":"is_plugin_active_for_network"
		"body":"is_plugin_active_for_network( ${1:\\$plugin} )"
	"Check whether the plugin is inactive.":
		"prefix":"is_plugin_inactive"
		"body":"is_plugin_inactive( ${1:\\$plugin} )"
	"Is the current admin page generated by a plugin?":
		"prefix":"is_plugin_page"
		"body":"is_plugin_page()"
	"Is the query for an existing post type archive page?":
		"prefix":"is_post_type_archive"
		"body":"is_post_type_archive( ${1:\\$post_types = ''} )"
	"Whether the post type is hierarchical.":
		"prefix":"is_post_type_hierarchical"
		"body":"is_post_type_hierarchical( ${1:\\$post_type} )"
	"Determines whether a post type is considered &quot;viewable&quot;.":
		"prefix":"is_post_type_viewable"
		"body":"is_post_type_viewable( ${1:\\$post_type} )"
	"Is the query for a post or page preview?":
		"prefix":"is_preview"
		"body":"is_preview()"
	"Determine whether a meta key is protected.":
		"prefix":"is_protected_meta"
		"body":"is_protected_meta( ${1:\\$meta_key}${2:, \\$meta_type = null} )"
	"Check if random header image is in use.":
		"prefix":"is_random_header_image"
		"body":"is_random_header_image( ${1:\\$type = 'any'} )"
	"is_redirect":
		"prefix":"is_redirect"
		"body":"is_redirect()"
	"Checks if a sidebar is registered.":
		"prefix":"is_registered_sidebar"
		"body":"is_registered_sidebar( ${1:\\$sidebar_id} )"
	"Is the query for the robots file?":
		"prefix":"is_robots"
		"body":"is_robots()"
	"Checks if current locale is RTL.":
		"prefix":"is_rtl"
		"body":"is_rtl()"
	"Is the query for a search?":
		"prefix":"is_search"
		"body":"is_search()"
	"Check value to find if it was serialized.":
		"prefix":"is_serialized"
		"body":"is_serialized( ${1:\\$data}${2:, \\$strict = true} )"
	"Check whether serialized data is of string type.":
		"prefix":"is_serialized_string"
		"body":"is_serialized_string( ${1:\\$data} )"
	"is_server_error":
		"prefix":"is_server_error"
		"body":"is_server_error()"
	"Is the query for an existing single post?":
		"prefix":"is_single"
		"body":"is_single( ${1:\\$post = ''} )"
	"Is the query for an existing single post of any post type (post, attachment, page,
custom post types)?":
		"prefix":"is_singular"
		"body":"is_singular( ${1:\\$post_types = ''} )"
	"Determine if user is a site admin.":
		"prefix":"is_site_admin"
		"body":"is_site_admin( ${1:\\$user_login = ''} )"
	"Determines if SSL is used.":
		"prefix":"is_ssl"
		"body":"is_ssl()"
	"Check if post is sticky.":
		"prefix":"is_sticky"
		"body":"is_sticky( ${1:\\$post_id} )"
	"Whether a subdomain configuration is enabled.":
		"prefix":"is_subdomain_install"
		"body":"is_subdomain_install()"
	"is_success":
		"prefix":"is_success"
		"body":"is_success()"
	"Determine if user is a site admin":
		"prefix":"is_super_admin"
		"body":"is_super_admin( ${1:\\$user_id = false} )"
	"Is the query for an existing tag archive page?":
		"prefix":"is_tag"
		"body":"is_tag( ${1:\\$tag = ''} )"
	"Is the query for an existing custom taxonomy archive page?":
		"prefix":"is_tax"
		"body":"is_tax( ${1:\\$taxonomy = ''}${2:, \\$term = ''} )"
	"Checks that the taxonomy name exists.":
		"prefix":"is_taxonomy"
		"body":"is_taxonomy( ${1:\\$taxonomy} )"
	"Whether the taxonomy object is hierarchical.":
		"prefix":"is_taxonomy_hierarchical"
		"body":"is_taxonomy_hierarchical( ${1:\\$taxonomy} )"
	"Check if Term exists.":
		"prefix":"is_term"
		"body":"is_term( ${1:\\$term}${2:, \\$taxonomy = ''}${3:, \\$parent} )"
	"Whether there are translations for the text domain.":
		"prefix":"is_textdomain_loaded"
		"body":"is_textdomain_loaded( ${1:\\$domain} )"
	"Is the query for a specific time?":
		"prefix":"is_time"
		"body":"is_time()"
	"Is the query for a trackback endpoint call?":
		"prefix":"is_trackback"
		"body":"is_trackback()"
	"Whether the plugin can be uninstalled.":
		"prefix":"is_uninstallable_plugin"
		"body":"is_uninstallable_plugin( ${1:\\$plugin} )"
	"Determines if there is any upload space left in the current blog's quota.":
		"prefix":"is_upload_space_available"
		"body":"is_upload_space_available()"
	"Whether the current request is for a user admin screen.":
		"prefix":"is_user_admin"
		"body":"is_user_admin()"
	"Checks if the current visitor is a logged in user.":
		"prefix":"is_user_logged_in"
		"body":"is_user_logged_in()"
	"Find out whether a user is a member of a given blog.":
		"prefix":"is_user_member_of_blog"
		"body":"is_user_member_of_blog( ${1:\\$user_id}${2:, \\$blog_id} )"
	"Check whether a usermeta key has to do with the current blog.":
		"prefix":"is_user_option_local"
		"body":"is_user_option_local( ${1:\\$key}${2:, \\$user_id}${3:, \\$blog_id} )"
	"Check to see whether a user is marked as a spammer, based on user login.":
		"prefix":"is_user_spammy"
		"body":"is_user_spammy( ${1:\\$user = null} )"
	"Check whether variable is a WordPress Error.":
		"prefix":"is_wp_error"
		"body":"is_wp_error( ${1:\\$thing} )"
	"Deprecated functionality for determining if the current plugin is network-only.":
		"prefix":"is_wpmu_sitewide_plugin"
		"body":"is_wpmu_sitewide_plugin()"
	"Is the query for an existing year archive?":
		"prefix":"is_year"
		"body":"is_year()"
	"Computes an offset in seconds from an iso8601 timezone.":
		"prefix":"iso8601_timezone_to_offset"
		"body":"iso8601_timezone_to_offset( ${1:\\$timezone} )"
	"Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt].":
		"prefix":"iso8601_to_datetime"
		"body":"iso8601_to_datetime( ${1:\\$date_string}${2:, \\$timezone = 'user'} )"
	"Escape single quotes, specialchar double quotes, and fix line endings.":
		"prefix":"js_escape"
		"body":"js_escape( ${1:\\$text} )"
	"Retrieves the error string of the last json_encode() or json_decode() call.":
		"prefix":"json_last_error_msg"
		"body":"json_last_error_msg()"
	"Sets up most of the Kses filters for input form content.":
		"prefix":"kses_init"
		"body":"kses_init()"
	"Adds all Kses input form content filters.":
		"prefix":"kses_init_filters"
		"body":"kses_init_filters()"
	"Removes all Kses input form content filters.":
		"prefix":"kses_remove_filters"
		"body":"kses_remove_filters()"
	"Displays the language attributes for the html tag.":
		"prefix":"language_attributes"
		"body":"language_attributes( ${1:\\$doctype = 'html'} )"
	"Formerly used to escape strings before searching the DB. It was poorly documented and never worked as described.":
		"prefix":"like_escape"
		"body":"like_escape( ${1:\\$text} )"
	"Display advanced link options form fields.":
		"prefix":"link_advanced_meta_box"
		"body":"link_advanced_meta_box( ${1:\\$link} )"
	"Display link categories form fields.":
		"prefix":"link_categories_meta_box"
		"body":"link_categories_meta_box( ${1:\\$link} )"
	"Print list of pages based on arguments.":
		"prefix":"link_pages"
		"body":"link_pages( ${1:\\$before = ''}${2:, \\$after = ''}${3:, \\$next_or_number = 'number'}${4:, \\$nextpagelink = 'next page'}${5:, \\$previouspagelink = 'previous page'}${6:, \\$pagelink = '%'}${7:, \\$more_file = ''} )"
	"Display link create form fields.":
		"prefix":"link_submit_meta_box"
		"body":"link_submit_meta_box( ${1:\\$link} )"
	"Display form fields for changing link target.":
		"prefix":"link_target_meta_box"
		"body":"link_target_meta_box( ${1:\\$link} )"
	"Display xfn form fields.":
		"prefix":"link_xfn_meta_box"
		"body":"link_xfn_meta_box( ${1:\\$link} )"
	"Add a Base url to relative links in passed content.":
		"prefix":"links_add_base_url"
		"body":"links_add_base_url( ${1:\\$content}${2:, \\$base}${3:, \\$attrs = array('src', 'href')} )"
	"Adds a Target attribute to all links in passed content.":
		"prefix":"links_add_target"
		"body":"links_add_target( ${1:\\$content}${2:, \\$target = '_blank'}${3:, \\$tags = array('a')} )"
	"Show the link to the links popup and the number of links.":
		"prefix":"links_popup_script"
		"body":"links_popup_script( ${1:\\$text = 'Links'}${2:, \\$width = 400}${3:, \\$height = 400}${4:, \\$file = 'links.all.php'}${5:, \\$count = true} )"
	"Lists authors.":
		"prefix":"list_authors"
		"body":"list_authors( ${1:\\$optioncount = false}${2:, \\$exclude_admin = true}${3:, \\$show_fullname = false}${4:, \\$hide_empty = true}${5:, \\$feed = ''}${6:, \\$feed_image = ''} )"
	"Lists categories. list_cats":
		"prefix":"list_cats"
		"body":"list_cats( ${1:\\$optionall = 1}${2:, \\$all = 'All'}${3:, \\$sort_column = 'ID'}${4:, \\$sort_order = 'asc'}${5:, \\$file = ''}${6:, \\$list = true}${7:, \\$optiondates}${8:, \\$optioncount}${9:, \\$hide_empty = 1}${10:, \\$use_desc_for_title = 1}${11:, \\$children = false}${12:, \\$child_of}${13:, \\$categories}${14:, \\$recurse}${15:, \\$feed = ''}${16:, \\$feed_image = ''}${17:, \\$exclude = ''}${18:, \\$hierarchical = false} )"
	"list_core_update":
		"prefix":"list_core_update"
		"body":"list_core_update( ${1:\\$update} )"
	"Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep.":
		"prefix":"list_files"
		"body":"list_files( ${1:\\$folder = ''}${2:, \\$levels = 100} )"
	"Outputs a post's public meta data in the Custom Fields meta box.":
		"prefix":"list_meta"
		"body":"list_meta( ${1:\\$meta} )"
	"list_plugin_updates":
		"prefix":"list_plugin_updates"
		"body":"list_plugin_updates()"
	"list_theme_updates":
		"prefix":"list_theme_updates"
		"body":"list_theme_updates()"
	"list_translation_updates":
		"prefix":"list_translation_updates"
		"body":"list_translation_updates()"
	"Load the child themes translated strings.":
		"prefix":"load_child_theme_textdomain"
		"body":"load_child_theme_textdomain( ${1:\\$domain}${2:, \\$path = false} )"
	"Load default translated strings based on locale.":
		"prefix":"load_default_textdomain"
		"body":"load_default_textdomain( ${1:\\$locale = null} )"
	"Load an image resource for editing.":
		"prefix":"load_image_to_edit"
		"body":"load_image_to_edit( ${1:\\$attachment_id}${2:, \\$mime_type}${3:, \\$size = 'full'} )"
	"Load the translated strings for a plugin residing in the mu-plugins directory.":
		"prefix":"load_muplugin_textdomain"
		"body":"load_muplugin_textdomain( ${1:\\$domain}${2:, \\$mu_plugin_rel_path = ''} )"
	"Loads a plugin's translated strings.":
		"prefix":"load_plugin_textdomain"
		"body":"load_plugin_textdomain( ${1:\\$domain}${2:, \\$deprecated = false}${3:, \\$plugin_rel_path = false} )"
	"Require the template file with WordPress environment.":
		"prefix":"load_template"
		"body":"load_template( ${1:\\$_template_file}${2:, \\$require_once = true} )"
	"Load a .mo file into the text domain $domain.":
		"prefix":"load_textdomain"
		"body":"load_textdomain( ${1:\\$domain}${2:, \\$mofile} )"
	"Load the theme's translated strings.":
		"prefix":"load_theme_textdomain"
		"body":"load_theme_textdomain( ${1:\\$domain}${2:, \\$path = false} )"
	"Display localized stylesheet link element.":
		"prefix":"locale_stylesheet"
		"body":"locale_stylesheet()"
	"Retrieve the name of the highest priority template file that exists.":
		"prefix":"locate_template"
		"body":"locate_template( ${1:\\$template_names}${2:, \\$load = false}${3:, \\$require_once = true} )"
	"Outputs the footer for the login page.":
		"prefix":"login_footer"
		"body":"login_footer( ${1:\\$input_id = ''} )"
	"Output the login page header.":
		"prefix":"login_header"
		"body":"login_header( ${1:\\$title = 'Log In'}${2:, \\$message = ''}${3:, \\$wp_error = ''} )"
	"logIO() - Writes logging info to a file.":
		"prefix":"logio"
		"body":"logio( ${1:\\$io}${2:, \\$msg} )"
	"maintenance_nag":
		"prefix":"maintenance_nag"
		"body":"maintenance_nag()"
	"Convert plaintext URI to HTML links.":
		"prefix":"make_clickable"
		"body":"make_clickable( ${1:\\$text} )"
	"Updates the database tables to a new schema.":
		"prefix":"make_db_current"
		"body":"make_db_current( ${1:\\$tables = 'all'} )"
	"Updates the database tables to a new schema, but without displaying results.":
		"prefix":"make_db_current_silent"
		"body":"make_db_current_silent( ${1:\\$tables = 'all'} )"
	"Creates a site theme.":
		"prefix":"make_site_theme"
		"body":"make_site_theme()"
	"Creates a site theme from the default theme.":
		"prefix":"make_site_theme_from_default"
		"body":"make_site_theme_from_default( ${1:\\$theme_name}${2:, \\$template} )"
	"Creates a site theme from an existing theme.":
		"prefix":"make_site_theme_from_oldschool"
		"body":"make_site_theme_from_oldschool( ${1:\\$theme_name}${2:, \\$template} )"
	"Strip HTML and put links at the bottom of stripped content.":
		"prefix":"make_url_footnote"
		"body":"make_url_footnote( ${1:\\$content} )"
	"Maps a function to all non-iterable elements of an array or an object.":
		"prefix":"map_deep"
		"body":"map_deep( ${1:\\$value}${2:, \\$callback} )"
	"Map meta capabilities to primitive capabilities.":
		"prefix":"map_meta_cap"
		"body":"map_meta_cap( ${1:\\$cap}${2:, \\$user_id}${3:, \\$object_id} )"
	"Add column to database table, if column doesn't already exist in table.":
		"prefix":"maybe_add_column"
		"body":"maybe_add_column( ${1:\\$table_name}${2:, \\$column_name}${3:, \\$create_ddl} )"
	"Add a new user to a blog by visiting /newbloguser/username/.":
		"prefix":"maybe_add_existing_user_to_blog"
		"body":"maybe_add_existing_user_to_blog()"
	"If a table only contains utf8 or utf8mb4 columns, convert it to utf8mb4.":
		"prefix":"maybe_convert_table_to_utf8mb4"
		"body":"maybe_convert_table_to_utf8mb4( ${1:\\$table} )"
	"Create database table, if it doesn't already exist.":
		"prefix":"maybe_create_table"
		"body":"maybe_create_table( ${1:\\$table_name}${2:, \\$create_ddl} )"
	"Disables the Automattic widgets plugin, which was merged into core.":
		"prefix":"maybe_disable_automattic_widgets"
		"body":"maybe_disable_automattic_widgets()"
	"Disables the Link Manager on upgrade if, at the time of upgrade, no links exist in the DB.":
		"prefix":"maybe_disable_link_manager"
		"body":"maybe_disable_link_manager()"
	"Drop column from database table, if it exists.":
		"prefix":"maybe_drop_column"
		"body":"maybe_drop_column( ${1:\\$table_name}${2:, \\$column_name}${3:, \\$drop_ddl} )"
	"Ensures that any hex color is properly hashed.":
		"prefix":"maybe_hash_hex_color"
		"body":"maybe_hash_hex_color( ${1:\\$color} )"
	"Correct 404 redirects when NOBLOGREDIRECT is defined.":
		"prefix":"maybe_redirect_404"
		"body":"maybe_redirect_404()"
	"Serialize data, if needed.":
		"prefix":"maybe_serialize"
		"body":"maybe_serialize( ${1:\\$data} )"
	"Unserialize value only if it was serialized.":
		"prefix":"maybe_unserialize"
		"body":"maybe_unserialize( ${1:\\$original} )"
	"Compat function to mimic mb_strlen().":
		"prefix":"mb_strlen"
		"body":"mb_strlen( ${1:\\$str}${2:, \\$encoding = null} )"
	"Set the mbstring internal encoding to a binary safe encoding when func_overload
is enabled.":
		"prefix":"mbstring_binary_safe_encoding"
		"body":"mbstring_binary_safe_encoding( ${1:\\$reset = false} )"
	"Adds the media button to the editor":
		"prefix":"media_buttons"
		"body":"media_buttons( ${1:\\$editor_id = 'content'} )"
	"Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload().":
		"prefix":"media_handle_sideload"
		"body":"media_handle_sideload( ${1:\\$file_array}${2:, \\$post_id}${3:, \\$desc = null}${4:, \\$post_data = array()} )"
	"Save a file submitted from a POST request and create an attachment post for it.":
		"prefix":"media_handle_upload"
		"body":"media_handle_upload( ${1:\\$file_id}${2:, \\$post_id}${3:, \\$post_data = array()}${4:, \\$overrides = array( 'test_form' =&gt; false )} )"
	"Retrieves the post non-image attachment fields to edito form fields.":
		"prefix":"media_post_single_attachment_fields_to_edit"
		"body":"media_post_single_attachment_fields_to_edit( ${1:\\$form_fields}${2:, \\$post} )"
	"Adds image html to editor":
		"prefix":"media_send_to_editor"
		"body":"media_send_to_editor( ${1:\\$html} )"
	"Downloads an image from the specified URL and attaches it to a post.":
		"prefix":"media_sideload_image"
		"body":"media_sideload_image( ${1:\\$file}${2:, \\$post_id}${3:, \\$desc = null}${4:, \\$return = 'html'} )"
	"Retrieves the single non-image attachment fields to edit form fields.":
		"prefix":"media_single_attachment_fields_to_edit"
		"body":"media_single_attachment_fields_to_edit( ${1:\\$form_fields}${2:, \\$post} )"
	"Handles uploading an audio file.":
		"prefix":"media_upload_audio"
		"body":"media_upload_audio()"
	"Handles uploading a generic file.":
		"prefix":"media_upload_file"
		"body":"media_upload_file()"
	"Displays the multi-file uploader message.":
		"prefix":"media_upload_flash_bypass"
		"body":"media_upload_flash_bypass()"
	"Outputs the legacy media upload form.":
		"prefix":"media_upload_form"
		"body":"media_upload_form( ${1:\\$errors = null} )"
	"Handles form submissions for the legacy media uploader.":
		"prefix":"media_upload_form_handler"
		"body":"media_upload_form_handler()"
	"Retrieves the legacy media uploader form in an iframe.":
		"prefix":"media_upload_gallery"
		"body":"media_upload_gallery()"
	"Adds gallery form to upload iframe":
		"prefix":"media_upload_gallery_form"
		"body":"media_upload_gallery_form( ${1:\\$errors} )"
	"Outputs the legacy media upload header.":
		"prefix":"media_upload_header"
		"body":"media_upload_header()"
	"Displays the browser's built-in uploader message.":
		"prefix":"media_upload_html_bypass"
		"body":"media_upload_html_bypass()"
	"Handles uploading an image.":
		"prefix":"media_upload_image"
		"body":"media_upload_image()"
	"Retrieves the legacy media library form in an iframe.":
		"prefix":"media_upload_library"
		"body":"media_upload_library()"
	"Outputs the legacy media upload form for the media library.":
		"prefix":"media_upload_library_form"
		"body":"media_upload_library_form( ${1:\\$errors} )"
	"Displays the checkbox to scale images.":
		"prefix":"media_upload_max_image_resize"
		"body":"media_upload_max_image_resize()"
	"Defines the default media upload tabs":
		"prefix":"media_upload_tabs"
		"body":"media_upload_tabs()"
	"Used to display a &quot;After a file has been uploaded...&quot; help message.":
		"prefix":"media_upload_text_after"
		"body":"media_upload_text_after()"
	"Outputs the legacy media upload form for a given media type.":
		"prefix":"media_upload_type_form"
		"body":"media_upload_type_form( ${1:\\$type = 'file'}${2:, \\$errors = null}${3:, \\$id = null} )"
	"Outputs the legacy media upload form for external media.":
		"prefix":"media_upload_type_url_form"
		"body":"media_upload_type_url_form( ${1:\\$type = null}${2:, \\$errors = null}${3:, \\$id = null} )"
	"Handles uploading a video file.":
		"prefix":"media_upload_video"
		"body":"media_upload_video()"
	"Get the url to access a particular menu page based on the slug it was registered with.":
		"prefix":"menu_page_url"
		"body":"menu_page_url( ${1:\\$menu_slug}${2:, \\$echo = true} )"
	"Prints the meta box preferences for screen meta.":
		"prefix":"meta_box_prefs"
		"body":"meta_box_prefs( ${1:\\$screen} )"
	"Prints the form in the Custom Fields meta box.":
		"prefix":"meta_form"
		"body":"meta_form( ${1:\\$post = null} )"
	"Determine if a meta key is set for a given object":
		"prefix":"metadata_exists"
		"body":"metadata_exists( ${1:\\$meta_type}${2:, \\$object_id}${3:, \\$meta_key} )"
	"Whitelists any domain in a multisite installation for safe HTTP requests.":
		"prefix":"ms_allowed_http_request_hosts"
		"body":"ms_allowed_http_request_hosts( ${1:\\$is_external}${2:, \\$host} )"
	"Defines Multisite cookie constants.":
		"prefix":"ms_cookie_constants"
		"body":"ms_cookie_constants()"
	"Deprecated functionality for determining whether a file is deprecated.":
		"prefix":"ms_deprecated_blogs_file"
		"body":"ms_deprecated_blogs_file()"
	"Defines Multisite file constants.":
		"prefix":"ms_file_constants"
		"body":"ms_file_constants()"
	"Determines if switch_to_blog() is in effect":
		"prefix":"ms_is_switched"
		"body":"ms_is_switched()"
	"Identifies the network and site of a requested domain and path and populates the
corresponding network and site global objects as part of the multisite bootstrap process.":
		"prefix":"ms_load_current_site_and_network"
		"body":"ms_load_current_site_and_network( ${1:\\$domain}${2:, \\$path}${3:, \\$subdomain = false} )"
	"Displays a failure message.":
		"prefix":"ms_not_installed"
		"body":"ms_not_installed( ${1:\\$domain}${2:, \\$path} )"
	"Checks status of current blog.":
		"prefix":"ms_site_check"
		"body":"ms_site_check()"
	"Defines Multisite subdomain constants and handles warnings and notices.":
		"prefix":"ms_subdomain_constants"
		"body":"ms_subdomain_constants()"
	"Defines Multisite upload constants.":
		"prefix":"ms_upload_constants"
		"body":"ms_upload_constants()"
	"Generates and displays a drop-down of available languages.":
		"prefix":"mu_dropdown_languages"
		"body":"mu_dropdown_languages( ${1:\\$lang_files = array()}${2:, \\$current = ''} )"
	"WPMU options.":
		"prefix":"mu_options"
		"body":"mu_options()"
	"Displays the out of storage quota message in Multisite.":
		"prefix":"multisite_over_quota_message"
		"body":"multisite_over_quota_message()"
	"Convert given date string into a different format.":
		"prefix":"mysql2date"
		"body":"mysql2date( ${1:\\$format}${2:, \\$date}${3:, \\$translate = true} )"
	"Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601/RFC3339.":
		"prefix":"mysql_to_rfc3339"
		"body":"mysql_to_rfc3339( ${1:\\$date_string} )"
	"Retrieves the URL to the admin area for the network.":
		"prefix":"network_admin_url"
		"body":"network_admin_url( ${1:\\$path = ''}${2:, \\$scheme = 'admin'} )"
	"Check for an existing network.":
		"prefix":"network_domain_check"
		"body":"network_domain_check()"
	"Outputs the HTML for a network's &quot;Edit Site&quot; tabular interface.":
		"prefix":"network_edit_site_nav"
		"body":"network_edit_site_nav( ${1:\\$args = array()} )"
	"Retrieves the home URL for the current network.":
		"prefix":"network_home_url"
		"body":"network_home_url( ${1:\\$path = ''}${2:, \\$scheme = null} )"
	"Print JavaScript in the header on the Network Settings screen.":
		"prefix":"network_settings_add_js"
		"body":"network_settings_add_js()"
	"Retrieves the site URL for the current network.":
		"prefix":"network_site_url"
		"body":"network_site_url( ${1:\\$path = ''}${2:, \\$scheme = null} )"
	"Prints step 1 for Network installation process.":
		"prefix":"network_step1"
		"body":"network_step1( ${1:\\$errors = false} )"
	"Prints step 2 for Network installation process.":
		"prefix":"network_step2"
		"body":"network_step2( ${1:\\$errors = false} )"
	"Adds an admin notice alerting the user to check for confirmation email
after email address change.":
		"prefix":"new_user_email_admin_notice"
		"body":"new_user_email_admin_notice()"
	"Notifies the network admin that a new site has been activated.":
		"prefix":"newblog_notify_siteadmin"
		"body":"newblog_notify_siteadmin( ${1:\\$blog_id}${2:, \\$deprecated = ''} )"
	"Notifies the network admin that a new user has been activated.":
		"prefix":"newuser_notify_siteadmin"
		"body":"newuser_notify_siteadmin( ${1:\\$user_id} )"
	"Displays the link to the next comments page.":
		"prefix":"next_comments_link"
		"body":"next_comments_link( ${1:\\$label = ''}${2:, \\$max_page} )"
	"Displays next image link that has the same post parent.":
		"prefix":"next_image_link"
		"body":"next_image_link( ${1:\\$size = 'thumbnail'}${2:, \\$text = false} )"
	"Prints link to the next post.":
		"prefix":"next_post"
		"body":"next_post( ${1:\\$format = '%'}${2:, \\$next = 'next post: '}${3:, \\$title = 'yes'}${4:, \\$in_same_cat = 'no'}${5:, \\$limitnext = 1}${6:, \\$excluded_categories = ''} )"
	"Displays the next post link that is adjacent to the current post.":
		"prefix":"next_post_link"
		"body":"next_post_link( ${1:\\$format = '%link &raquo;'}${2:, \\$link = '%title'}${3:, \\$in_same_term = false}${4:, \\$excluded_terms = ''}${5:, \\$taxonomy = 'category'} )"
	"Displays the relational link for the next post adjacent to the current post.":
		"prefix":"next_post_rel_link"
		"body":"next_post_rel_link( ${1:\\$title = '%title'}${2:, \\$in_same_term = false}${3:, \\$excluded_terms = ''}${4:, \\$taxonomy = 'category'} )"
	"Displays or retrieves the next posts page link.":
		"prefix":"next_posts"
		"body":"next_posts( ${1:\\$max_page}${2:, \\$echo = true} )"
	"Displays the next posts page link.":
		"prefix":"next_posts_link"
		"body":"next_posts_link( ${1:\\$label = null}${2:, \\$max_page} )"
	"next_widget_id_number":
		"prefix":"next_widget_id_number"
		"body":"next_widget_id_number( ${1:\\$id_base} )"
	"Set the headers to prevent caching for the different browsers.":
		"prefix":"nocache_headers"
		"body":"nocache_headers()"
	"Displays a noindex meta tag if required by the blog configuration.":
		"prefix":"noindex"
		"body":"noindex()"
	"Normalize EOL characters and strip duplicate whitespace.":
		"prefix":"normalize_whitespace"
		"body":"normalize_whitespace( ${1:\\$str} )"
	"Convert float number to format based on the locale.":
		"prefix":"number_format_i18n"
		"body":"number_format_i18n( ${1:\\$number}${2:, \\$decimals} )"
	"Refreshes the value of the options whitelist available via the 'whitelist_options' hook.":
		"prefix":"option_update_filter"
		"body":"option_update_filter( ${1:\\$options} )"
	"Output JavaScript to toggle display of additional settings if avatars are disabled.":
		"prefix":"options_discussion_add_js"
		"body":"options_discussion_add_js()"
	"Display JavaScript on the page options_general_add_js.":
		"prefix":"options_general_add_js"
		"body":"options_general_add_js()"
	"Display JavaScript on the page options_permalink_add_js.":
		"prefix":"options_permalink_add_js"
		"body":"options_permalink_add_js()"
	"Display JavaScript on the page options_reading_add_js.":
		"prefix":"options_reading_add_js"
		"body":"options_reading_add_js()"
	"Render the site charset setting.":
		"prefix":"options_reading_blog_charset"
		"body":"options_reading_blog_charset()"
	"Display page attributes form fields.":
		"prefix":"page_attributes_meta_box"
		"body":"page_attributes_meta_box( ${1:\\$post} )"
	"Print out option HTML elements for the page templates drop-down.":
		"prefix":"page_template_dropdown"
		"body":"page_template_dropdown( ${1:\\$default = ''}${2:, \\$post_type = 'page'} )"
	"Displays or retrieves pagination links for the comments on the current post.":
		"prefix":"paginate_comments_links"
		"body":"paginate_comments_links( ${1:\\$args = array()} )"
	"Retrieve paginated link for archive post pages.":
		"prefix":"paginate_links"
		"body":"paginate_links( ${1:\\$args = ''} )"
	"Print out option HTML elements for the page parents drop-down.":
		"prefix":"parent_dropdown"
		"body":"parent_dropdown( ${1:\\$default}${2:, \\$parent}${3:, \\$level}${4:, \\$post = null} )"
	"Display relational link for parent item":
		"prefix":"parent_post_rel_link"
		"body":"parent_post_rel_link( ${1:\\$title = '%title'} )"
	"parse_w3cdtf":
		"prefix":"parse_w3cdtf"
		"body":"parse_w3cdtf()"
	"Test if a give filesystem path is absolute.":
		"prefix":"path_is_absolute"
		"body":"path_is_absolute( ${1:\\$path} )"
	"Join two filesystem paths together.":
		"prefix":"path_join"
		"body":"path_join( ${1:\\$base}${2:, \\$path} )"
	"pclziputilcopyblock":
		"prefix":"pclziputilcopyblock"
		"body":"pclziputilcopyblock()"
	"pclziputiloptiontext":
		"prefix":"pclziputiloptiontext"
		"body":"pclziputiloptiontext()"
	"pclziputilpathinclusion":
		"prefix":"pclziputilpathinclusion"
		"body":"pclziputilpathinclusion()"
	"pclziputilpathreduction":
		"prefix":"pclziputilpathreduction"
		"body":"pclziputilpathreduction()"
	"pclziputilrename":
		"prefix":"pclziputilrename"
		"body":"pclziputilrename()"
	"pclziputiltranslatewinpath":
		"prefix":"pclziputiltranslatewinpath"
		"body":"pclziputiltranslatewinpath()"
	"Displays the permalink anchor for the current post.":
		"prefix":"permalink_anchor"
		"body":"permalink_anchor( ${1:\\$mode = 'id'} )"
	"Print the permalink of the current post in the loop.":
		"prefix":"permalink_link"
		"body":"permalink_link()"
	"Print the permalink to the RSS feed.":
		"prefix":"permalink_single_rss"
		"body":"permalink_single_rss( ${1:\\$deprecated = ''} )"
	"Pings back the links found in a post.":
		"prefix":"pingback"
		"body":"pingback( ${1:\\$content}${2:, \\$post_id} )"
	"Default filter attached to pingback_ping_source_uri to validate the pingback's Source URI":
		"prefix":"pingback_ping_source_uri"
		"body":"pingback_ping_source_uri( ${1:\\$source_uri} )"
	"Whether the current post is open for pings.":
		"prefix":"pings_open"
		"body":"pings_open( ${1:\\$post_id = null} )"
	"Gets the basename of a plugin.":
		"prefix":"plugin_basename"
		"body":"plugin_basename( ${1:\\$file} )"
	"Get the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in.":
		"prefix":"plugin_dir_path"
		"body":"plugin_dir_path( ${1:\\$file} )"
	"Get the URL directory path (with trailing slash) for the plugin __FILE__ passed in.":
		"prefix":"plugin_dir_url"
		"body":"plugin_dir_url( ${1:\\$file} )"
	"plugin_sandbox_scrape":
		"prefix":"plugin_sandbox_scrape"
		"body":"plugin_sandbox_scrape( ${1:\\$plugin} )"
	"Retrieves plugin installer pages from the WordPress.org Plugins API.":
		"prefix":"plugins_api"
		"body":"plugins_api( ${1:\\$action}${2:, \\$args = array()} )"
	"Retrieves a URL within the plugins or mu-plugins directory.":
		"prefix":"plugins_url"
		"body":"plugins_url( ${1:\\$path = ''}${2:, \\$plugin = ''} )"
	"Populate network settings.":
		"prefix":"populate_network"
		"body":"populate_network( ${1:\\$network_id = 1}${2:, \\$domain = ''}${3:, \\$email = ''}${4:, \\$site_name = ''}${5:, \\$path = '/'}${6:, \\$subdomain_install = false} )"
	"Create WordPress options and set the default values.":
		"prefix":"populate_options"
		"body":"populate_options()"
	"Execute WordPress role creation for the various WordPress versions.":
		"prefix":"populate_roles"
		"body":"populate_roles()"
	"Create the roles for WordPress 2.0":
		"prefix":"populate_roles_160"
		"body":"populate_roles_160()"
	"Create and modify WordPress roles for WordPress 2.1.":
		"prefix":"populate_roles_210"
		"body":"populate_roles_210()"
	"Create and modify WordPress roles for WordPress 2.3.":
		"prefix":"populate_roles_230"
		"body":"populate_roles_230()"
	"Create and modify WordPress roles for WordPress 2.5.":
		"prefix":"populate_roles_250"
		"body":"populate_roles_250()"
	"Create and modify WordPress roles for WordPress 2.6.":
		"prefix":"populate_roles_260"
		"body":"populate_roles_260()"
	"Create and modify WordPress roles for WordPress 2.7.":
		"prefix":"populate_roles_270"
		"body":"populate_roles_270()"
	"Create and modify WordPress roles for WordPress 2.8.":
		"prefix":"populate_roles_280"
		"body":"populate_roles_280()"
	"Create and modify WordPress roles for WordPress 3.0.":
		"prefix":"populate_roles_300"
		"body":"populate_roles_300()"
	"Adds element attributes to open links in new windows.":
		"prefix":"popuplinks"
		"body":"popuplinks( ${1:\\$text} )"
	"Display form field with list of authors.":
		"prefix":"post_author_meta_box"
		"body":"post_author_meta_box( ${1:\\$post} )"
	"Display post categories form fields.":
		"prefix":"post_categories_meta_box"
		"body":"post_categories_meta_box( ${1:\\$post}${2:, \\$box} )"
	"Display the classes for the post div.":
		"prefix":"post_class"
		"body":"post_class( ${1:\\$class = ''}${2:, \\$post_id = null} )"
	"Display comments for post.":
		"prefix":"post_comment_meta_box"
		"body":"post_comment_meta_box( ${1:\\$post} )"
	"Display comments for post table header":
		"prefix":"post_comment_meta_box_thead"
		"body":"post_comment_meta_box_thead( ${1:\\$result} )"
	"Display comments status form fields.":
		"prefix":"post_comment_status_meta_box"
		"body":"post_comment_status_meta_box( ${1:\\$post} )"
	"Displays the comment feed link for a post.":
		"prefix":"post_comments_feed_link"
		"body":"post_comments_feed_link( ${1:\\$link_text = ''}${2:, \\$post_id = ''}${3:, \\$feed = ''} )"
	"Retrieve post custom meta data field.":
		"prefix":"post_custom"
		"body":"post_custom( ${1:\\$key = ''} )"
	"Display custom fields form fields.":
		"prefix":"post_custom_meta_box"
		"body":"post_custom_meta_box( ${1:\\$post} )"
	"Display post excerpt form fields.":
		"prefix":"post_excerpt_meta_box"
		"body":"post_excerpt_meta_box( ${1:\\$post} )"
	"Determine if a post exists based on title, content, and date":
		"prefix":"post_exists"
		"body":"post_exists( ${1:\\$title}${2:, \\$content = ''}${3:, \\$date = ''} )"
	"Disables autocomplete on the 'post' form (Add/Edit Post screens) for WebKit browsers,
as they disregard the autocomplete setting on the editor textarea. That can break the editor
when the user navigates to it with the browser's Back button. See #28037":
		"prefix":"post_form_autocomplete_off"
		"body":"post_form_autocomplete_off()"
	"Display post format form elements.":
		"prefix":"post_format_meta_box"
		"body":"post_format_meta_box( ${1:\\$post}${2:, \\$box} )"
	"Whether post requires password and correct password has been provided.":
		"prefix":"post_password_required"
		"body":"post_password_required( ${1:\\$post = null} )"
	"Retrieve permalink from post ID.":
		"prefix":"post_permalink"
		"body":"post_permalink( ${1:\\$post_id} )"
	"Save draft or manually autosave for showing preview.":
		"prefix":"post_preview"
		"body":"post_preview()"
	"Displays the HTML content for reply to post link.":
		"prefix":"post_reply_link"
		"body":"post_reply_link( ${1:\\$args = array()}${2:, \\$post = null} )"
	"Display list of revisions.":
		"prefix":"post_revisions_meta_box"
		"body":"post_revisions_meta_box( ${1:\\$post} )"
	"Display slug form fields.":
		"prefix":"post_slug_meta_box"
		"body":"post_slug_meta_box( ${1:\\$post} )"
	"Displays post submit form fields.":
		"prefix":"post_submit_meta_box"
		"body":"post_submit_meta_box( ${1:\\$post}${2:, \\$args = array()} )"
	"Display post tags form fields.":
		"prefix":"post_tags_meta_box"
		"body":"post_tags_meta_box( ${1:\\$post}${2:, \\$box} )"
	"Display post thumbnail meta box.":
		"prefix":"post_thumbnail_meta_box"
		"body":"post_thumbnail_meta_box( ${1:\\$post} )"
	"Display trackback links form fields.":
		"prefix":"post_trackback_meta_box"
		"body":"post_trackback_meta_box( ${1:\\$post} )"
	"Display or retrieve title for a post type archive.":
		"prefix":"post_type_archive_title"
		"body":"post_type_archive_title( ${1:\\$prefix = ''}${2:, \\$display = true} )"
	"Check if a post type is registered.":
		"prefix":"post_type_exists"
		"body":"post_type_exists( ${1:\\$post_type} )"
	"Check a post type's support for a given feature.":
		"prefix":"post_type_supports"
		"body":"post_type_supports( ${1:\\$post_type}${2:, \\$feature} )"
	"Returns the list of classes to be used by a meta box.":
		"prefix":"postbox_classes"
		"body":"postbox_classes( ${1:\\$id}${2:, \\$page} )"
	"Displays the post pages link navigation for previous and next pages.":
		"prefix":"posts_nav_link"
		"body":"posts_nav_link( ${1:\\$sep = ''}${2:, \\$prelabel = ''}${3:, \\$nxtlabel = ''} )"
	"Runs before the schema is upgraded.":
		"prefix":"pre_schema_upgrade"
		"body":"pre_schema_upgrade()"
	"Determine the type of a string of data with the data formatted.":
		"prefix":"prep_atom_text_construct"
		"body":"prep_atom_text_construct( ${1:\\$data} )"
	"Wrap attachment in paragraph tag before content.":
		"prefix":"prepend_attachment"
		"body":"prepend_attachment( ${1:\\$content} )"
	"Displays the relational link for the previous post adjacent to the current post.":
		"prefix":"prev_post_rel_link"
		"body":"prev_post_rel_link( ${1:\\$title = '%title'}${2:, \\$in_same_term = false}${3:, \\$excluded_terms = ''}${4:, \\$taxonomy = 'category'} )"
	"Start preview theme output buffer.":
		"prefix":"preview_theme"
		"body":"preview_theme()"
	"Callback function for ob_start() to capture all links in the theme.":
		"prefix":"preview_theme_ob_filter"
		"body":"preview_theme_ob_filter( ${1:\\$content} )"
	"Manipulates preview theme links in order to control and maintain location.":
		"prefix":"preview_theme_ob_filter_callback"
		"body":"preview_theme_ob_filter_callback( ${1:\\$matches} )"
	"Displays the link to the previous comments page.":
		"prefix":"previous_comments_link"
		"body":"previous_comments_link( ${1:\\$label = ''} )"
	"Displays previous image link that has the same post parent.":
		"prefix":"previous_image_link"
		"body":"previous_image_link( ${1:\\$size = 'thumbnail'}${2:, \\$text = false} )"
	"Prints a link to the previous post.":
		"prefix":"previous_post"
		"body":"previous_post( ${1:\\$format = '%'}${2:, \\$previous = 'previous post: '}${3:, \\$title = 'yes'}${4:, \\$in_same_cat = 'no'}${5:, \\$limitprev = 1}${6:, \\$excluded_categories = ''} )"
	"Displays the previous post link that is adjacent to the current post.":
		"prefix":"previous_post_link"
		"body":"previous_post_link( ${1:\\$format = '&laquo; %link'}${2:, \\$link = '%title'}${3:, \\$in_same_term = false}${4:, \\$excluded_terms = ''}${5:, \\$taxonomy = 'category'} )"
	"Displays or retrieves the previous posts page link.":
		"prefix":"previous_posts"
		"body":"previous_posts( ${1:\\$echo = true} )"
	"Displays the previous posts page link.":
		"prefix":"previous_posts_link"
		"body":"previous_posts_link( ${1:\\$label = null} )"
	"Prints the styles queue in the HTML head on admin pages.":
		"prefix":"print_admin_styles"
		"body":"print_admin_styles()"
	"Prints column headers for a particular screen.":
		"prefix":"print_column_headers"
		"body":"print_column_headers( ${1:\\$screen}${2:, \\$with_id = true} )"
	"Prints the necessary markup for the embed comments button.":
		"prefix":"print_embed_comments_button"
		"body":"print_embed_comments_button()"
	"Prints the JavaScript in the embed iframe header.":
		"prefix":"print_embed_scripts"
		"body":"print_embed_scripts()"
	"Prints the necessary markup for the embed sharing button.":
		"prefix":"print_embed_sharing_button"
		"body":"print_embed_sharing_button()"
	"Prints the necessary markup for the embed sharing dialog.":
		"prefix":"print_embed_sharing_dialog"
		"body":"print_embed_sharing_dialog()"
	"Prints the CSS in the embed iframe header.":
		"prefix":"print_embed_styles"
		"body":"print_embed_styles()"
	"Print the inline Emoji detection script if it is not already printed.":
		"prefix":"print_emoji_detection_script"
		"body":"print_emoji_detection_script()"
	"Print the important emoji-related styles.":
		"prefix":"print_emoji_styles"
		"body":"print_emoji_styles()"
	"Prints the scripts that were queued for the footer or too late for the HTML head.":
		"prefix":"print_footer_scripts"
		"body":"print_footer_scripts()"
	"Prints the script queue in the HTML head on admin pages.":
		"prefix":"print_head_scripts"
		"body":"print_head_scripts()"
	"Prints the styles that were queued too late for the HTML head.":
		"prefix":"print_late_styles"
		"body":"print_late_styles()"
	"Check whether blog is public before returning sites.":
		"prefix":"privacy_ping_filter"
		"body":"privacy_ping_filter( ${1:\\$sites} )"
	"Sets up The Loop with query parameters.":
		"prefix":"query_posts"
		"body":"query_posts( ${1:\\$query} )"
	"Unless open_basedir is enabled, use /dev/urandom for
random numbers in accordance with best practices":
		"prefix":"random_bytes"
		"body":"random_bytes( ${1:\\$bytes} )"
	"Fetch a random integer between $min and $max inclusive":
		"prefix":"random_int"
		"body":"random_int( ${1:\\$min}${2:, \\$max} )"
	"Cast to an integer if we can, safely.":
		"prefix":"randomcompat_intval"
		"body":"randomcompat_intval( ${1:\\$number}${2:, \\$fail_open = false} )"
	"strlen() implementation that isn't brittle to mbstring.func_overload":
		"prefix":"randomcompat_strlen"
		"body":"randomcompat_strlen( ${1:\\$binary_string} )"
	"substr() implementation that isn't brittle to mbstring.func_overload":
		"prefix":"randomcompat_substr"
		"body":"randomcompat_substr( ${1:\\$binary_string}${2:, \\$start}${3:, \\$length = null} )"
	"Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.":
		"prefix":"rawurlencode_deep"
		"body":"rawurlencode_deep( ${1:\\$value} )"
	"Get the size of a directory recursively.":
		"prefix":"recurse_dirsize"
		"body":"recurse_dirsize( ${1:\\$directory}${2:, \\$exclude = null} )"
	"Redirects incoming links to the proper URL based on the site url.":
		"prefix":"redirect_canonical"
		"body":"redirect_canonical( ${1:\\$requested_url = null}${2:, \\$do_redirect = true} )"
	"Attempts to guess the correct URL based on query vars":
		"prefix":"redirect_guess_404_permalink"
		"body":"redirect_guess_404_permalink()"
	"Redirect to previous page.":
		"prefix":"redirect_post"
		"body":"redirect_post( ${1:\\$post_id = ''} )"
	"Ensure that the current site's domain is listed in the allowed redirect host list.":
		"prefix":"redirect_this_site"
		"body":"redirect_this_site( ${1:\\$deprecated = ''} )"
	"Clear the blog details cache.":
		"prefix":"refresh_blog_details"
		"body":"refresh_blog_details( ${1:\\$blog_id} )"
	"Cleans the user cache for a specific user.":
		"prefix":"refresh_user_details"
		"body":"refresh_user_details( ${1:\\$id} )"
	"Set the activation hook for a plugin.":
		"prefix":"register_activation_hook"
		"body":"register_activation_hook( ${1:\\$file}${2:, \\$function} )"
	"Registers the default Admin color schemes":
		"prefix":"register_admin_color_schemes"
		"body":"register_admin_color_schemes()"
	"Register column headers for a particular screen.":
		"prefix":"register_column_headers"
		"body":"register_column_headers( ${1:\\$screen}${2:, \\$columns} )"
	"Set the deactivation hook for a plugin.":
		"prefix":"register_deactivation_hook"
		"body":"register_deactivation_hook( ${1:\\$file}${2:, \\$function} )"
	"Register a selection of default headers to be displayed by the custom header admin UI.":
		"prefix":"register_default_headers"
		"body":"register_default_headers( ${1:\\$headers} )"
	"Register importer for WordPress.":
		"prefix":"register_importer"
		"body":"register_importer( ${1:\\$id}${2:, \\$name}${3:, \\$description}${4:, \\$callback} )"
	"Register default settings available in WordPress.":
		"prefix":"register_initial_settings"
		"body":"register_initial_settings()"
	"Registers a meta key.":
		"prefix":"register_meta"
		"body":"register_meta( ${1:\\$object_type}${2:, \\$meta_key}${3:, \\$args}${4:, \\$deprecated = null} )"
	"Registers a navigation menu location for a theme.":
		"prefix":"register_nav_menu"
		"body":"register_nav_menu( ${1:\\$location}${2:, \\$description} )"
	"Registers navigation menu locations for a theme.":
		"prefix":"register_nav_menus"
		"body":"register_nav_menus( ${1:\\$locations = array()} )"
	"Handles registering a new user.":
		"prefix":"register_new_user"
		"body":"register_new_user( ${1:\\$user_login}${2:, \\$user_email} )"
	"Register a post status. Do not use before init.":
		"prefix":"register_post_status"
		"body":"register_post_status( ${1:\\$post_status}${2:, \\$args = array()} )"
	"Registers a post type.":
		"prefix":"register_post_type"
		"body":"register_post_type( ${1:\\$post_type}${2:, \\$args = array()} )"
	"Registers a new field on an existing WordPress object type.":
		"prefix":"register_rest_field"
		"body":"register_rest_field( ${1:\\$object_type}${2:, \\$attribute}${3:, \\$args = array()} )"
	"Registers a REST API route.":
		"prefix":"register_rest_route"
		"body":"register_rest_route( ${1:\\$namespace}${2:, \\$route}${3:, \\$args = array()}${4:, \\$override = false} )"
	"Register a setting and its data.":
		"prefix":"register_setting"
		"body":"register_setting( ${1:\\$option_group}${2:, \\$option_name}${3:, \\$args = array()} )"
	"Builds the definition for a single sidebar and returns the ID.":
		"prefix":"register_sidebar"
		"body":"register_sidebar( ${1:\\$args = array()} )"
	"Register widget for sidebar with backward compatibility.":
		"prefix":"register_sidebar_widget"
		"body":"register_sidebar_widget( ${1:\\$name}${2:, \\$output_callback}${3:, \\$classname = ''}${4:, \\$params} )"
	"Creates multiple sidebars.":
		"prefix":"register_sidebars"
		"body":"register_sidebars( ${1:\\$number = 1}${2:, \\$args = array()} )"
	"Creates or modifies a taxonomy object.":
		"prefix":"register_taxonomy"
		"body":"register_taxonomy( ${1:\\$taxonomy}${2:, \\$object_type}${3:, \\$args = array()} )"
	"Add an already registered taxonomy to an object type.":
		"prefix":"register_taxonomy_for_object_type"
		"body":"register_taxonomy_for_object_type( ${1:\\$taxonomy}${2:, \\$object_type} )"
	"Register a directory that contains themes.":
		"prefix":"register_theme_directory"
		"body":"register_theme_directory( ${1:\\$directory} )"
	"Set the uninstallation hook for a plugin.":
		"prefix":"register_uninstall_hook"
		"body":"register_uninstall_hook( ${1:\\$file}${2:, \\$callback} )"
	"Register a widget":
		"prefix":"register_widget"
		"body":"register_widget( ${1:\\$widget_class} )"
	"Registers widget control callback for customizing options. register_widget_control":
		"prefix":"register_widget_control"
		"body":"register_widget_control( ${1:\\$name}${2:, \\$control_callback}${3:, \\$width = ''}${4:, \\$height = ''} )"
	"Checks if a meta key is registered.":
		"prefix":"registered_meta_key_exists"
		"body":"registered_meta_key_exists( ${1:\\$object_type}${2:, \\$meta_key} )"
	"Outputs rel=canonical for singular queries.":
		"prefix":"rel_canonical"
		"body":"rel_canonical()"
	"Converts all accent characters to ASCII characters.":
		"prefix":"remove_accents"
		"body":"remove_accents( ${1:\\$string} )"
	"Removes a function from a specified action hook.":
		"prefix":"remove_action"
		"body":"remove_action( ${1:\\$tag}${2:, \\$function_to_remove}${3:, \\$priority = 10} )"
	"Remove all of the hooks from an action.":
		"prefix":"remove_all_actions"
		"body":"remove_all_actions( ${1:\\$tag}${2:, \\$priority = false} )"
	"Remove all of the hooks from a filter.":
		"prefix":"remove_all_filters"
		"body":"remove_all_filters( ${1:\\$tag}${2:, \\$priority = false} )"
	"Clear all shortcodes.":
		"prefix":"remove_all_shortcodes"
		"body":"remove_all_shortcodes()"
	"Remove custom background support.":
		"prefix":"remove_custom_background"
		"body":"remove_custom_background()"
	"Remove image header support.":
		"prefix":"remove_custom_image_header"
		"body":"remove_custom_image_header()"
	"Removes all visual editor stylesheets.":
		"prefix":"remove_editor_styles"
		"body":"remove_editor_styles()"
	"Removes a function from a specified filter hook.":
		"prefix":"remove_filter"
		"body":"remove_filter( ${1:\\$tag}${2:, \\$function_to_remove}${3:, \\$priority = 10} )"
	"Remove a new image size.":
		"prefix":"remove_image_size"
		"body":"remove_image_size( ${1:\\$name} )"
	"Remove a top-level admin menu.":
		"prefix":"remove_menu_page"
		"body":"remove_menu_page( ${1:\\$menu_slug} )"
	"Removes a meta box from one or more screens.":
		"prefix":"remove_meta_box"
		"body":"remove_meta_box( ${1:\\$id}${2:, \\$screen}${3:, \\$context} )"
	"Unregister a setting":
		"prefix":"remove_option_update_handler"
		"body":"remove_option_update_handler( ${1:\\$option_group}${2:, \\$option_name}${3:, \\$sanitize_callback = ''} )"
	"Removes a list of options from the options whitelist.":
		"prefix":"remove_option_whitelist"
		"body":"remove_option_whitelist( ${1:\\$del_options}${2:, \\$options = ''} )"
	"Removes a permalink structure.":
		"prefix":"remove_permastruct"
		"body":"remove_permastruct( ${1:\\$name} )"
	"Remove support for a feature from a post type.":
		"prefix":"remove_post_type_support"
		"body":"remove_post_type_support( ${1:\\$post_type}${2:, \\$feature} )"
	"Removes an item or items from a query string.":
		"prefix":"remove_query_arg"
		"body":"remove_query_arg( ${1:\\$key}${2:, \\$query = false} )"
	"Removes an existing rewrite tag (like %postname%).":
		"prefix":"remove_rewrite_tag"
		"body":"remove_rewrite_tag( ${1:\\$tag} )"
	"Remove role, if it exists.":
		"prefix":"remove_role"
		"body":"remove_role( ${1:\\$role} )"
	"Removes hook for shortcode.":
		"prefix":"remove_shortcode"
		"body":"remove_shortcode( ${1:\\$tag} )"
	"Remove an admin submenu.":
		"prefix":"remove_submenu_page"
		"body":"remove_submenu_page( ${1:\\$menu_slug}${2:, \\$submenu_slug} )"
	"Remove theme modification name from current theme list.":
		"prefix":"remove_theme_mod"
		"body":"remove_theme_mod( ${1:\\$name} )"
	"Remove theme modifications option for current theme.":
		"prefix":"remove_theme_mods"
		"body":"remove_theme_mods()"
	"Allows a theme to de-register its support of a certain feature":
		"prefix":"remove_theme_support"
		"body":"remove_theme_support( ${1:\\$feature} )"
	"Remove a user from a blog.":
		"prefix":"remove_user_from_blog"
		"body":"remove_user_from_blog( ${1:\\$user_id}${2:, \\$blog_id = ''}${3:, \\$reassign = ''} )"
	"Displays a form to the user to request for their FTP/SSH details in order
to connect to the filesystem.":
		"prefix":"request_filesystem_credentials"
		"body":"request_filesystem_credentials( ${1:\\$form_post}${2:, \\$type = ''}${3:, \\$error = false}${4:, \\$context = ''}${5:, \\$extra_fields = null}${6:, \\$allow_relaxed_file_ownership = false} )"
	"Checks a theme's support for a given feature before loading the functions which implement it.":
		"prefix":"require_if_theme_supports"
		"body":"require_if_theme_supports( ${1:\\$feature}${2:, \\$include} )"
	"Load the database class file and instantiate the `$wpdb` global.":
		"prefix":"require_wp_db"
		"body":"require_wp_db()"
	"Reset the mbstring internal encoding to a users previously set encoding.":
		"prefix":"reset_mbstring_encoding"
		"body":"reset_mbstring_encoding()"
	"Handles resetting the user's password.":
		"prefix":"reset_password"
		"body":"reset_password( ${1:\\$user}${2:, \\$new_pass} )"
	"Registers the default REST API filters.":
		"prefix":"rest_api_default_filters"
		"body":"rest_api_default_filters()"
	"Registers rewrite rules for the API.":
		"prefix":"rest_api_init"
		"body":"rest_api_init()"
	"Loads the REST API.":
		"prefix":"rest_api_loaded"
		"body":"rest_api_loaded()"
	"Adds REST rewrite rules.":
		"prefix":"rest_api_register_rewrites"
		"body":"rest_api_register_rewrites()"
	"Returns a contextual HTTP error code for authorization failure.":
		"prefix":"rest_authorization_required_code"
		"body":"rest_authorization_required_code()"
	"Checks for errors when using cookie-based authentication.":
		"prefix":"rest_cookie_check_errors"
		"body":"rest_cookie_check_errors( ${1:\\$result} )"
	"Collects cookie authentication status.":
		"prefix":"rest_cookie_collect_status"
		"body":"rest_cookie_collect_status()"
	"Do a REST request.":
		"prefix":"rest_do_request"
		"body":"rest_do_request( ${1:\\$request} )"
	"Ensures request arguments are a request object (for consistency).":
		"prefix":"rest_ensure_request"
		"body":"rest_ensure_request( ${1:\\$request} )"
	"Ensures a REST response is a response object (for consistency).":
		"prefix":"rest_ensure_response"
		"body":"rest_ensure_response( ${1:\\$response} )"
	"Retrieves the pixel sizes for avatars.":
		"prefix":"rest_get_avatar_sizes"
		"body":"rest_get_avatar_sizes()"
	"Retrieves the avatar urls in various sizes based on a given email address.":
		"prefix":"rest_get_avatar_urls"
		"body":"rest_get_avatar_urls( ${1:\\$email} )"
	"Parses a date into both its local and UTC equivalent, in MySQL datetime format.":
		"prefix":"rest_get_date_with_gmt"
		"body":"rest_get_date_with_gmt( ${1:\\$date}${2:, \\$is_utc = false} )"
	"Retrieves the current REST server instance.":
		"prefix":"rest_get_server"
		"body":"rest_get_server()"
	"Retrieves the URL prefix for any API resource.":
		"prefix":"rest_get_url_prefix"
		"body":"rest_get_url_prefix()"
	"Handles _deprecated_argument() errors.":
		"prefix":"rest_handle_deprecated_argument"
		"body":"rest_handle_deprecated_argument( ${1:\\$function}${2:, \\$message}${3:, \\$version} )"
	"Handles _deprecated_function() errors.":
		"prefix":"rest_handle_deprecated_function"
		"body":"rest_handle_deprecated_function( ${1:\\$function}${2:, \\$replacement}${3:, \\$version} )"
	"Handles OPTIONS requests for the server.":
		"prefix":"rest_handle_options_request"
		"body":"rest_handle_options_request( ${1:\\$response}${2:, \\$handler}${3:, \\$request} )"
	"Determines if a given value is boolean-like.":
		"prefix":"rest_is_boolean"
		"body":"rest_is_boolean( ${1:\\$maybe_bool} )"
	"Determines if an IP address is valid.":
		"prefix":"rest_is_ip_address"
		"body":"rest_is_ip_address( ${1:\\$ip} )"
	"Sends a Link header for the REST API.":
		"prefix":"rest_output_link_header"
		"body":"rest_output_link_header()"
	"Outputs the REST API link tag into page header.":
		"prefix":"rest_output_link_wp_head"
		"body":"rest_output_link_wp_head()"
	"Adds the REST API URL to the WP RSD endpoint.":
		"prefix":"rest_output_rsd"
		"body":"rest_output_rsd()"
	"Parses an RFC3339 time into a Unix timestamp.":
		"prefix":"rest_parse_date"
		"body":"rest_parse_date( ${1:\\$date}${2:, \\$force_utc = false} )"
	"Parse a request argument based on details registered to the route.":
		"prefix":"rest_parse_request_arg"
		"body":"rest_parse_request_arg( ${1:\\$value}${2:, \\$request}${3:, \\$param} )"
	"Changes a boolean-like value into the proper boolean value.":
		"prefix":"rest_sanitize_boolean"
		"body":"rest_sanitize_boolean( ${1:\\$value} )"
	"Sanitize a request argument based on details registered to the route.":
		"prefix":"rest_sanitize_request_arg"
		"body":"rest_sanitize_request_arg( ${1:\\$value}${2:, \\$request}${3:, \\$param} )"
	"Sanitize a value based on a schema.":
		"prefix":"rest_sanitize_value_from_schema"
		"body":"rest_sanitize_value_from_schema( ${1:\\$value}${2:, \\$args} )"
	"Sends the &quot;Allow&quot; header to state all methods that can be sent to the current route.":
		"prefix":"rest_send_allow_header"
		"body":"rest_send_allow_header( ${1:\\$response}${2:, \\$server}${3:, \\$request} )"
	"Sends Cross-Origin Resource Sharing headers with API requests.":
		"prefix":"rest_send_cors_headers"
		"body":"rest_send_cors_headers( ${1:\\$value} )"
	"Retrieves the URL to a REST endpoint.":
		"prefix":"rest_url"
		"body":"rest_url( ${1:\\$path = ''}${2:, \\$scheme = 'json'} )"
	"Validate a request argument based on details registered to the route.":
		"prefix":"rest_validate_request_arg"
		"body":"rest_validate_request_arg( ${1:\\$value}${2:, \\$request}${3:, \\$param} )"
	"Validate a value based on a schema.":
		"prefix":"rest_validate_value_from_schema"
		"body":"rest_validate_value_from_schema( ${1:\\$value}${2:, \\$args}${3:, \\$param = ''} )"
	"Restore the current blog, after calling switch_to_blog()":
		"prefix":"restore_current_blog"
		"body":"restore_current_blog()"
	"Restores the translations according to the original locale.":
		"prefix":"restore_current_locale"
		"body":"restore_current_locale()"
	"Restores the translations according to the previous locale.":
		"prefix":"restore_previous_locale"
		"body":"restore_previous_locale()"
	"Handles sending password retrieval email to user.":
		"prefix":"retrieve_password"
		"body":"retrieve_password()"
	"Look for &quot;lost&quot; widgets, this has to run at least on each theme change.":
		"prefix":"retrieve_widgets"
		"body":"retrieve_widgets( ${1:\\$theme_changed = false} )"
	"Revokes Super Admin privileges.":
		"prefix":"revoke_super_admin"
		"body":"revoke_super_admin( ${1:\\$user_id} )"
	"Rewind the loop posts.":
		"prefix":"rewind_posts"
		"body":"rewind_posts()"
	"Determine if TinyMCE is available.":
		"prefix":"rich_edit_exists"
		"body":"rich_edit_exists()"
	"Display the link to the Really Simple Discovery service endpoint.":
		"prefix":"rsd_link"
		"body":"rsd_link()"
	"Displays Site Icon in RSS2.":
		"prefix":"rss2_site_icon"
		"body":"rss2_site_icon()"
	"Display the rss enclosure for the current post.":
		"prefix":"rss_enclosure"
		"body":"rss_enclosure()"
	"Inline CSS filter":
		"prefix":"safecss_filter_attr"
		"body":"safecss_filter_attr( ${1:\\$css}${2:, \\$deprecated = ''} )"
	"Sanitizes all bookmark fields":
		"prefix":"sanitize_bookmark"
		"body":"sanitize_bookmark( ${1:\\$bookmark}${2:, \\$context = 'display'} )"
	"Sanitizes a bookmark field.":
		"prefix":"sanitize_bookmark_field"
		"body":"sanitize_bookmark_field( ${1:\\$field}${2:, \\$value}${3:, \\$bookmark_id}${4:, \\$context} )"
	"Sanitizes category data based on context.":
		"prefix":"sanitize_category"
		"body":"sanitize_category( ${1:\\$category}${2:, \\$context = 'display'} )"
	"Sanitizes data in single category key field.":
		"prefix":"sanitize_category_field"
		"body":"sanitize_category_field( ${1:\\$field}${2:, \\$value}${3:, \\$cat_id}${4:, \\$context} )"
	"Sanitizes the cookies sent to the user already.":
		"prefix":"sanitize_comment_cookies"
		"body":"sanitize_comment_cookies()"
	"Strips out all characters that are not allowable in an email.":
		"prefix":"sanitize_email"
		"body":"sanitize_email( ${1:\\$email} )"
	"Sanitizes a filename, replacing whitespace with dashes.":
		"prefix":"sanitize_file_name"
		"body":"sanitize_file_name( ${1:\\$filename} )"
	"Sanitizes a hex color.":
		"prefix":"sanitize_hex_color"
		"body":"sanitize_hex_color( ${1:\\$color} )"
	"Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.":
		"prefix":"sanitize_hex_color_no_hash"
		"body":"sanitize_hex_color_no_hash( ${1:\\$color} )"
	"Sanitizes an HTML classname to ensure it only contains valid characters.":
		"prefix":"sanitize_html_class"
		"body":"sanitize_html_class( ${1:\\$class}${2:, \\$fallback = ''} )"
	"Sanitizes a string key.":
		"prefix":"sanitize_key"
		"body":"sanitize_key( ${1:\\$key} )"
	"Sanitize meta value.":
		"prefix":"sanitize_meta"
		"body":"sanitize_meta( ${1:\\$meta_key}${2:, \\$meta_value}${3:, \\$object_type} )"
	"Sanitize a mime type":
		"prefix":"sanitize_mime_type"
		"body":"sanitize_mime_type( ${1:\\$mime_type} )"
	"Sanitises various option values based on the nature of the option.":
		"prefix":"sanitize_option"
		"body":"sanitize_option( ${1:\\$option}${2:, \\$value} )"
	"Sanitize every post field.":
		"prefix":"sanitize_post"
		"body":"sanitize_post( ${1:\\$post}${2:, \\$context = 'display'} )"
	"Sanitize post field based on context.":
		"prefix":"sanitize_post_field"
		"body":"sanitize_post_field( ${1:\\$field}${2:, \\$value}${3:, \\$post_id}${4:, \\$context = 'display'} )"
	"Ensures a string is a valid SQL 'order by' clause.":
		"prefix":"sanitize_sql_orderby"
		"body":"sanitize_sql_orderby( ${1:\\$orderby} )"
	"Sanitize Term all fields.":
		"prefix":"sanitize_term"
		"body":"sanitize_term( ${1:\\$term}${2:, \\$taxonomy}${3:, \\$context = 'display'} )"
	"Cleanse the field value in the term based on the context.":
		"prefix":"sanitize_term_field"
		"body":"sanitize_term_field( ${1:\\$field}${2:, \\$value}${3:, \\$term_id}${4:, \\$taxonomy}${5:, \\$context} )"
	"Sanitizes a string from user input or from the database.":
		"prefix":"sanitize_text_field"
		"body":"sanitize_text_field( ${1:\\$str} )"
	"Sanitizes a multiline string from user input or from the database.":
		"prefix":"sanitize_textarea_field"
		"body":"sanitize_textarea_field( ${1:\\$str} )"
	"Sanitizes a title, or returns a fallback title.":
		"prefix":"sanitize_title"
		"body":"sanitize_title( ${1:\\$title}${2:, \\$fallback_title = ''}${3:, \\$context = 'save'} )"
	"Sanitizes a title with the 'query' context.":
		"prefix":"sanitize_title_for_query"
		"body":"sanitize_title_for_query( ${1:\\$title} )"
	"Sanitizes a title, replacing whitespace and a few other characters with dashes.":
		"prefix":"sanitize_title_with_dashes"
		"body":"sanitize_title_with_dashes( ${1:\\$title}${2:, \\$raw_title = ''}${3:, \\$context = 'display'} )"
	"Sanitize space or carriage return separated URLs that are used to send trackbacks.":
		"prefix":"sanitize_trackback_urls"
		"body":"sanitize_trackback_urls( ${1:\\$to_ping} )"
	"Performs esc_url() for database or redirect usage.":
		"prefix":"sanitize_url"
		"body":"sanitize_url( ${1:\\$url}${2:, \\$protocols = null} )"
	"Sanitizes a username, stripping out unsafe characters.":
		"prefix":"sanitize_user"
		"body":"sanitize_user( ${1:\\$username}${2:, \\$strict = false} )"
	"Sanitize user field based on context.":
		"prefix":"sanitize_user_field"
		"body":"sanitize_user_field( ${1:\\$field}${2:, \\$value}${3:, \\$user_id}${4:, \\$context} )"
	"Sanitize every user field.":
		"prefix":"sanitize_user_object"
		"body":"sanitize_user_object( ${1:\\$user}${2:, \\$context = 'display'} )"
	"Updates the htaccess file with the current rules if it is writable.":
		"prefix":"save_mod_rewrite_rules"
		"body":"save_mod_rewrite_rules()"
	"Saves the XML document into a file":
		"prefix":"savedomdocument"
		"body":"savedomdocument( ${1:\\$doc}${2:, \\$filename} )"
	"Displays a screen icon.":
		"prefix":"screen_icon"
		"body":"screen_icon()"
	"Returns the screen layout options.":
		"prefix":"screen_layout"
		"body":"screen_layout()"
	"Renders the screen's help.":
		"prefix":"screen_meta"
		"body":"screen_meta()"
	"Returns the screen's per-page options.":
		"prefix":"screen_options"
		"body":"screen_options()"
	"Determine the concatenation and compression settings for scripts and styles.":
		"prefix":"script_concat_settings"
		"body":"script_concat_settings()"
	"Search all registered theme directories for complete and valid themes.":
		"prefix":"search_theme_directories"
		"body":"search_theme_directories( ${1:\\$force = false} )"
	"Checks to see if a string is utf8 encoded.":
		"prefix":"seems_utf8"
		"body":"seems_utf8( ${1:\\$str} )"
	"Outputs the html selected attribute.":
		"prefix":"selected"
		"body":"selected( ${1:\\$selected}${2:, \\$current = true}${3:, \\$echo = true} )"
	"Retrieves the URL to the admin area for either the current site or the network depending on context.":
		"prefix":"self_admin_url"
		"body":"self_admin_url( ${1:\\$path = ''}${2:, \\$scheme = 'admin'} )"
	"Display the link for the currently displayed feed in a XSS safe way.":
		"prefix":"self_link"
		"body":"self_link()"
	"Sends an email when an email address change is requested.":
		"prefix":"send_confirmation_on_profile_email"
		"body":"send_confirmation_on_profile_email()"
	"Send a HTTP header to limit rendering of pages to same origin iframes.":
		"prefix":"send_frame_options_header"
		"body":"send_frame_options_header()"
	"Send a HTTP header to disable content type sniffing in browsers which support it.":
		"prefix":"send_nosniff_header"
		"body":"send_nosniff_header()"
	"Send Access-Control-Allow-Origin and related headers if the current request
is from an allowed origin.":
		"prefix":"send_origin_headers"
		"body":"send_origin_headers()"
	"Separates an array of comments into an array keyed by comment_type.":
		"prefix":"separate_comments"
		"body":"separate_comments( ${1:\\$comments} )"
	"Set the current screen object":
		"prefix":"set_current_screen"
		"body":"set_current_screen( ${1:\\$hook_name = ''} )"
	"Changes the current user by ID or name. set_current_user":
		"prefix":"set_current_user"
		"body":"set_current_user( ${1:\\$id}${2:, \\$name = ''} )"
	"Assign a format to a post":
		"prefix":"set_post_format"
		"body":"set_post_format( ${1:\\$post}${2:, \\$format} )"
	"Set a post thumbnail.":
		"prefix":"set_post_thumbnail"
		"body":"set_post_thumbnail( ${1:\\$post}${2:, \\$thumbnail_id} )"
	"Registers an image size for the post thumbnail.":
		"prefix":"set_post_thumbnail_size"
		"body":"set_post_thumbnail_size( ${1:\\$width}${2:, \\$height}${3:, \\$crop = false} )"
	"Update the post type for the post ID.":
		"prefix":"set_post_type"
		"body":"set_post_type( ${1:\\$post_id}${2:, \\$post_type = 'post'} )"
	"Set query variable.":
		"prefix":"set_query_var"
		"body":"set_query_var( ${1:\\$var}${2:, \\$value} )"
	"Saves option for number of rows when listing posts, pages, comments, etc.":
		"prefix":"set_screen_options"
		"body":"set_screen_options()"
	"Set/update the value of a site transient.":
		"prefix":"set_site_transient"
		"body":"set_site_transient( ${1:\\$transient}${2:, \\$value}${3:, \\$expiration} )"
	"Update theme modification value for the current theme.":
		"prefix":"set_theme_mod"
		"body":"set_theme_mod( ${1:\\$name}${2:, \\$value} )"
	"Set/update the value of a transient.":
		"prefix":"set_transient"
		"body":"set_transient( ${1:\\$transient}${2:, \\$value}${3:, \\$expiration} )"
	"Sets the scheme for a URL.":
		"prefix":"set_url_scheme"
		"body":"set_url_scheme( ${1:\\$url}${2:, \\$scheme = null} )"
	"Add or update user interface setting.":
		"prefix":"set_user_setting"
		"body":"set_user_setting( ${1:\\$name}${2:, \\$value} )"
	"Display settings errors registered by add_settings_error().":
		"prefix":"settings_errors"
		"body":"settings_errors( ${1:\\$setting = ''}${2:, \\$sanitize = false}${3:, \\$hide_on_update = false} )"
	"Output nonce, action, and option_page fields for a settings page.":
		"prefix":"settings_fields"
		"body":"settings_fields( ${1:\\$option_group} )"
	"setup_config_display_header":
		"prefix":"setup_config_display_header"
		"body":"setup_config_display_header()"
	"Set up global post data.":
		"prefix":"setup_postdata"
		"body":"setup_postdata( ${1:\\$post} )"
	"Set up global user vars.":
		"prefix":"setup_userdata"
		"body":"setup_userdata( ${1:\\$for_user_id = ''} )"
	"Combine user attributes with known attributes and fill in defaults when needed.":
		"prefix":"shortcode_atts"
		"body":"shortcode_atts( ${1:\\$pairs}${2:, \\$atts}${3:, \\$shortcode = ''} )"
	"Whether a registered shortcode exists named $tag":
		"prefix":"shortcode_exists"
		"body":"shortcode_exists( ${1:\\$tag} )"
	"Retrieve all attributes from the shortcodes tag.":
		"prefix":"shortcode_parse_atts"
		"body":"shortcode_parse_atts( ${1:\\$text} )"
	"Don't auto-p wrap shortcodes that stand alone":
		"prefix":"shortcode_unautop"
		"body":"shortcode_unautop( ${1:\\$pee} )"
	"Sets the display status of the admin bar.":
		"prefix":"show_admin_bar"
		"body":"show_admin_bar( ${1:\\$show} )"
	"Generates and displays the Signup and Create Site forms":
		"prefix":"show_blog_form"
		"body":"show_blog_form( ${1:\\$blogname = ''}${2:, \\$blog_title = ''}${3:, \\$errors = ''} )"
	"Displays the given administration message.":
		"prefix":"show_message"
		"body":"show_message( ${1:\\$message} )"
	"Display user registration form":
		"prefix":"show_user_form"
		"body":"show_user_form( ${1:\\$user_name = ''}${2:, \\$user_email = ''}${3:, \\$errors = ''} )"
	"Runs just before PHP shuts down execution.":
		"prefix":"shutdown_action_hook"
		"body":"shutdown_action_hook()"
	"Allow returning users to sign up for another site":
		"prefix":"signup_another_blog"
		"body":"signup_another_blog( ${1:\\$blogname = ''}${2:, \\$blog_title = ''}${3:, \\$errors = ''} )"
	"Setup the new site signup":
		"prefix":"signup_blog"
		"body":"signup_blog( ${1:\\$user_name = ''}${2:, \\$user_email = ''}${3:, \\$blogname = ''}${4:, \\$blog_title = ''}${5:, \\$errors = ''} )"
	"Retrieves languages available during the site/user signup process.":
		"prefix":"signup_get_available_languages"
		"body":"signup_get_available_languages()"
	"Process the signup nonce created in signup_nonce_fields().":
		"prefix":"signup_nonce_check"
		"body":"signup_nonce_check( ${1:\\$result} )"
	"Add a nonce field to the signup page.":
		"prefix":"signup_nonce_fields"
		"body":"signup_nonce_fields()"
	"Setup the new user signup process":
		"prefix":"signup_user"
		"body":"signup_user( ${1:\\$user_name = ''}${2:, \\$user_email = ''}${3:, \\$errors = ''} )"
	"Display or retrieve page title for category archive.":
		"prefix":"single_cat_title"
		"body":"single_cat_title( ${1:\\$prefix = ''}${2:, \\$display = true} )"
	"Display or retrieve page title for post archive based on date.":
		"prefix":"single_month_title"
		"body":"single_month_title( ${1:\\$prefix = ''}${2:, \\$display = true} )"
	"Display or retrieve page title for post.":
		"prefix":"single_post_title"
		"body":"single_post_title( ${1:\\$prefix = ''}${2:, \\$display = true} )"
	"Display or retrieve page title for tag post archive.":
		"prefix":"single_tag_title"
		"body":"single_tag_title( ${1:\\$prefix = ''}${2:, \\$display = true} )"
	"Display or retrieve page title for taxonomy term archive.":
		"prefix":"single_term_title"
		"body":"single_term_title( ${1:\\$prefix = ''}${2:, \\$display = true} )"
	"Displays an admin notice to upgrade all sites after a core upgrade.":
		"prefix":"site_admin_notice"
		"body":"site_admin_notice()"
	"Displays the Site Icon URL.":
		"prefix":"site_icon_url"
		"body":"site_icon_url( ${1:\\$size = 512}${2:, \\$url = ''}${3:, \\$blog_id} )"
	"Retrieves the URL for the current site where WordPress application files
(e.g. wp-blog-header.php or the wp-admin/ folder) are accessible.":
		"prefix":"site_url"
		"body":"site_url( ${1:\\$path = ''}${2:, \\$scheme = null} )"
	"Convert number of bytes largest unit bytes will fit into.":
		"prefix":"size_format"
		"body":"size_format( ${1:\\$bytes}${2:, \\$decimals} )"
	"Convert smiley code to the icon graphic file equivalent.":
		"prefix":"smilies_init"
		"body":"smilies_init()"
	"sort_menu":
		"prefix":"sort_menu"
		"body":"sort_menu( ${1:\\$a}${2:, \\$b} )"
	"Sends a request to run cron through HTTP request that doesn't halt page loading.":
		"prefix":"spawn_cron"
		"body":"spawn_cron( ${1:\\$gmt_time} )"
	"Retrieves the registered autoloader functions.":
		"prefix":"spl_autoload_functions"
		"body":"spl_autoload_functions()"
	"Registers a function to be autoloaded.":
		"prefix":"spl_autoload_register"
		"body":"spl_autoload_register( ${1:\\$autoload_function}${2:, \\$throw = true}${3:, \\$prepend = false} )"
	"Unregisters an autoloader function.":
		"prefix":"spl_autoload_unregister"
		"body":"spl_autoload_unregister( ${1:\\$function} )"
	"Display relational link for the first post.":
		"prefix":"start_post_rel_link"
		"body":"start_post_rel_link( ${1:\\$title = '%title'}${2:, \\$in_same_cat = false}${3:, \\$excluded_categories = ''} )"
	"Sets up the WordPress Loop.":
		"prefix":"start_wp"
		"body":"start_wp()"
	"XML callback function for the start of a new XML tag.":
		"prefix":"startelement"
		"body":"startelement( ${1:\\$parser}${2:, \\$tagName}${3:, \\$attrs} )"
	"Set HTTP status header.":
		"prefix":"status_header"
		"body":"status_header( ${1:\\$code}${2:, \\$description = ''} )"
	"Make a post sticky.":
		"prefix":"stick_post"
		"body":"stick_post( ${1:\\$post_id} )"
	"Display &quot;sticky&quot; CSS class, if a post is sticky.":
		"prefix":"sticky_class"
		"body":"sticky_class( ${1:\\$post_id = null} )"
	"Streams image in post to browser, along with enqueued changes
in $_REQUEST['history']":
		"prefix":"stream_preview_image"
		"body":"stream_preview_image( ${1:\\$post_id} )"
	"Strips the #fragment from a URL, if one is present.":
		"prefix":"strip_fragment_from_url"
		"body":"strip_fragment_from_url( ${1:\\$url} )"
	"Strips a shortcode tag based on RegEx matches against post content.":
		"prefix":"strip_shortcode_tag"
		"body":"strip_shortcode_tag( ${1:\\$m} )"
	"Remove all shortcode tags from the given content.":
		"prefix":"strip_shortcodes"
		"body":"strip_shortcodes( ${1:\\$content} )"
	"Navigates through an array, object, or scalar, and removes slashes from the values.":
		"prefix":"stripslashes_deep"
		"body":"stripslashes_deep( ${1:\\$value} )"
	"Callback function for `stripslashes_deep()` which strips slashes from strings.":
		"prefix":"stripslashes_from_strings_only"
		"body":"stripslashes_from_strings_only( ${1:\\$value} )"
	"Echoes a submit button, with provided text and appropriate class(es).":
		"prefix":"submit_button"
		"body":"submit_button( ${1:\\$text = null}${2:, \\$type = 'primary'}${3:, \\$name = 'submit'}${4:, \\$wrap = true}${5:, \\$other_attributes = null} )"
	"Switches the theme.":
		"prefix":"switch_theme"
		"body":"switch_theme( ${1:\\$stylesheet} )"
	"Switch the current blog.":
		"prefix":"switch_to_blog"
		"body":"switch_to_blog( ${1:\\$new_blog}${2:, \\$deprecated = null} )"
	"Switches the translations according to the given locale.":
		"prefix":"switch_to_locale"
		"body":"switch_to_locale( ${1:\\$locale} )"
	"Synchronize category and post tag slugs when global terms are enabled.":
		"prefix":"sync_category_tag_slugs"
		"body":"sync_category_tag_slugs( ${1:\\$term}${2:, \\$taxonomy} )"
	"Retrieve tag description.":
		"prefix":"tag_description"
		"body":"tag_description( ${1:\\$tag} )"
	"Escape an HTML tag name.":
		"prefix":"tag_escape"
		"body":"tag_escape( ${1:\\$tag_name} )"
	"Check whether a post tag with a given name exists.":
		"prefix":"tag_exists"
		"body":"tag_exists( ${1:\\$tag_name} )"
	"Checks that the taxonomy name exists. taxonomy_exists":
		"prefix":"taxonomy_exists"
		"body":"taxonomy_exists( ${1:\\$taxonomy} )"
	"Retrieve term description.":
		"prefix":"term_description"
		"body":"term_description( ${1:\\$term}${2:, \\$taxonomy = 'post_tag'} )"
	"Check if Term exists term_exists.":
		"prefix":"term_exists"
		"body":"term_exists( ${1:\\$term}${2:, \\$taxonomy = ''}${3:, \\$parent = null} )"
	"Check if a term is an ancestor of another term.":
		"prefix":"term_is_ancestor_of"
		"body":"term_is_ancestor_of( ${1:\\$term1}${2:, \\$term2}${3:, \\rel$taxonomy} )"
	"Display category, tag, term, or author description.":
		"prefix":"the_archive_description"
		"body":"the_archive_description( ${1:\\$before = ''}${2:, \\$after = ''} )"
	"Display the archive title based on the queried object.":
		"prefix":"the_archive_title"
		"body":"the_archive_title( ${1:\\$before = ''}${2:, \\$after = ''} )"
	"Display an attachment page link using an image or icon.":
		"prefix":"the_attachment_link"
		"body":"the_attachment_link( ${1:\\$id}${2:, \\$fullsize = false}${3:, \\$deprecated = false}${4:, \\$permalink = false} )"
	"This was once used to display attachment links. Now it is deprecated and stubbed.":
		"prefix":"the_attachment_links"
		"body":"the_attachment_links( ${1:\\$id = false} )"
	"Display the name of the author of the current post.":
		"prefix":"the_author"
		"body":"the_author( ${1:\\$deprecated = ''}${2:, \\$deprecated_echo = true} )"
	"Display the AIM address of the author of the current post.":
		"prefix":"the_author_aim"
		"body":"the_author_aim()"
	"Display the description of the author of the current post.":
		"prefix":"the_author_description"
		"body":"the_author_description()"
	"Display the email of the author of the current post.":
		"prefix":"the_author_email"
		"body":"the_author_email()"
	"Display the first name of the author of the current post.":
		"prefix":"the_author_firstname"
		"body":"the_author_firstname()"
	"Display the ICQ number of the author of the current post.":
		"prefix":"the_author_icq"
		"body":"the_author_icq()"
	"Display the ID of the author of the current post.":
		"prefix":"the_author_id"
		"body":"the_author_id()"
	"Display the last name of the author of the current post.":
		"prefix":"the_author_lastname"
		"body":"the_author_lastname()"
	"Display either author's link or author's name.":
		"prefix":"the_author_link"
		"body":"the_author_link()"
	"Display the login name of the author of the current post.":
		"prefix":"the_author_login"
		"body":"the_author_login()"
	"Outputs the field from the user's DB object. Defaults to current post's author.":
		"prefix":"the_author_meta"
		"body":"the_author_meta( ${1:\\$field = ''}${2:, \\$user_id = false} )"
	"Display the MSN address of the author of the current post.":
		"prefix":"the_author_msn"
		"body":"the_author_msn()"
	"Display the nickname of the author of the current post.":
		"prefix":"the_author_nickname"
		"body":"the_author_nickname()"
	"Display the number of posts by the author of the current post.":
		"prefix":"the_author_posts"
		"body":"the_author_posts()"
	"Displays an HTML link to the author page of the current post's author.":
		"prefix":"the_author_posts_link"
		"body":"the_author_posts_link( ${1:\\$deprecated = ''} )"
	"Display the URL to the home page of the author of the current post.":
		"prefix":"the_author_url"
		"body":"the_author_url()"
	"Display the Yahoo! IM name of the author of the current post.":
		"prefix":"the_author_yim"
		"body":"the_author_yim()"
	"Display category list for a post in either HTML list or custom format.":
		"prefix":"the_category"
		"body":"the_category( ${1:\\$separator = ''}${2:, \\$parents = ''}${3:, \\$post_id = false} )"
	"Prints a category with optional text before and after.":
		"prefix":"the_category_head"
		"body":"the_category_head( ${1:\\$before = ''}${2:, \\$after = ''} )"
	"Returns or prints a category ID.":
		"prefix":"the_category_id"
		"body":"the_category_id( ${1:\\$echo = true} )"
	"Display the post categories in the feed.":
		"prefix":"the_category_rss"
		"body":"the_category_rss( ${1:\\$type = null} )"
	"Iterate comment index in the comment loop.":
		"prefix":"the_comment"
		"body":"the_comment()"
	"Displays navigation to next/previous set of comments, when applicable.":
		"prefix":"the_comments_navigation"
		"body":"the_comments_navigation( ${1:\\$args = array()} )"
	"Displays a paginated navigation to next/previous set of comments, when applicable.":
		"prefix":"the_comments_pagination"
		"body":"the_comments_pagination( ${1:\\$args = array()} )"
	"Display the post content.":
		"prefix":"the_content"
		"body":"the_content( ${1:\\$more_link_text = null}${2:, \\$strip_teaser = false} )"
	"Display the post content for feeds.":
		"prefix":"the_content_feed"
		"body":"the_content_feed( ${1:\\$feed_type = null} )"
	"Display the post content for the feed.":
		"prefix":"the_content_rss"
		"body":"the_content_rss( ${1:\\$more_link_text = '(more...)'}${2:, \\$stripteaser}${3:, \\$more_file = ''}${4:, \\$cut}${5:, \\$encode_html} )"
	"Print the markup for a custom header.":
		"prefix":"the_custom_header_markup"
		"body":"the_custom_header_markup()"
	"Displays a custom logo, linked to home.":
		"prefix":"the_custom_logo"
		"body":"the_custom_logo( ${1:\\$blog_id} )"
	"Display or Retrieve the date the current post was written (once per date)":
		"prefix":"the_date"
		"body":"the_date( ${1:\\$d = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$echo = true} )"
	"Outputs the date in iso8601 format for xml files.":
		"prefix":"the_date_xml"
		"body":"the_date_xml()"
	"Displays an editor: TinyMCE, HTML, or both.":
		"prefix":"the_editor"
		"body":"the_editor( ${1:\\$content}${2:, \\$id = 'content'}${3:, \\$prev_id = 'title'}${4:, \\$media_buttons = true}${5:, \\$tab_index = 2}${6:, \\$extended = true} )"
	"Prints the necessary markup for the site title in an embed template.":
		"prefix":"the_embed_site_title"
		"body":"the_embed_site_title()"
	"Display the post excerpt.":
		"prefix":"the_excerpt"
		"body":"the_excerpt()"
	"Displays the post excerpt for the embed template.":
		"prefix":"the_excerpt_embed"
		"body":"the_excerpt_embed()"
	"Display the post excerpt for the feed.":
		"prefix":"the_excerpt_rss"
		"body":"the_excerpt_rss()"
	"Displays the permalink for the feed type.":
		"prefix":"the_feed_link"
		"body":"the_feed_link( ${1:\\$anchor}${2:, \\$feed = ''} )"
	"Display the generator XML or Comment for RSS, ATOM, etc.":
		"prefix":"the_generator"
		"body":"the_generator( ${1:\\$type} )"
	"Display the Post Global Unique Identifier (guid).":
		"prefix":"the_guid"
		"body":"the_guid( ${1:\\$post} )"
	"Display the image markup for a custom header image.":
		"prefix":"the_header_image_tag"
		"body":"the_header_image_tag( ${1:\\$attr = array()} )"
	"Display header video URL.":
		"prefix":"the_header_video_url"
		"body":"the_header_video_url()"
	"Display the ID of the current item in the WordPress Loop.":
		"prefix":"the_id"
		"body":"the_id()"
	"Outputs the legacy media upload tabs UI.":
		"prefix":"the_media_upload_tabs"
		"body":"the_media_upload_tabs()"
	"Display list of post custom fields.":
		"prefix":"the_meta"
		"body":"the_meta()"
	"Display the name of the author who last edited the current post,
if the author's ID is available.":
		"prefix":"the_modified_author"
		"body":"the_modified_author()"
	"Display the date on which the post was last modified.":
		"prefix":"the_modified_date"
		"body":"the_modified_date( ${1:\\$d = ''}${2:, \\$before = ''}${3:, \\$after = ''}${4:, \\$echo = true} )"
	"Display the time at which the post was last modified.":
		"prefix":"the_modified_time"
		"body":"the_modified_time( ${1:\\$d = ''} )"
	"Displays the permalink for the current post.":
		"prefix":"the_permalink"
		"body":"the_permalink( ${1:\\$post} )"
	"Display the permalink to the post for use in feeds.":
		"prefix":"the_permalink_rss"
		"body":"the_permalink_rss()"
	"Iterate the post index in the loop.":
		"prefix":"the_post"
		"body":"the_post()"
	"Displays the navigation to next/previous post, when applicable.":
		"prefix":"the_post_navigation"
		"body":"the_post_navigation( ${1:\\$args = array()} )"
	"Displays the post password.":
		"prefix":"the_post_password"
		"body":"the_post_password()"
	"Display the post thumbnail.":
		"prefix":"the_post_thumbnail"
		"body":"the_post_thumbnail( ${1:\\$size = 'post-thumbnail'}${2:, \\$attr = ''} )"
	"Displays the post thumbnail caption.":
		"prefix":"the_post_thumbnail_caption"
		"body":"the_post_thumbnail_caption( ${1:\\$post = null} )"
	"Display the post thumbnail URL.":
		"prefix":"the_post_thumbnail_url"
		"body":"the_post_thumbnail_url( ${1:\\$size = 'post-thumbnail'} )"
	"Displays the navigation to next/previous set of posts, when applicable.":
		"prefix":"the_posts_navigation"
		"body":"the_posts_navigation( ${1:\\$args = array()} )"
	"Displays a paginated navigation to next/previous set of posts, when applicable.":
		"prefix":"the_posts_pagination"
		"body":"the_posts_pagination( ${1:\\$args = array()} )"
	"Displays the contents of the search query variable.":
		"prefix":"the_search_query"
		"body":"the_search_query()"
	"Displays the shortlink for a post.":
		"prefix":"the_shortlink"
		"body":"the_shortlink( ${1:\\$text = ''}${2:, \\$title = ''}${3:, \\$before = ''}${4:, \\$after = ''} )"
	"Retrieve the tags for a post. the_tags":
		"prefix":"the_tags"
		"body":"the_tags( ${1:\\$before = null}${2:, \\$sep = ', '}${3:, \\$after = ''} )"
	"Display the taxonomies of a post with available options.":
		"prefix":"the_taxonomies"
		"body":"the_taxonomies( ${1:\\$args = array()} )"
	"Display the terms in a list.":
		"prefix":"the_terms"
		"body":"the_terms( ${1:\\$id}${2:, \\$taxonomy}${3:, \\$before = ''}${4:, \\$sep = ', '}${5:, \\$after = ''} )"
	"Display the time at which the post was written.":
		"prefix":"the_time"
		"body":"the_time( ${1:\\$d = ''} )"
	"Display or retrieve the current post title with optional markup.":
		"prefix":"the_title"
		"body":"the_title( ${1:\\$before = ''}${2:, \\$after = ''}${3:, \\$echo = true} )"
	"Sanitize the current title when retrieving or displaying.":
		"prefix":"the_title_attribute"
		"body":"the_title_attribute( ${1:\\$args = ''} )"
	"Display the post title in the feed.":
		"prefix":"the_title_rss"
		"body":"the_title_rss()"
	"Display the weekday on which the post was written. the_weekdayre":
		"prefix":"the_weekday"
		"body":"the_weekday()"
	"Display the weekday on which the post was written.":
		"prefix":"the_weekday_date"
		"body":"the_weekday_date( ${1:\\$before = ''}${2:, \\$after = ''} )"
	"Output an arbitrary widget as a template tag.":
		"prefix":"the_widget"
		"body":"the_widget( ${1:\\$widget}${2:, \\$instance = array()}${3:, \\$args = array()} )"
	"Check if there is an update for a theme available.":
		"prefix":"theme_update_available"
		"body":"theme_update_available( ${1:\\$theme} )"
	"Retrieves theme installer pages from the WordPress.org Themes API.":
		"prefix":"themes_api"
		"body":"themes_api( ${1:\\$action}${2:, \\$args = array()} )"
	"Start the WordPress micro-timer.":
		"prefix":"timer_start"
		"body":"timer_start()"
	"Retrieve or display the time from the page start to when function is called.":
		"prefix":"timer_stop"
		"body":"timer_stop( ${1:\\$display}${2:, \\$precision = 3} )"
	"tinymce_include":
		"prefix":"tinymce_include"
		"body":"tinymce_include()"
	"Print out HTML form date elements for editing post or comment publish date.":
		"prefix":"touch_time"
		"body":"touch_time( ${1:\\$edit = 1}${2:, \\$for_post = 1}${3:, \\$tab_index}${4:, \\$multi} )"
	"Send a Trackback.":
		"prefix":"trackback"
		"body":"trackback( ${1:\\$trackback_url}${2:, \\$title}${3:, \\$excerpt}${4:, \\$ID} )"
	"Generate and display the RDF for the trackback information of current post.":
		"prefix":"trackback_rdf"
		"body":"trackback_rdf( ${1:\\$deprecated = ''} )"
	"Response to a trackback.":
		"prefix":"trackback_response"
		"body":"trackback_response( ${1:\\$error}${2:, \\$error_message = ''} )"
	"Display the current post's trackback URL.":
		"prefix":"trackback_url"
		"body":"trackback_url( ${1:\\$deprecated_echo = true} )"
	"Do trackbacks for a list of URLs.":
		"prefix":"trackback_url_list"
		"body":"trackback_url_list( ${1:\\$tb_list}${2:, \\$post_id} )"
	"Appends a trailing slash.":
		"prefix":"trailingslashit"
		"body":"trailingslashit( ${1:\\$string} )"
	"Retrieve the translation of $text. translate":
		"prefix":"translate"
		"body":"translate( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Translate user level to user role name.":
		"prefix":"translate_level_to_role"
		"body":"translate_level_to_role( ${1:\\$level} )"
	"Translates and retrieves the singular or plural form of a string that's been registered
with _n_noop() or _nx_noop().":
		"prefix":"translate_nooped_plural"
		"body":"translate_nooped_plural( ${1:\\$nooped_plural}${2:, \\$count}${3:, \\$domain = 'default'} )"
	"Convert one smiley code to the icon graphic file equivalent.":
		"prefix":"translate_smiley"
		"body":"translate_smiley( ${1:\\$matches} )"
	"Translates role name.":
		"prefix":"translate_user_role"
		"body":"translate_user_role( ${1:\\$name} )"
	"Translates $text like translate(), but assumes that the text
contains a context after its last vertical bar.":
		"prefix":"translate_with_context"
		"body":"translate_with_context( ${1:\\$text}${2:, \\$domain = 'default'} )"
	"Retrieve the translation of $text in the context defined in $context.":
		"prefix":"translate_with_gettext_context"
		"body":"translate_with_gettext_context( ${1:\\$text}${2:, \\$context}${3:, \\$domain = 'default'} )"
	"Retrieve translations from WordPress Translation API.":
		"prefix":"translations_api"
		"body":"translations_api( ${1:\\$type}${2:, \\$args = null} )"
	"Handles retrieving the insert-from-URL form for an audio file.":
		"prefix":"type_url_form_audio"
		"body":"type_url_form_audio()"
	"Handles retrieving the insert-from-URL form for a generic file.":
		"prefix":"type_url_form_file"
		"body":"type_url_form_file()"
	"Handles retrieving the insert-from-URL form for an image.":
		"prefix":"type_url_form_image"
		"body":"type_url_form_image()"
	"Handles retrieving the insert-from-URL form for a video file.":
		"prefix":"type_url_form_video"
		"body":"type_url_form_video()"
	"undismiss_core_update":
		"prefix":"undismiss_core_update"
		"body":"undismiss_core_update( ${1:\\$version}${2:, \\$locale} )"
	"Remove placeholders added by do_shortcodes_in_html_tags().":
		"prefix":"unescape_invalid_shortcodes"
		"body":"unescape_invalid_shortcodes( ${1:\\$content} )"
	"Uninstall a single plugin.":
		"prefix":"uninstall_plugin"
		"body":"uninstall_plugin( ${1:\\$plugin} )"
	"Unload translations for a text domain.":
		"prefix":"unload_textdomain"
		"body":"unload_textdomain( ${1:\\$domain} )"
	"Unregister default headers.":
		"prefix":"unregister_default_headers"
		"body":"unregister_default_headers( ${1:\\$header} )"
	"Unregisters a meta key from the list of registered keys.":
		"prefix":"unregister_meta_key"
		"body":"unregister_meta_key( ${1:\\$object_type}${2:, \\$meta_key} )"
	"Unregisters a navigation menu location for a theme.":
		"prefix":"unregister_nav_menu"
		"body":"unregister_nav_menu( ${1:\\$location} )"
	"Unregisters a post type.":
		"prefix":"unregister_post_type"
		"body":"unregister_post_type( ${1:\\$post_type} )"
	"Unregister a setting.":
		"prefix":"unregister_setting"
		"body":"unregister_setting( ${1:\\$option_group}${2:, \\$option_name}${3:, \\$deprecated = ''} )"
	"Removes a sidebar from the list.":
		"prefix":"unregister_sidebar"
		"body":"unregister_sidebar( ${1:\\$sidebar_id} )"
	"Serves as an alias of wp_unregister_sidebar_widget().":
		"prefix":"unregister_sidebar_widget"
		"body":"unregister_sidebar_widget( ${1:\\$id} )"
	"Unregisters a taxonomy.":
		"prefix":"unregister_taxonomy"
		"body":"unregister_taxonomy( ${1:\\$taxonomy} )"
	"Remove an already registered taxonomy from an object type.":
		"prefix":"unregister_taxonomy_for_object_type"
		"body":"unregister_taxonomy_for_object_type( ${1:\\$taxonomy}${2:, \\$object_type} )"
	"Unregisters a widget.":
		"prefix":"unregister_widget"
		"body":"unregister_widget( ${1:\\$widget_class} )"
	"Alias of wp_unregister_widget_control().":
		"prefix":"unregister_widget_control"
		"body":"unregister_widget_control( ${1:\\$id} )"
	"Un-stick a post.":
		"prefix":"unstick_post"
		"body":"unstick_post( ${1:\\$post_id} )"
	"Removes trailing forward slashes and backslashes if they exist.":
		"prefix":"untrailingslashit"
		"body":"untrailingslashit( ${1:\\$string} )"
	"Unzips a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction.":
		"prefix":"unzip_file"
		"body":"unzip_file( ${1:\\$file}${2:, \\$to} )"
	"Update the 'archived' status of a particular blog.":
		"prefix":"update_archived"
		"body":"update_archived( ${1:\\$id}${2:, \\$archived} )"
	"Update attachment file path based on attachment ID.":
		"prefix":"update_attached_file"
		"body":"update_attached_file( ${1:\\$attachment_id}${2:, \\$file} )"
	"Update the details for a blog. Updates the blogs table for a given blog id.":
		"prefix":"update_blog_details"
		"body":"update_blog_details( ${1:\\$blog_id}${2:, \\$details = array()} )"
	"Update an option for a particular blog.":
		"prefix":"update_blog_option"
		"body":"update_blog_option( ${1:\\$id}${2:, \\$option}${3:, \\$value}${4:, \\$deprecated = null} )"
	"Update this blog's 'public' setting in the global blogs table.":
		"prefix":"update_blog_public"
		"body":"update_blog_public( ${1:\\$old_value}${2:, \\$value} )"
	"Update a blog details field.":
		"prefix":"update_blog_status"
		"body":"update_blog_status( ${1:\\$blog_id}${2:, \\$pref}${3:, \\$value}${4:, \\$deprecated = null} )"
	"Update the categories cache.":
		"prefix":"update_category_cache"
		"body":"update_category_cache()"
	"Updates the comment cache of given comments.":
		"prefix":"update_comment_cache"
		"body":"update_comment_cache( ${1:\\$comments}${2:, \\$update_meta_cache = true} )"
	"Update comment meta field based on comment ID.":
		"prefix":"update_comment_meta"
		"body":"update_comment_meta( ${1:\\$comment_id}${2:, \\$meta_key}${3:, \\$meta_value}${4:, \\$prev_value = ''} )"
	"Upgrades the core of WordPress.":
		"prefix":"update_core"
		"body":"update_core( ${1:\\$from}${2:, \\$to} )"
	"Adds the gallery tab back to the tabs array if post has image attachments":
		"prefix":"update_gallery_tab"
		"body":"update_gallery_tab( ${1:\\$tabs} )"
	"Flushes rewrite rules if siteurl, home or page_on_front changed.":
		"prefix":"update_home_siteurl"
		"body":"update_home_siteurl( ${1:\\$old_value}${2:, \\$value} )"
	"Update post meta data by meta ID.":
		"prefix":"update_meta"
		"body":"update_meta( ${1:\\$meta_id}${2:, \\$meta_key}${3:, \\$meta_value} )"
	"Update the metadata cache for the specified objects.":
		"prefix":"update_meta_cache"
		"body":"update_meta_cache( ${1:\\$meta_type}${2:, \\$object_ids} )"
	"Update metadata for the specified object. If no value already exists for the specified object
ID and metadata key, the metadata will be added.":
		"prefix":"update_metadata"
		"body":"update_metadata( ${1:\\$meta_type}${2:, \\$object_id}${3:, \\$meta_key}${4:, \\$meta_value}${5:, \\$prev_value = ''} )"
	"Update meta data by meta ID":
		"prefix":"update_metadata_by_mid"
		"body":"update_metadata_by_mid( ${1:\\$meta_type}${2:, \\$meta_id}${3:, \\$meta_value}${4:, \\$meta_key = false} )"
	"update_nag":
		"prefix":"update_nag"
		"body":"update_nag()"
	"Updates the network cache of given networks.":
		"prefix":"update_network_cache"
		"body":"update_network_cache( ${1:\\$networks} )"
	"Update the value of a network option that was already added.":
		"prefix":"update_network_option"
		"body":"update_network_option( ${1:\\$network_id}${2:, \\$option}${3:, \\$value} )"
	"Updates the cache for the given term object ID(s).":
		"prefix":"update_object_term_cache"
		"body":"update_object_term_cache( ${1:\\$object_ids}${2:, \\$object_type} )"
	"Update the value of an option that was already added.":
		"prefix":"update_option"
		"body":"update_option( ${1:\\$option}${2:, \\$value}${3:, \\$autoload = null} )"
	"Sends an email when a site administrator email address is changed.":
		"prefix":"update_option_new_admin_email"
		"body":"update_option_new_admin_email( ${1:\\$old_value}${2:, \\$value} )"
	"Alias of update_post_cache().":
		"prefix":"update_page_cache"
		"body":"update_page_cache( ${1:\\$pages} )"
	"Updates posts in cache.":
		"prefix":"update_post_cache"
		"body":"update_post_cache( ${1:\\$posts} )"
	"Call major cache updating functions for list of Post objects.":
		"prefix":"update_post_caches"
		"body":"update_post_caches( ${1:\\$posts}${2:, \\$post_type = 'post'}${3:, \\$update_term_cache = true}${4:, \\$update_meta_cache = true} )"
	"Update post meta field based on post ID.":
		"prefix":"update_post_meta"
		"body":"update_post_meta( ${1:\\$post_id}${2:, \\$meta_key}${3:, \\$meta_value}${4:, \\$prev_value = ''} )"
	"Update cache for thumbnails in the current loop.":
		"prefix":"update_post_thumbnail_cache"
		"body":"update_post_thumbnail_cache( ${1:\\$wp_query = null} )"
	"Updates metadata cache for list of post IDs.":
		"prefix":"update_postmeta_cache"
		"body":"update_postmeta_cache( ${1:\\$post_ids} )"
	"Update a blog's post count.":
		"prefix":"update_posts_count"
		"body":"update_posts_count( ${1:\\$deprecated = ''} )"
	"Update the &quot;recently-edited&quot; file for the plugin or theme editor.":
		"prefix":"update_recently_edited"
		"body":"update_recently_edited( ${1:\\$file} )"
	"update_right_now_message":
		"prefix":"update_right_now_message"
		"body":"update_right_now_message()"
	"Updates sites in cache.":
		"prefix":"update_site_cache"
		"body":"update_site_cache( ${1:\\$sites} )"
	"Update the value of an option that was already added for the current network.":
		"prefix":"update_site_option"
		"body":"update_site_option( ${1:\\$option}${2:, \\$value} )"
	"Updates Terms to Taxonomy in cache.":
		"prefix":"update_term_cache"
		"body":"update_term_cache( ${1:\\$terms}${2:, \\$taxonomy = ''} )"
	"Updates term metadata.":
		"prefix":"update_term_meta"
		"body":"update_term_meta( ${1:\\$term_id}${2:, \\$meta_key}${3:, \\$meta_value}${4:, \\$prev_value = ''} )"
	"Updates metadata cache for list of term IDs.":
		"prefix":"update_termmeta_cache"
		"body":"update_termmeta_cache( ${1:\\$term_ids} )"
	"Update all user caches":
		"prefix":"update_user_caches"
		"body":"update_user_caches( ${1:\\$user} )"
	"Update user meta field based on user ID.":
		"prefix":"update_user_meta"
		"body":"update_user_meta( ${1:\\$user_id}${2:, \\$meta_key}${3:, \\$meta_value}${4:, \\$prev_value = ''} )"
	"Update user option with global blog capability.":
		"prefix":"update_user_option"
		"body":"update_user_option( ${1:\\$user_id}${2:, \\$option_name}${3:, \\$newvalue}${4:, \\$global = false} )"
	"Update the status of a user in the database.":
		"prefix":"update_user_status"
		"body":"update_user_status( ${1:\\$id}${2:, \\$pref}${3:, \\$value}${4:, \\$deprecated = null} )"
	"Update metadata of user.":
		"prefix":"update_usermeta"
		"body":"update_usermeta( ${1:\\$user_id}${2:, \\$meta_key}${3:, \\$meta_value} )"
	"Execute changes made in WordPress 1.0.":
		"prefix":"upgrade_100"
		"body":"upgrade_100()"
	"Execute changes made in WordPress 1.0.1.":
		"prefix":"upgrade_101"
		"body":"upgrade_101()"
	"Execute changes made in WordPress 1.2.":
		"prefix":"upgrade_110"
		"body":"upgrade_110()"
	"Execute changes made in WordPress 1.5.":
		"prefix":"upgrade_130"
		"body":"upgrade_130()"
	"Execute changes made in WordPress 2.0.":
		"prefix":"upgrade_160"
		"body":"upgrade_160()"
	"Execute changes made in WordPress 2.1.":
		"prefix":"upgrade_210"
		"body":"upgrade_210()"
	"Execute changes made in WordPress 2.3.":
		"prefix":"upgrade_230"
		"body":"upgrade_230()"
	"Remove old categories, link2cat, and post2cat database tables.":
		"prefix":"upgrade_230_old_tables"
		"body":"upgrade_230_old_tables()"
	"Remove old options from the database.":
		"prefix":"upgrade_230_options_table"
		"body":"upgrade_230_options_table()"
	"Execute changes made in WordPress 2.5.0.":
		"prefix":"upgrade_250"
		"body":"upgrade_250()"
	"Execute changes made in WordPress 2.5.2.":
		"prefix":"upgrade_252"
		"body":"upgrade_252()"
	"Execute changes made in WordPress 2.6.":
		"prefix":"upgrade_260"
		"body":"upgrade_260()"
	"Execute changes made in WordPress 2.7.":
		"prefix":"upgrade_270"
		"body":"upgrade_270()"
	"Execute changes made in WordPress 2.8.":
		"prefix":"upgrade_280"
		"body":"upgrade_280()"
	"Execute changes made in WordPress 2.9.":
		"prefix":"upgrade_290"
		"body":"upgrade_290()"
	"Execute changes made in WordPress 3.0.":
		"prefix":"upgrade_300"
		"body":"upgrade_300()"
	"Execute changes made in WordPress 3.3.":
		"prefix":"upgrade_330"
		"body":"upgrade_330()"
	"Execute changes made in WordPress 3.4.":
		"prefix":"upgrade_340"
		"body":"upgrade_340()"
	"Execute changes made in WordPress 3.5.":
		"prefix":"upgrade_350"
		"body":"upgrade_350()"
	"Execute changes made in WordPress 3.7.":
		"prefix":"upgrade_370"
		"body":"upgrade_370()"
	"Execute changes made in WordPress 3.7.2.":
		"prefix":"upgrade_372"
		"body":"upgrade_372()"
	"Execute changes made in WordPress 3.8.0.":
		"prefix":"upgrade_380"
		"body":"upgrade_380()"
	"Execute changes made in WordPress 4.0.0.":
		"prefix":"upgrade_400"
		"body":"upgrade_400()"
	"Execute changes made in WordPress 4.2.0.":
		"prefix":"upgrade_420"
		"body":"upgrade_420()"
	"Executes changes made in WordPress 4.3.0.":
		"prefix":"upgrade_430"
		"body":"upgrade_430()"
	"Executes comments changes made in WordPress 4.3.0.":
		"prefix":"upgrade_430_fix_comments"
		"body":"upgrade_430_fix_comments()"
	"Executes changes made in WordPress 4.3.1.":
		"prefix":"upgrade_431"
		"body":"upgrade_431()"
	"Executes changes made in WordPress 4.4.0.":
		"prefix":"upgrade_440"
		"body":"upgrade_440()"
	"Executes changes made in WordPress 4.5.0.":
		"prefix":"upgrade_450"
		"body":"upgrade_450()"
	"Executes changes made in WordPress 4.6.0.":
		"prefix":"upgrade_460"
		"body":"upgrade_460()"
	"Functions to be called in install and upgrade scripts.":
		"prefix":"upgrade_all"
		"body":"upgrade_all()"
	"Executes network-level upgrade routines.":
		"prefix":"upgrade_network"
		"body":"upgrade_network()"
	"Upgrade old slugs made in version 2.2.":
		"prefix":"upgrade_old_slugs"
		"body":"upgrade_old_slugs()"
	"Check whether an upload is too big.":
		"prefix":"upload_is_file_too_big"
		"body":"upload_is_file_too_big( ${1:\\$upload} )"
	"Check whether a site has used its allotted upload space.":
		"prefix":"upload_is_user_over_quota"
		"body":"upload_is_user_over_quota( ${1:\\$echo = true} )"
	"Filters the maximum upload file size allowed, in bytes.":
		"prefix":"upload_size_limit_filter"
		"body":"upload_size_limit_filter( ${1:\\$size} )"
	"Displays the site upload space quota setting form on the Edit Site Settings screen.":
		"prefix":"upload_space_setting"
		"body":"upload_space_setting( ${1:\\$id} )"
	"Determines if the URL can be accessed over SSL.":
		"prefix":"url_is_accessable_via_ssl"
		"body":"url_is_accessable_via_ssl( ${1:\\$url} )"
	"Shorten a URL, to be used as link text.":
		"prefix":"url_shorten"
		"body":"url_shorten( ${1:\\$url}${2:, \\$length = 35} )"
	"Examine a URL and try to determine the post ID it represents.":
		"prefix":"url_to_postid"
		"body":"url_to_postid( ${1:\\$url} )"
	"Navigates through an array, object, or scalar, and decodes URL-encoded values":
		"prefix":"urldecode_deep"
		"body":"urldecode_deep( ${1:\\$value} )"
	"Navigates through an array, object, or scalar, and encodes the values to be used in a URL.":
		"prefix":"urlencode_deep"
		"body":"urlencode_deep( ${1:\\$value} )"
	"Determine whether to use CodePress.":
		"prefix":"use_codepress"
		"body":"use_codepress()"
	"Optional SSL preference that can be turned on by hooking to the 'personal_options' action.":
		"prefix":"use_ssl_preference"
		"body":"use_ssl_preference( ${1:\\$user} )"
	"Retrieves the URL to the admin area for the current user.":
		"prefix":"user_admin_url"
		"body":"user_admin_url( ${1:\\$path = ''}${2:, \\$scheme = 'admin'} )"
	"Whether a particular user has capability or role.":
		"prefix":"user_can"
		"body":"user_can( ${1:\\$user}${2:, \\$capability} )"
	"user_can_access_admin_page":
		"prefix":"user_can_access_admin_page"
		"body":"user_can_access_admin_page()"
	"Whether user can create a post. user_can_create_draft":
		"prefix":"user_can_create_draft"
		"body":"user_can_create_draft( ${1:\\$user_id}${2:, \\$blog_id = 1}${3:, \\$category_id = 'None'} )"
	"Whether user can create a post. user_can_create_post":
		"prefix":"user_can_create_post"
		"body":"user_can_create_post( ${1:\\$user_id}${2:, \\$blog_id = 1}${3:, \\$category_id = 'None'} )"
	"Whether user can delete a post. user_can_delete_post":
		"prefix":"user_can_delete_post"
		"body":"user_can_delete_post( ${1:\\$user_id}${2:, \\$post_id}${3:, \\$blog_id = 1} )"
	"Whether user can delete a post. user_can_delete_post_comments":
		"prefix":"user_can_delete_post_comments"
		"body":"user_can_delete_post_comments( ${1:\\$user_id}${2:, \\$post_id}${3:, \\$blog_id = 1} )"
	"Whether user can edit a post.":
		"prefix":"user_can_edit_post"
		"body":"user_can_edit_post( ${1:\\$user_id}${2:, \\$post_id}${3:, \\$blog_id = 1} )"
	"Whether user can delete a post. user_can_edit_post_comments":
		"prefix":"user_can_edit_post_comments"
		"body":"user_can_edit_post_comments( ${1:\\$user_id}${2:, \\$post_id}${3:, \\$blog_id = 1} )"
	"Whether user can delete a post. user_can_edit_post_date":
		"prefix":"user_can_edit_post_date"
		"body":"user_can_edit_post_date( ${1:\\$user_id}${2:, \\$post_id}${3:, \\$blog_id = 1} )"
	"Can user can edit other user.":
		"prefix":"user_can_edit_user"
		"body":"user_can_edit_user( ${1:\\$user_id}${2:, \\$other_user} )"
	"Whether the user can access the visual editor.":
		"prefix":"user_can_richedit"
		"body":"user_can_richedit()"
	"Whether user can set new posts' dates.":
		"prefix":"user_can_set_post_date"
		"body":"user_can_set_post_date( ${1:\\$user_id}${2:, \\$blog_id = 1}${3:, \\$category_id = 'None'} )"
	"Check that the user login name and password is correct.":
		"prefix":"user_pass_ok"
		"body":"user_pass_ok( ${1:\\$user_login}${2:, \\$user_pass} )"
	"Retrieves a trailing-slashed string if the site is set for adding trailing slashes.":
		"prefix":"user_trailingslashit"
		"body":"user_trailingslashit( ${1:\\$string}${2:, \\$type_of_url = ''} )"
	"Checks whether the given username exists.":
		"prefix":"username_exists"
		"body":"username_exists( ${1:\\$username} )"
	"Check whether users can self-register, based on Network settings.":
		"prefix":"users_can_register_signup_filter"
		"body":"users_can_register_signup_filter()"
	"Encode the Unicode values to be used in the URI.":
		"prefix":"utf8_uri_encode"
		"body":"utf8_uri_encode( ${1:\\$utf8_string}${2:, \\$length} )"
	"Helper function to determine if a Unicode value is valid.":
		"prefix":"valid_unicode"
		"body":"valid_unicode( ${1:\\$i} )"
	"Validate active plugins":
		"prefix":"validate_active_plugins"
		"body":"validate_active_plugins()"
	"Validate a new site signup.":
		"prefix":"validate_another_blog_signup"
		"body":"validate_another_blog_signup()"
	"Validate the new site signup":
		"prefix":"validate_blog_form"
		"body":"validate_blog_form()"
	"Validate new site signup":
		"prefix":"validate_blog_signup"
		"body":"validate_blog_signup()"
	"Checks that current theme files 'index.php' and 'style.css' exists.":
		"prefix":"validate_current_theme"
		"body":"validate_current_theme()"
	"Deprecated functionality to validate an email address.":
		"prefix":"validate_email"
		"body":"validate_email( ${1:\\$email}${2:, \\$check_domain = true} )"
	"File validates against allowed set of defined rules.":
		"prefix":"validate_file"
		"body":"validate_file( ${1:\\$file}${2:, \\$allowed_files = ''} )"
	"Make sure that the file that was requested to edit, is allowed to be edited":
		"prefix":"validate_file_to_edit"
		"body":"validate_file_to_edit( ${1:\\$file}${2:, \\$allowed_files = ''} )"
	"Validate the plugin path.":
		"prefix":"validate_plugin"
		"body":"validate_plugin( ${1:\\$plugin} )"
	"Validate user signup name and email":
		"prefix":"validate_user_form"
		"body":"validate_user_form()"
	"Validate the new user signup":
		"prefix":"validate_user_signup"
		"body":"validate_user_signup()"
	"Checks whether a username is valid.":
		"prefix":"validate_username"
		"body":"validate_username( ${1:\\$username} )"
	"Calculates and compares the MD5 of a file to its expected value.":
		"prefix":"verify_file_md5"
		"body":"verify_file_md5( ${1:\\$filename}${2:, \\$expected_md5} )"
	"Retrieve HTML dropdown (select) content for category list.":
		"prefix":"walk_category_dropdown_tree"
		"body":"walk_category_dropdown_tree()"
	"Retrieve HTML list content for category list.":
		"prefix":"walk_category_tree"
		"body":"walk_category_tree()"
	"Retrieve the HTML list content for nav menu items.":
		"prefix":"walk_nav_menu_tree"
		"body":"walk_nav_menu_tree( ${1:\\$items}${2:, \\$depth}${3:, \\$r} )"
	"Retrieve HTML dropdown (select) content for page list.":
		"prefix":"walk_page_dropdown_tree"
		"body":"walk_page_dropdown_tree()"
	"Retrieve HTML list content for page list.":
		"prefix":"walk_page_tree"
		"body":"walk_page_tree( ${1:\\$pages}${2:, \\$depth}${3:, \\$current_page}${4:, \\$r} )"
	"Send a pingback.":
		"prefix":"weblog_ping"
		"body":"weblog_ping( ${1:\\$server = ''}${2:, \\$path = ''} )"
	"Ensure that the welcome message is not empty. Currently unused.":
		"prefix":"welcome_user_msg_filter"
		"body":"welcome_user_msg_filter( ${1:\\$text} )"
	"Workaround for Windows bug in is_writable() function":
		"prefix":"win_is_writable"
		"body":"win_is_writable( ${1:\\$path} )"
	"Display the link to the Windows Live Writer manifest file.":
		"prefix":"wlwmanifest_link"
		"body":"wlwmanifest_link()"
	"Set up the WordPress query.":
		"prefix":"wp"
		"body":"wp( ${1:\\$query_vars = ''} )"
	"Adds a new dashboard widget.":
		"prefix":"wp_add_dashboard_widget"
		"body":"wp_add_dashboard_widget( ${1:\\$widget_id}${2:, \\$widget_name}${3:, \\$callback}${4:, \\$control_callback = null}${5:, \\$callback_args = null} )"
	"Parse ID3v2, ID3v1, and getID3 comments to extract usable data":
		"prefix":"wp_add_id3_tag_data"
		"body":"wp_add_id3_tag_data( ${1:\\$metadata}${2:, \\$data} )"
	"Adds extra code to a registered script.":
		"prefix":"wp_add_inline_script"
		"body":"wp_add_inline_script( ${1:\\$handle}${2:, \\$data}${3:, \\$position = 'after'} )"
	"Add extra CSS styles to a registered stylesheet.":
		"prefix":"wp_add_inline_style"
		"body":"wp_add_inline_style( ${1:\\$handle}${2:, \\$data} )"
	"Add term(s) associated with a given object.":
		"prefix":"wp_add_object_terms"
		"body":"wp_add_object_terms( ${1:\\$object_id}${2:, \\$terms}${3:, \\$taxonomy} )"
	"Add tags to a post.":
		"prefix":"wp_add_post_tags"
		"body":"wp_add_post_tags( ${1:\\$post_id}${2:, \\$tags = ''} )"
	"Adds a trashed suffix for a given post.":
		"prefix":"wp_add_trashed_suffix_to_post_name_for_post"
		"body":"wp_add_trashed_suffix_to_post_name_for_post( ${1:\\$post} )"
	"Adds a suffix if any trashed posts have a given slug.":
		"prefix":"wp_add_trashed_suffix_to_post_name_for_trashed_posts"
		"body":"wp_add_trashed_suffix_to_post_name_for_trashed_posts( ${1:\\$post_name}${2:, \\$post_ID} )"
	"Add secondary menus.":
		"prefix":"wp_admin_bar_add_secondary_groups"
		"body":"wp_admin_bar_add_secondary_groups( ${1:\\$wp_admin_bar} )"
	"Add appearance submenu items to the &quot;Site Name&quot; menu.":
		"prefix":"wp_admin_bar_appearance_menu"
		"body":"wp_admin_bar_appearance_menu( ${1:\\$wp_admin_bar} )"
	"Add edit comments link with awaiting moderation count bubble.":
		"prefix":"wp_admin_bar_comments_menu"
		"body":"wp_admin_bar_comments_menu( ${1:\\$wp_admin_bar} )"
	"Adds the &quot;Customize&quot; link to the Toolbar.":
		"prefix":"wp_admin_bar_customize_menu"
		"body":"wp_admin_bar_customize_menu( ${1:\\$wp_admin_bar} )"
	"Add the &quot;Dashboard&quot;/&quot;Visit Site&quot; menu.":
		"prefix":"wp_admin_bar_dashboard_view_site_menu"
		"body":"wp_admin_bar_dashboard_view_site_menu( ${1:\\$wp_admin_bar} )"
	"Provide an edit link for posts and terms.":
		"prefix":"wp_admin_bar_edit_menu"
		"body":"wp_admin_bar_edit_menu( ${1:\\$wp_admin_bar} )"
	"Style and scripts for the admin bar.":
		"prefix":"wp_admin_bar_header"
		"body":"wp_admin_bar_header()"
	"Add the &quot;My Account&quot; item.":
		"prefix":"wp_admin_bar_my_account_item"
		"body":"wp_admin_bar_my_account_item( ${1:\\$wp_admin_bar} )"
	"Add the &quot;My Account&quot; submenu items.":
		"prefix":"wp_admin_bar_my_account_menu"
		"body":"wp_admin_bar_my_account_menu( ${1:\\$wp_admin_bar} )"
	"Add the &quot;My Sites/[Site Name]&quot; menu and all submenus.":
		"prefix":"wp_admin_bar_my_sites_menu"
		"body":"wp_admin_bar_my_sites_menu( ${1:\\$wp_admin_bar} )"
	"Add &quot;Add New&quot; menu.":
		"prefix":"wp_admin_bar_new_content_menu"
		"body":"wp_admin_bar_new_content_menu( ${1:\\$wp_admin_bar} )"
	"Renders the admin bar to the page based on the $wp_admin_bar-&gt;menu member var.":
		"prefix":"wp_admin_bar_render"
		"body":"wp_admin_bar_render()"
	"Add search form.":
		"prefix":"wp_admin_bar_search_menu"
		"body":"wp_admin_bar_search_menu( ${1:\\$wp_admin_bar} )"
	"Provide a shortlink.":
		"prefix":"wp_admin_bar_shortlink_menu"
		"body":"wp_admin_bar_shortlink_menu( ${1:\\$wp_admin_bar} )"
	"Add the sidebar toggle button.":
		"prefix":"wp_admin_bar_sidebar_toggle"
		"body":"wp_admin_bar_sidebar_toggle( ${1:\\$wp_admin_bar} )"
	"Add the &quot;Site Name&quot; menu.":
		"prefix":"wp_admin_bar_site_menu"
		"body":"wp_admin_bar_site_menu( ${1:\\$wp_admin_bar} )"
	"Provide an update link if theme/plugin/core updates are available.":
		"prefix":"wp_admin_bar_updates_menu"
		"body":"wp_admin_bar_updates_menu( ${1:\\$wp_admin_bar} )"
	"Add the WordPress logo menu.":
		"prefix":"wp_admin_bar_wp_menu"
		"body":"wp_admin_bar_wp_menu( ${1:\\$wp_admin_bar} )"
	"Remove single-use URL parameters and create canonical link based on new URL.":
		"prefix":"wp_admin_canonical_url"
		"body":"wp_admin_canonical_url()"
	"Enqueues or directly prints a stylesheet link to the specified CSS file.":
		"prefix":"wp_admin_css"
		"body":"wp_admin_css( ${1:\\$file = 'wp-admin'}${2:, \\$force_echo = false} )"
	"Registers an admin colour scheme css file.":
		"prefix":"wp_admin_css_color"
		"body":"wp_admin_css_color( ${1:\\$key}${2:, \\$name}${3:, \\$url}${4:, \\$colors = array()}${5:, \\$icons = array()} )"
	"Displays the URL of a WordPress admin CSS file.":
		"prefix":"wp_admin_css_uri"
		"body":"wp_admin_css_uri( ${1:\\$file = 'wp-admin'} )"
	"Ajax handler for adding a link category.":
		"prefix":"wp_ajax_add_link_category"
		"body":"wp_ajax_add_link_category( ${1:\\$action} )"
	"Ajax handler for adding a menu item.":
		"prefix":"wp_ajax_add_menu_item"
		"body":"wp_ajax_add_menu_item()"
	"Ajax handler for adding meta.":
		"prefix":"wp_ajax_add_meta"
		"body":"wp_ajax_add_meta()"
	"Ajax handler to add a tag.":
		"prefix":"wp_ajax_add_tag"
		"body":"wp_ajax_add_tag()"
	"Ajax handler for adding a user.":
		"prefix":"wp_ajax_add_user"
		"body":"wp_ajax_add_user( ${1:\\$action} )"
	"Ajax handler for tag search.":
		"prefix":"wp_ajax_ajax_tag_search"
		"body":"wp_ajax_ajax_tag_search()"
	"Ajax handler for user autocomplete.":
		"prefix":"wp_ajax_autocomplete_user"
		"body":"wp_ajax_autocomplete_user()"
	"Ajax handler for closed post boxes.":
		"prefix":"wp_ajax_closed_postboxes"
		"body":"wp_ajax_closed_postboxes()"
	"Ajax handler for cropping an image.":
		"prefix":"wp_ajax_crop_image"
		"body":"wp_ajax_crop_image()"
	"Ajax handler for dashboard widgets.":
		"prefix":"wp_ajax_dashboard_widgets"
		"body":"wp_ajax_dashboard_widgets()"
	"Ajax handler for date formatting.":
		"prefix":"wp_ajax_date_format"
		"body":"wp_ajax_date_format()"
	"Ajax handler for deleting a comment.":
		"prefix":"wp_ajax_delete_comment"
		"body":"wp_ajax_delete_comment()"
	"Ajax handler for removing inactive widgets.":
		"prefix":"wp_ajax_delete_inactive_widgets"
		"body":"wp_ajax_delete_inactive_widgets()"
	"Ajax handler for deleting a link.":
		"prefix":"wp_ajax_delete_link"
		"body":"wp_ajax_delete_link()"
	"Ajax handler for deleting meta.":
		"prefix":"wp_ajax_delete_meta"
		"body":"wp_ajax_delete_meta()"
	"wp_ajax_delete_page":
		"prefix":"wp_ajax_delete_page"
		"body":"wp_ajax_delete_page( ${1:\\$action} )"
	"Ajax handler for deleting a plugin.":
		"prefix":"wp_ajax_delete_plugin"
		"body":"wp_ajax_delete_plugin()"
	"Ajax handler for deleting a post.":
		"prefix":"wp_ajax_delete_post"
		"body":"wp_ajax_delete_post( ${1:\\$action} )"
	"Ajax handler for deleting a tag.":
		"prefix":"wp_ajax_delete_tag"
		"body":"wp_ajax_delete_tag()"
	"Ajax handler for deleting a theme.":
		"prefix":"wp_ajax_delete_theme"
		"body":"wp_ajax_delete_theme()"
	"Ajax handler for destroying multiple open sessions for a user.":
		"prefix":"wp_ajax_destroy_sessions"
		"body":"wp_ajax_destroy_sessions()"
	"Ajax handler to dim a comment.":
		"prefix":"wp_ajax_dim_comment"
		"body":"wp_ajax_dim_comment()"
	"Ajax handler for dismissing a WordPress pointer.":
		"prefix":"wp_ajax_dismiss_wp_pointer"
		"body":"wp_ajax_dismiss_wp_pointer()"
	"Ajax handler for editing a comment.":
		"prefix":"wp_ajax_edit_comment"
		"body":"wp_ajax_edit_comment()"
	"Ajax handler for fetching a list table.":
		"prefix":"wp_ajax_fetch_list"
		"body":"wp_ajax_fetch_list()"
	"Ajax handler for querying posts for the Find Posts modal.":
		"prefix":"wp_ajax_find_posts"
		"body":"wp_ajax_find_posts()"
	"Ajax handler for generating a password.":
		"prefix":"wp_ajax_generate_password"
		"body":"wp_ajax_generate_password()"
	"Ajax handler for getting an attachment.":
		"prefix":"wp_ajax_get_attachment"
		"body":"wp_ajax_get_attachment()"
	"Ajax handler for getting comments.":
		"prefix":"wp_ajax_get_comments"
		"body":"wp_ajax_get_comments( ${1:\\$action} )"
	"Handles AJAX requests for community events":
		"prefix":"wp_ajax_get_community_events"
		"body":"wp_ajax_get_community_events()"
	"Ajax handler to retrieve a permalink.":
		"prefix":"wp_ajax_get_permalink"
		"body":"wp_ajax_get_permalink()"
	"Ajax handler for retrieving HTML for the featured image.":
		"prefix":"wp_ajax_get_post_thumbnail_html"
		"body":"wp_ajax_get_post_thumbnail_html()"
	"Ajax handler for getting revision diffs.":
		"prefix":"wp_ajax_get_revision_diffs"
		"body":"wp_ajax_get_revision_diffs()"
	"Ajax handler for getting a tagcloud.":
		"prefix":"wp_ajax_get_tagcloud"
		"body":"wp_ajax_get_tagcloud()"
	"Ajax handler for the Heartbeat API.":
		"prefix":"wp_ajax_heartbeat"
		"body":"wp_ajax_heartbeat()"
	"Ajax handler for hidden columns.":
		"prefix":"wp_ajax_hidden_columns"
		"body":"wp_ajax_hidden_columns()"
	"Ajax handler for image editing.":
		"prefix":"wp_ajax_image_editor"
		"body":"wp_ajax_image_editor()"
	"Ajax handler for image editor previews.":
		"prefix":"wp_ajax_imgedit_preview"
		"body":"wp_ajax_imgedit_preview()"
	"Ajax handler for Quick Edit saving a post from a list table.":
		"prefix":"wp_ajax_inline_save"
		"body":"wp_ajax_inline_save()"
	"Ajax handler for quick edit saving for a term.":
		"prefix":"wp_ajax_inline_save_tax"
		"body":"wp_ajax_inline_save_tax()"
	"Ajax handler for installing a plugin.":
		"prefix":"wp_ajax_install_plugin"
		"body":"wp_ajax_install_plugin()"
	"Ajax handler for installing a theme.":
		"prefix":"wp_ajax_install_theme"
		"body":"wp_ajax_install_theme()"
	"Ajax handler for Customizer preview logged-in status.":
		"prefix":"wp_ajax_logged_in"
		"body":"wp_ajax_logged_in()"
	"Ajax handler for retrieving menu meta boxes.":
		"prefix":"wp_ajax_menu_get_metabox"
		"body":"wp_ajax_menu_get_metabox()"
	"Ajax handler for menu locations save.":
		"prefix":"wp_ajax_menu_locations_save"
		"body":"wp_ajax_menu_locations_save()"
	"Ajax handler for menu quick searching.":
		"prefix":"wp_ajax_menu_quick_search"
		"body":"wp_ajax_menu_quick_search()"
	"Ajax handler for saving the meta box order.":
		"prefix":"wp_ajax_meta_box_order"
		"body":"wp_ajax_meta_box_order()"
	"Ajax handler for the Heartbeat API in
the no-privilege context.":
		"prefix":"wp_ajax_nopriv_heartbeat"
		"body":"wp_ajax_nopriv_heartbeat()"
	"Ajax handler for oEmbed caching.":
		"prefix":"wp_ajax_oembed_cache"
		"body":"wp_ajax_oembed_cache()"
	"Apply [embed] Ajax handlers to a string.":
		"prefix":"wp_ajax_parse_embed"
		"body":"wp_ajax_parse_embed()"
	"wp_ajax_parse_media_shortcode":
		"prefix":"wp_ajax_parse_media_shortcode"
		"body":"wp_ajax_parse_media_shortcode()"
	"Ajax handler for creating new category from Press This.":
		"prefix":"wp_ajax_press_this_add_category"
		"body":"wp_ajax_press_this_add_category()"
	"Ajax handler for saving a post from Press This.":
		"prefix":"wp_ajax_press_this_save_post"
		"body":"wp_ajax_press_this_save_post()"
	"Ajax handler for querying attachments.":
		"prefix":"wp_ajax_query_attachments"
		"body":"wp_ajax_query_attachments()"
	"Ajax handler for getting themes from themes_api().":
		"prefix":"wp_ajax_query_themes"
		"body":"wp_ajax_query_themes()"
	"Ajax handler for replying to a comment.":
		"prefix":"wp_ajax_replyto_comment"
		"body":"wp_ajax_replyto_comment( ${1:\\$action} )"
	"Ajax handler to retrieve a sample permalink.":
		"prefix":"wp_ajax_sample_permalink"
		"body":"wp_ajax_sample_permalink()"
	"Ajax handler for updating attachment attributes.":
		"prefix":"wp_ajax_save_attachment"
		"body":"wp_ajax_save_attachment()"
	"Ajax handler for saving backward compatible attachment attributes.":
		"prefix":"wp_ajax_save_attachment_compat"
		"body":"wp_ajax_save_attachment_compat()"
	"Ajax handler for saving the attachment order.":
		"prefix":"wp_ajax_save_attachment_order"
		"body":"wp_ajax_save_attachment_order()"
	"Ajax handler for auto-saving the selected color scheme for
a user's own profile.":
		"prefix":"wp_ajax_save_user_color_scheme"
		"body":"wp_ajax_save_user_color_scheme()"
	"Ajax handler for saving a widget.":
		"prefix":"wp_ajax_save_widget"
		"body":"wp_ajax_save_widget()"
	"Ajax handler for saving the user's WordPress.org username.":
		"prefix":"wp_ajax_save_wporg_username"
		"body":"wp_ajax_save_wporg_username()"
	"Ajax handler for searching plugins to install.":
		"prefix":"wp_ajax_search_install_plugins"
		"body":"wp_ajax_search_install_plugins()"
	"Ajax handler for searching plugins.":
		"prefix":"wp_ajax_search_plugins"
		"body":"wp_ajax_search_plugins()"
	"Ajax handler for sending an attachment to the editor.":
		"prefix":"wp_ajax_send_attachment_to_editor"
		"body":"wp_ajax_send_attachment_to_editor()"
	"Ajax handler for sending a link to the editor.":
		"prefix":"wp_ajax_send_link_to_editor"
		"body":"wp_ajax_send_link_to_editor()"
	"Ajax handler for setting the featured image for an attachment.":
		"prefix":"wp_ajax_set_attachment_thumbnail"
		"body":"wp_ajax_set_attachment_thumbnail()"
	"Ajax handler for setting the featured image.":
		"prefix":"wp_ajax_set_post_thumbnail"
		"body":"wp_ajax_set_post_thumbnail()"
	"Ajax handler for time formatting.":
		"prefix":"wp_ajax_time_format"
		"body":"wp_ajax_time_format()"
	"Ajax handler for sending a post to the trash.":
		"prefix":"wp_ajax_trash_post"
		"body":"wp_ajax_trash_post( ${1:\\$action} )"
	"Ajax handler to restore a post from the trash.":
		"prefix":"wp_ajax_untrash_post"
		"body":"wp_ajax_untrash_post( ${1:\\$action} )"
	"Ajax handler for updating a plugin.":
		"prefix":"wp_ajax_update_plugin"
		"body":"wp_ajax_update_plugin()"
	"Ajax handler for updating a theme.":
		"prefix":"wp_ajax_update_theme"
		"body":"wp_ajax_update_theme()"
	"Ajax handler for updating whether to display the welcome panel.":
		"prefix":"wp_ajax_update_welcome_panel"
		"body":"wp_ajax_update_welcome_panel()"
	"Ajax handler for updating a widget.":
		"prefix":"wp_ajax_update_widget"
		"body":"wp_ajax_update_widget()"
	"Ajax handler for uploading attachments":
		"prefix":"wp_ajax_upload_attachment"
		"body":"wp_ajax_upload_attachment()"
	"Ajax handler for saving the widgets order.":
		"prefix":"wp_ajax_widgets_order"
		"body":"wp_ajax_widgets_order()"
	"Ajax handler for compression testing.":
		"prefix":"wp_ajax_wp_compression_test"
		"body":"wp_ajax_wp_compression_test()"
	"Ajax handler for saving posts from the fullscreen editor.":
		"prefix":"wp_ajax_wp_fullscreen_save_post"
		"body":"wp_ajax_wp_fullscreen_save_post()"
	"Ajax handler for internal linking.":
		"prefix":"wp_ajax_wp_link_ajax"
		"body":"wp_ajax_wp_link_ajax()"
	"Ajax handler for removing a post lock.":
		"prefix":"wp_ajax_wp_remove_post_lock"
		"body":"wp_ajax_wp_remove_post_lock()"
	"Validates whether this comment is allowed to be made.":
		"prefix":"wp_allow_comment"
		"body":"wp_allow_comment( ${1:\\$commentdata}${2:, \\$avoid_die = false} )"
	"Retrieve a list of protocols to allow in HTML attributes.":
		"prefix":"wp_allowed_protocols"
		"body":"wp_allowed_protocols()"
	"Extract a slice of an array, given a list of keys.":
		"prefix":"wp_array_slice_assoc"
		"body":"wp_array_slice_assoc( ${1:\\$array}${2:, \\$keys} )"
	"Verifies an attachment is of a given type.":
		"prefix":"wp_attachment_is"
		"body":"wp_attachment_is( ${1:\\$type}${2:, \\$post = null} )"
	"Checks if the attachment is an image.":
		"prefix":"wp_attachment_is_image"
		"body":"wp_attachment_is_image( ${1:\\$post = null} )"
	"Builds the Audio shortcode output.":
		"prefix":"wp_audio_shortcode"
		"body":"wp_audio_shortcode( ${1:\\$attr}${2:, \\$content = ''} )"
	"Check whether a user is still logged in, for the heartbeat.":
		"prefix":"wp_auth_check"
		"body":"wp_auth_check( ${1:\\$response} )"
	"Output the HTML that shows the wp-login dialog when the user is no longer logged in.":
		"prefix":"wp_auth_check_html"
		"body":"wp_auth_check_html()"
	"Load the auth check for monitoring whether the user is still logged in.":
		"prefix":"wp_auth_check_load"
		"body":"wp_auth_check_load()"
	"Authenticate a user, confirming the login credentials are valid.":
		"prefix":"wp_authenticate"
		"body":"wp_authenticate( ${1:\\$username}${2:, \\$password} )"
	"Authenticate the user using the WordPress auth cookie.":
		"prefix":"wp_authenticate_cookie"
		"body":"wp_authenticate_cookie( ${1:\\$user}${2:, \\$username}${3:, \\$password} )"
	"Authenticates a user using the email and password.":
		"prefix":"wp_authenticate_email_password"
		"body":"wp_authenticate_email_password( ${1:\\$user}${2:, \\$email}${3:, \\$password} )"
	"For Multisite blogs, check if the authenticated user has been marked as a
spammer, or if the user's primary blog has been marked as spam.":
		"prefix":"wp_authenticate_spam_check"
		"body":"wp_authenticate_spam_check( ${1:\\$user} )"
	"Authenticate a user, confirming the username and password are valid.":
		"prefix":"wp_authenticate_username_password"
		"body":"wp_authenticate_username_password( ${1:\\$user}${2:, \\$username}${3:, \\$password} )"
	"Save a post submitted with XHR":
		"prefix":"wp_autosave"
		"body":"wp_autosave( ${1:\\$post_data} )"
	"i18n friendly version of basename()":
		"prefix":"wp_basename"
		"body":"wp_basename( ${1:\\$path}${2:, \\$suffix = ''} )"
	"Does comment contain blacklisted characters or words.":
		"prefix":"wp_blacklist_check"
		"body":"wp_blacklist_check( ${1:\\$author}${2:, \\$email}${3:, \\$url}${4:, \\$comment}${5:, \\$user_ip}${6:, \\$user_agent} )"
	"Adds data to the cache, if the cache key doesn't already exist.":
		"prefix":"wp_cache_add"
		"body":"wp_cache_add( ${1:\\$key}${2:, \\$data}${3:, \\$group = ''}${4:, \\$expire} )"
	"Adds a group or set of groups to the list of global groups.":
		"prefix":"wp_cache_add_global_groups"
		"body":"wp_cache_add_global_groups( ${1:\\$groups} )"
	"Adds a group or set of groups to the list of non-persistent groups.":
		"prefix":"wp_cache_add_non_persistent_groups"
		"body":"wp_cache_add_non_persistent_groups( ${1:\\$groups} )"
	"Closes the cache.":
		"prefix":"wp_cache_close"
		"body":"wp_cache_close()"
	"Decrements numeric cache item's value.":
		"prefix":"wp_cache_decr"
		"body":"wp_cache_decr( ${1:\\$key}${2:, \\$offset = 1}${3:, \\$group = ''} )"
	"Removes the cache contents matching key and group.":
		"prefix":"wp_cache_delete"
		"body":"wp_cache_delete( ${1:\\$key}${2:, \\$group = ''} )"
	"Removes all cache items.":
		"prefix":"wp_cache_flush"
		"body":"wp_cache_flush()"
	"Retrieves the cache contents from the cache by key and group.":
		"prefix":"wp_cache_get"
		"body":"wp_cache_get( ${1:\\$key}${2:, \\$group = ''}${3:, \\$force = false}${4:, \\$found = null} )"
	"Get last changed date for the specified cache group.":
		"prefix":"wp_cache_get_last_changed"
		"body":"wp_cache_get_last_changed( ${1:\\$group} )"
	"Increment numeric cache item's value":
		"prefix":"wp_cache_incr"
		"body":"wp_cache_incr( ${1:\\$key}${2:, \\$offset = 1}${3:, \\$group = ''} )"
	"Sets up Object Cache Global and assigns it.":
		"prefix":"wp_cache_init"
		"body":"wp_cache_init()"
	"Replaces the contents of the cache with new data.":
		"prefix":"wp_cache_replace"
		"body":"wp_cache_replace( ${1:\\$key}${2:, \\$data}${3:, \\$group = ''}${4:, \\$expire} )"
	"Reset internal cache keys and structures.":
		"prefix":"wp_cache_reset"
		"body":"wp_cache_reset()"
	"Saves the data to the cache.":
		"prefix":"wp_cache_set"
		"body":"wp_cache_set( ${1:\\$key}${2:, \\$data}${3:, \\$group = ''}${4:, \\$expire} )"
	"Switches the internal blog ID.":
		"prefix":"wp_cache_switch_to_blog"
		"body":"wp_cache_switch_to_blog( ${1:\\$blog_id} )"
	"Creates a 'sizes' attribute value for an image.":
		"prefix":"wp_calculate_image_sizes"
		"body":"wp_calculate_image_sizes( ${1:\\$size}${2:, \\$image_src = null}${3:, \\$image_meta = null}${4:, \\$attachment_id} )"
	"A helper function to calculate the image sources to include in a 'srcset' attribute.":
		"prefix":"wp_calculate_image_srcset"
		"body":"wp_calculate_image_srcset( ${1:\\$size_array}${2:, \\$image_src}${3:, \\$image_meta}${4:, \\$attachment_id} )"
	"Check if WordPress has access to the filesystem without asking for
credentials.":
		"prefix":"wp_can_install_language_pack"
		"body":"wp_can_install_language_pack()"
	"Output a textarea element for inputting an attachment caption.":
		"prefix":"wp_caption_input_textarea"
		"body":"wp_caption_input_textarea( ${1:\\$edit_post} )"
	"Output an unordered list of checkbox input elements labeled with category names.":
		"prefix":"wp_category_checklist"
		"body":"wp_category_checklist( ${1:\\$post_id}${2:, \\$descendants_and_self}${3:, \\$selected_cats = false}${4:, \\$popular_cats = false}${5:, \\$walker = null}${6:, \\$checked_ontop = true} )"
	"Check if the user needs a browser update":
		"prefix":"wp_check_browser_version"
		"body":"wp_check_browser_version()"
	"Compares the lengths of comment data against the maximum character limits.":
		"prefix":"wp_check_comment_data_max_lengths"
		"body":"wp_check_comment_data_max_lengths( ${1:\\$comment_data} )"
	"Checks whether comment flooding is occurring.":
		"prefix":"wp_check_comment_flood"
		"body":"wp_check_comment_flood( ${1:\\$is_flood}${2:, \\$ip}${3:, \\$email}${4:, \\$date}${5:, \\$avoid_die = false} )"
	"Retrieve the file type from the file name.":
		"prefix":"wp_check_filetype"
		"body":"wp_check_filetype( ${1:\\$filename}${2:, \\$mimes = null} )"
	"Attempt to determine the real file type of a file.":
		"prefix":"wp_check_filetype_and_ext"
		"body":"wp_check_filetype_and_ext( ${1:\\$file}${2:, \\$filename}${3:, \\$mimes = null} )"
	"Check for changed slugs for published post objects and save the old slug.":
		"prefix":"wp_check_for_changed_slugs"
		"body":"wp_check_for_changed_slugs( ${1:\\$post_id}${2:, \\$post}${3:, \\$post_before} )"
	"Checks for invalid UTF8 in a string.":
		"prefix":"wp_check_invalid_utf8"
		"body":"wp_check_invalid_utf8( ${1:\\$string}${2:, \\$strip = false} )"
	"Checks that a JSONP callback is a valid JavaScript callback.":
		"prefix":"wp_check_jsonp_callback"
		"body":"wp_check_jsonp_callback( ${1:\\$callback} )"
	"Check lock status for posts displayed on the Posts screen":
		"prefix":"wp_check_locked_posts"
		"body":"wp_check_locked_posts( ${1:\\$response}${2:, \\$data}${3:, \\$screen_id} )"
	"Checks the version of the installed MySQL binary.":
		"prefix":"wp_check_mysql_version"
		"body":"wp_check_mysql_version()"
	"Checks the plaintext password against the encrypted Password.":
		"prefix":"wp_check_password"
		"body":"wp_check_password( ${1:\\$password}${2:, \\$hash}${3:, \\$user_id = ''} )"
	"Check for the required PHP version, and the MySQL extension or
a database drop-in.":
		"prefix":"wp_check_php_mysql_versions"
		"body":"wp_check_php_mysql_versions()"
	"Check the given subset of the post hierarchy for hierarchy loops.":
		"prefix":"wp_check_post_hierarchy_for_loops"
		"body":"wp_check_post_hierarchy_for_loops( ${1:\\$post_parent}${2:, \\$post_ID} )"
	"Check to see if the post is currently being edited by another user.":
		"prefix":"wp_check_post_lock"
		"body":"wp_check_post_lock( ${1:\\$post_id} )"
	"Checks the given subset of the term hierarchy for hierarchy loops.":
		"prefix":"wp_check_term_hierarchy_for_loops"
		"body":"wp_check_term_hierarchy_for_loops( ${1:\\$parent}${2:, \\$term_id}${3:, \\$taxonomy} )"
	"Test if the supplied date is valid for the Gregorian calendar.":
		"prefix":"wp_checkdate"
		"body":"wp_checkdate( ${1:\\$month}${2:, \\$day}${3:, \\$year}${4:, \\$source_date} )"
	"Clears the Plugins cache used by get_plugins() and by default, the Plugin Update cache.":
		"prefix":"wp_clean_plugins_cache"
		"body":"wp_clean_plugins_cache( ${1:\\$clear_update_cache = true} )"
	"Clears the cache held by get_theme_roots() and WP_Theme.":
		"prefix":"wp_clean_themes_cache"
		"body":"wp_clean_themes_cache( ${1:\\$clear_update_cache = true} )"
	"Clear existing update caches for plugins, themes, and core.":
		"prefix":"wp_clean_update_cache"
		"body":"wp_clean_update_cache()"
	"Removes all of the cookies associated with authentication.":
		"prefix":"wp_clear_auth_cookie"
		"body":"wp_clear_auth_cookie()"
	"Unschedules all events attached to the hook with the specified arguments.":
		"prefix":"wp_clear_scheduled_hook"
		"body":"wp_clear_scheduled_hook( ${1:\\$hook}${2:, \\$args = array()} )"
	"Clears the authentication cookie, logging the user out. This function is deprecated.":
		"prefix":"wp_clearcookie"
		"body":"wp_clearcookie()"
	"Copy an object.":
		"prefix":"wp_clone"
		"body":"wp_clone( ${1:\\$object} )"
	"wp_color_scheme_settings":
		"prefix":"wp_color_scheme_settings"
		"body":"wp_color_scheme_settings()"
	"Display form token for unfiltered comments.":
		"prefix":"wp_comment_form_unfiltered_html_nonce"
		"body":"wp_comment_form_unfiltered_html_nonce()"
	"Outputs the in-line comment reply-to form in the Comments list table.":
		"prefix":"wp_comment_reply"
		"body":"wp_comment_reply( ${1:\\$position = 1}${2:, \\$checkbox = false}${3:, \\$mode = 'single'}${4:, \\$table_row = true} )"
	"Output 'undo move to trash' text for comments":
		"prefix":"wp_comment_trashnotice"
		"body":"wp_comment_trashnotice()"
	"Calculates the new dimensions for a down-sampled image.":
		"prefix":"wp_constrain_dimensions"
		"body":"wp_constrain_dimensions( ${1:\\$current_width}${2:, \\$current_height}${3:, \\$max_width}${4:, \\$max_height} )"
	"Converts an integer byte value to a shorthand byte value.":
		"prefix":"wp_convert_bytes_to_hr"
		"body":"wp_convert_bytes_to_hr( ${1:\\$bytes} )"
	"Converts a shorthand byte value to an integer byte value.":
		"prefix":"wp_convert_hr_to_bytes"
		"body":"wp_convert_hr_to_bytes( ${1:\\$value} )"
	"Convert the widget settings from single to multi-widget format.":
		"prefix":"wp_convert_widget_settings"
		"body":"wp_convert_widget_settings( ${1:\\$base_name}${2:, \\$option_name}${3:, \\$settings} )"
	"Defines cookie related WordPress constants wp_cookie_constants":
		"prefix":"wp_cookie_constants"
		"body":"wp_cookie_constants()"
	"Count number of attachments for the mime type(s).":
		"prefix":"wp_count_attachments"
		"body":"wp_count_attachments( ${1:\\$mime_type = ''} )"
	"Retrieve total comments for blog or single post.":
		"prefix":"wp_count_comments"
		"body":"wp_count_comments( ${1:\\$post_id} )"
	"Count number of posts of a post type and if user has permissions to view.":
		"prefix":"wp_count_posts"
		"body":"wp_count_posts( ${1:\\$type = 'post'}${2:, \\$perm = ''} )"
	"Count how many terms are in Taxonomy.":
		"prefix":"wp_count_terms"
		"body":"wp_count_terms( ${1:\\$taxonomy}${2:, \\$args = array()} )"
	"Create categories for the given post.":
		"prefix":"wp_create_categories"
		"body":"wp_create_categories( ${1:\\$categories}${2:, \\$post_id = ''} )"
	"Add a new category to the database if it does not already exist.":
		"prefix":"wp_create_category"
		"body":"wp_create_category( ${1:\\$cat_name}${2:, \\$parent} )"
	"Creates a navigation menu.":
		"prefix":"wp_create_nav_menu"
		"body":"wp_create_nav_menu( ${1:\\$menu_name} )"
	"Creates a cryptographic token tied to a specific action, user, user session,
and window of time.":
		"prefix":"wp_create_nonce"
		"body":"wp_create_nonce( ${1:\\$action = -1} )"
	"Creates autosave data for the specified post from $_POST data.":
		"prefix":"wp_create_post_autosave"
		"body":"wp_create_post_autosave( ${1:\\$post_data} )"
	"Add a new tag to the database if it does not already exist.":
		"prefix":"wp_create_tag"
		"body":"wp_create_tag( ${1:\\$tag_name} )"
	"Add a new term to the database if it does not already exist.":
		"prefix":"wp_create_term"
		"body":"wp_create_term( ${1:\\$tag_name}${2:, \\$taxonomy = 'post_tag'} )"
	"This was once used to create a thumbnail from an Image given a maximum side size.":
		"prefix":"wp_create_thumbnail"
		"body":"wp_create_thumbnail( ${1:\\$file}${2:, \\$max_side}${3:, \\$deprecated = ''} )"
	"A simpler way of inserting a user into the database.":
		"prefix":"wp_create_user"
		"body":"wp_create_user( ${1:\\$username}${2:, \\$password}${3:, \\$email = ''} )"
	"Retrieve the contributor credits.":
		"prefix":"wp_credits"
		"body":"wp_credits()"
	"Run scheduled callbacks or spawn cron for all scheduled events.":
		"prefix":"wp_cron"
		"body":"wp_cron()"
	"Crop an Image to a given size.":
		"prefix":"wp_crop_image"
		"body":"wp_crop_image( ${1:\\$src}${2:, \\$src_x}${3:, \\$src_y}${4:, \\$src_w}${5:, \\$src_h}${6:, \\$dst_w}${7:, \\$dst_h}${8:, \\$src_abs = false}${9:, \\$dst_file = false} )"
	"Render the Custom CSS style element.":
		"prefix":"wp_custom_css_cb"
		"body":"wp_custom_css_cb()"
	"Prints a script to check whether or not the Customizer is supported,
and apply either the no-customize-support or customize-support class
to the body.":
		"prefix":"wp_customize_support_script"
		"body":"wp_customize_support_script()"
	"Returns a URL to load the Customizer.":
		"prefix":"wp_customize_url"
		"body":"wp_customize_url( ${1:\\$stylesheet = null} )"
	"Displays the dashboard.":
		"prefix":"wp_dashboard"
		"body":"wp_dashboard()"
	"wp_dashboard_browser_nag":
		"prefix":"wp_dashboard_browser_nag"
		"body":"wp_dashboard_browser_nag()"
	"Checks to see if all of the feed url in $check_urls are cached.":
		"prefix":"wp_dashboard_cached_rss_widget"
		"body":"wp_dashboard_cached_rss_widget( ${1:\\$widget_id}${2:, \\$callback}${3:, \\$check_urls = array()} )"
	"Empty function usable by plugins to output empty dashboard widget (to be populated later by JS).":
		"prefix":"wp_dashboard_empty"
		"body":"wp_dashboard_empty()"
	"Renders the Events and News dashboard widget.":
		"prefix":"wp_dashboard_events_news"
		"body":"wp_dashboard_events_news()"
	"Deprecated dashboard widget controls. wp_dashboard_incoming_links":
		"prefix":"wp_dashboard_incoming_links"
		"body":"wp_dashboard_incoming_links()"
	"Deprecated dashboard incoming links control.":
		"prefix":"wp_dashboard_incoming_links_control"
		"body":"wp_dashboard_incoming_links_control()"
	"Deprecated dashboard widget controls. wp_dashboard_incoming_links_output":
		"prefix":"wp_dashboard_incoming_links_output"
		"body":"wp_dashboard_incoming_links_output()"
	"Deprecated dashboard plugins control.":
		"prefix":"wp_dashboard_plugins"
		"body":"wp_dashboard_plugins()"
	"Display plugins text for the WordPress news widget.":
		"prefix":"wp_dashboard_plugins_output"
		"body":"wp_dashboard_plugins_output( ${1:\\$rss}${2:, \\$args = array()} )"
	"WordPress News dashboard widget.":
		"prefix":"wp_dashboard_primary"
		"body":"wp_dashboard_primary()"
	"Deprecated dashboard primary control.":
		"prefix":"wp_dashboard_primary_control"
		"body":"wp_dashboard_primary_control()"
	"Display the WordPress news feeds.":
		"prefix":"wp_dashboard_primary_output"
		"body":"wp_dashboard_primary_output( ${1:\\$widget_id}${2:, \\$feeds} )"
	"The Quick Draft widget display and creation of drafts.":
		"prefix":"wp_dashboard_quick_press"
		"body":"wp_dashboard_quick_press( ${1:\\$error_msg = false} )"
	"Output the QuickPress dashboard widget.":
		"prefix":"wp_dashboard_quick_press_output"
		"body":"wp_dashboard_quick_press_output()"
	"Display file upload quota on dashboard.":
		"prefix":"wp_dashboard_quota"
		"body":"wp_dashboard_quota()"
	"Show Comments section.":
		"prefix":"wp_dashboard_recent_comments"
		"body":"wp_dashboard_recent_comments( ${1:\\$total_items = 5} )"
	"Deprecated dashboard recent comments control.":
		"prefix":"wp_dashboard_recent_comments_control"
		"body":"wp_dashboard_recent_comments_control()"
	"Show recent drafts of the user on the dashboard.":
		"prefix":"wp_dashboard_recent_drafts"
		"body":"wp_dashboard_recent_drafts( ${1:\\$drafts = false} )"
	"Generates Publishing Soon and Recently Published sections.":
		"prefix":"wp_dashboard_recent_posts"
		"body":"wp_dashboard_recent_posts( ${1:\\$args} )"
	"Dashboard widget that displays some basic stats about the site.":
		"prefix":"wp_dashboard_right_now"
		"body":"wp_dashboard_right_now()"
	"The RSS dashboard widget control.":
		"prefix":"wp_dashboard_rss_control"
		"body":"wp_dashboard_rss_control( ${1:\\$widget_id}${2:, \\$form_inputs = array()} )"
	"Display generic dashboard RSS widget feed.":
		"prefix":"wp_dashboard_rss_output"
		"body":"wp_dashboard_rss_output( ${1:\\$widget_id} )"
	"Deprecated dashboard secondary section.":
		"prefix":"wp_dashboard_secondary"
		"body":"wp_dashboard_secondary()"
	"Deprecated dashboard secondary control.":
		"prefix":"wp_dashboard_secondary_control"
		"body":"wp_dashboard_secondary_control()"
	"Deprecated dashboard secondary output.":
		"prefix":"wp_dashboard_secondary_output"
		"body":"wp_dashboard_secondary_output()"
	"Registers dashboard widgets.":
		"prefix":"wp_dashboard_setup"
		"body":"wp_dashboard_setup()"
	"Callback function for Activity widget.":
		"prefix":"wp_dashboard_site_activity"
		"body":"wp_dashboard_site_activity()"
	"Calls widget control callback.":
		"prefix":"wp_dashboard_trigger_widget_control"
		"body":"wp_dashboard_trigger_widget_control( ${1:\\$widget_control_id = false} )"
	"Return a comma-separated string of functions that have been called to get
to the current point in code.":
		"prefix":"wp_debug_backtrace_summary"
		"body":"wp_debug_backtrace_summary( ${1:\\$ignore_class = null}${2:, \\$skip_frames}${3:, \\$pretty = true} )"
	"Set PHP error reporting based on WordPress debug settings.":
		"prefix":"wp_debug_mode"
		"body":"wp_debug_mode()"
	"Find out which editor should be displayed by default.":
		"prefix":"wp_default_editor"
		"body":"wp_default_editor()"
	"Register all WordPress scripts.":
		"prefix":"wp_default_scripts"
		"body":"wp_default_scripts( ${1:\\$scripts} )"
	"Assign default styles to $styles object.":
		"prefix":"wp_default_styles"
		"body":"wp_default_styles( ${1:\\$styles} )"
	"Whether to defer comment counting.":
		"prefix":"wp_defer_comment_counting"
		"body":"wp_defer_comment_counting( ${1:\\$defer = null} )"
	"Enable or disable term counting.":
		"prefix":"wp_defer_term_counting"
		"body":"wp_defer_term_counting( ${1:\\$defer = null} )"
	"Trash or delete an attachment.":
		"prefix":"wp_delete_attachment"
		"body":"wp_delete_attachment( ${1:\\$post_id}${2:, \\$force_delete = false} )"
	"Delete auto-drafts for new posts that are &gt; 7 days old.":
		"prefix":"wp_delete_auto_drafts"
		"body":"wp_delete_auto_drafts()"
	"Deletes one existing category.":
		"prefix":"wp_delete_category"
		"body":"wp_delete_category( ${1:\\$cat_ID} )"
	"Trashes or deletes a comment.":
		"prefix":"wp_delete_comment"
		"body":"wp_delete_comment( ${1:\\$comment_id}${2:, \\$force_delete = false} )"
	"Delete a file":
		"prefix":"wp_delete_file"
		"body":"wp_delete_file( ${1:\\$file} )"
	"Deletes a specified link from the database.":
		"prefix":"wp_delete_link"
		"body":"wp_delete_link( ${1:\\$link_id} )"
	"Delete a Navigation Menu.":
		"prefix":"wp_delete_nav_menu"
		"body":"wp_delete_nav_menu( ${1:\\$menu} )"
	"Will unlink the object from the taxonomy or taxonomies.":
		"prefix":"wp_delete_object_term_relationships"
		"body":"wp_delete_object_term_relationships( ${1:\\$object_id}${2:, \\$taxonomies} )"
	"Trash or delete a post or page.":
		"prefix":"wp_delete_post"
		"body":"wp_delete_post( ${1:\\$postid}${2:, \\$force_delete = false} )"
	"Deletes a revision.":
		"prefix":"wp_delete_post_revision"
		"body":"wp_delete_post_revision( ${1:\\$revision_id} )"
	"Removes a term from the database.":
		"prefix":"wp_delete_term"
		"body":"wp_delete_term( ${1:\\$term}${2:, \\$taxonomy}${3:, \\$args = array()} )"
	"Remove user and optionally reassign posts and links to another user.":
		"prefix":"wp_delete_user"
		"body":"wp_delete_user( ${1:\\$id}${2:, \\$reassign = null} )"
	"Retrieves a list of unique hosts of all enqueued scripts and styles.":
		"prefix":"wp_dependencies_unique_hosts"
		"body":"wp_dependencies_unique_hosts()"
	"Remove a previously enqueued script.":
		"prefix":"wp_dequeue_script"
		"body":"wp_dequeue_script( ${1:\\$handle} )"
	"Remove a previously enqueued CSS stylesheet.":
		"prefix":"wp_dequeue_style"
		"body":"wp_dequeue_style( ${1:\\$handle} )"
	"Remove a registered script.":
		"prefix":"wp_deregister_script"
		"body":"wp_deregister_script( ${1:\\$handle} )"
	"Remove a registered stylesheet.":
		"prefix":"wp_deregister_style"
		"body":"wp_deregister_style( ${1:\\$handle} )"
	"Remove all session tokens for the current user from the database.":
		"prefix":"wp_destroy_all_sessions"
		"body":"wp_destroy_all_sessions()"
	"Remove the current session token from the database.":
		"prefix":"wp_destroy_current_session"
		"body":"wp_destroy_current_session()"
	"Remove all but the current session token for the current user for the database.":
		"prefix":"wp_destroy_other_sessions"
		"body":"wp_destroy_other_sessions()"
	"Kill WordPress execution and display HTML message with error message.":
		"prefix":"wp_die"
		"body":"wp_die( ${1:\\$message = ''}${2:, \\$title = ''}${3:, \\$args = array()} )"
	"wp_doc_link_parse":
		"prefix":"wp_doc_link_parse"
		"body":"wp_doc_link_parse( ${1:\\$content} )"
	"Determines whether the current request is a WordPress Ajax request.":
		"prefix":"wp_doing_ajax"
		"body":"wp_doing_ajax()"
	"Determines whether the current request is a WordPress cron request.":
		"prefix":"wp_doing_cron"
		"body":"wp_doing_cron()"
	"Download a language pack.":
		"prefix":"wp_download_language_pack"
		"body":"wp_download_language_pack( ${1:\\$download} )"
	"Display or retrieve the HTML dropdown list of categories.":
		"prefix":"wp_dropdown_categories"
		"body":"wp_dropdown_categories( ${1:\\$args = ''} )"
	"Legacy function used for generating a categories drop-down control.":
		"prefix":"wp_dropdown_cats"
		"body":"wp_dropdown_cats( ${1:\\$currentcat}${2:, \\$currentparent}${3:, \\$parent}${4:, \\$level}${5:, \\$categories} )"
	"Language selector.":
		"prefix":"wp_dropdown_languages"
		"body":"wp_dropdown_languages( ${1:\\$args = array()} )"
	"Retrieve or display list of pages as a dropdown (select list).":
		"prefix":"wp_dropdown_pages"
		"body":"wp_dropdown_pages( ${1:\\$args = ''} )"
	"Print out option html elements for role selectors.":
		"prefix":"wp_dropdown_roles"
		"body":"wp_dropdown_roles( ${1:\\$selected = ''} )"
	"Create dropdown HTML content of users.":
		"prefix":"wp_dropdown_users"
		"body":"wp_dropdown_users( ${1:\\$args = ''} )"
	"Executes a query for attachments. An array of WP_Query arguments
can be passed in, which will override the arguments set by this function.":
		"prefix":"wp_edit_attachments_query"
		"body":"wp_edit_attachments_query( ${1:\\$q = false} )"
	"Get the query variables for the current attachments request.":
		"prefix":"wp_edit_attachments_query_vars"
		"body":"wp_edit_attachments_query_vars( ${1:\\$q = false} )"
	"Run the wp query to fetch the posts for listing on the edit posts page":
		"prefix":"wp_edit_posts_query"
		"body":"wp_edit_posts_query( ${1:\\$q = false} )"
	"Renders an editor.":
		"prefix":"wp_editor"
		"body":"wp_editor( ${1:\\$content}${2:, \\$editor_id}${3:, \\$settings = array()} )"
	"Creates default array of embed parameters.":
		"prefix":"wp_embed_defaults"
		"body":"wp_embed_defaults( ${1:\\$url = ''} )"
	"Filters the post excerpt for the embed template.":
		"prefix":"wp_embed_excerpt_attachment"
		"body":"wp_embed_excerpt_attachment( ${1:\\$content} )"
	"Filters the string in the 'more' link displayed after a trimmed excerpt.":
		"prefix":"wp_embed_excerpt_more"
		"body":"wp_embed_excerpt_more( ${1:\\$more_string} )"
	"Audio embed handler callback.":
		"prefix":"wp_embed_handler_audio"
		"body":"wp_embed_handler_audio( ${1:\\$matches}${2:, \\$attr}${3:, \\$url}${4:, \\$rawattr} )"
	"The Google Video embed handler callback.":
		"prefix":"wp_embed_handler_googlevideo"
		"body":"wp_embed_handler_googlevideo()"
	"Video embed handler callback.":
		"prefix":"wp_embed_handler_video"
		"body":"wp_embed_handler_video( ${1:\\$matches}${2:, \\$attr}${3:, \\$url}${4:, \\$rawattr} )"
	"YouTube iframe embed handler callback.":
		"prefix":"wp_embed_handler_youtube"
		"body":"wp_embed_handler_youtube( ${1:\\$matches}${2:, \\$attr}${3:, \\$url}${4:, \\$rawattr} )"
	"Registers an embed handler.":
		"prefix":"wp_embed_register_handler"
		"body":"wp_embed_register_handler( ${1:\\$id}${2:, \\$regex}${3:, \\$callback}${4:, \\$priority = 10} )"
	"Unregisters a previously-registered embed handler.":
		"prefix":"wp_embed_unregister_handler"
		"body":"wp_embed_unregister_handler( ${1:\\$id}${2:, \\$priority = 10} )"
	"Convert any 4 byte emoji in a string to their equivalent HTML entity.":
		"prefix":"wp_encode_emoji"
		"body":"wp_encode_emoji( ${1:\\$content} )"
	"Outputs the editor scripts, stylesheets, and default settings.":
		"prefix":"wp_enqueue_editor"
		"body":"wp_enqueue_editor()"
	"Enqueues all scripts, styles, settings, and templates necessary to use
all media JS APIs.":
		"prefix":"wp_enqueue_media"
		"body":"wp_enqueue_media( ${1:\\$args = array()} )"
	"Enqueue a script.":
		"prefix":"wp_enqueue_script"
		"body":"wp_enqueue_script( ${1:\\$handle}${2:, \\$src = ''}${3:, \\$deps = array()}${4:, \\$ver = false}${5:, \\$in_footer = false} )"
	"Wrapper for do_action('wp_enqueue_scripts')":
		"prefix":"wp_enqueue_scripts"
		"body":"wp_enqueue_scripts()"
	"Enqueue a CSS stylesheet.":
		"prefix":"wp_enqueue_style"
		"body":"wp_enqueue_style( ${1:\\$handle}${2:, \\$src = ''}${3:, \\$deps = array()}${4:, \\$ver = false}${5:, \\$media = 'all'} )"
	"Convert the exif date format to a unix timestamp.":
		"prefix":"wp_exif_date2ts"
		"body":"wp_exif_date2ts( ${1:\\$str} )"
	"Convert a fraction string to a decimal.":
		"prefix":"wp_exif_frac2dec"
		"body":"wp_exif_frac2dec( ${1:\\$str} )"
	"Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height.":
		"prefix":"wp_expand_dimensions"
		"body":"wp_expand_dimensions( ${1:\\$example_width}${2:, \\$example_height}${3:, \\$max_width}${4:, \\$max_height} )"
	"Retrieve nonce action &quot;Are you sure&quot; message.":
		"prefix":"wp_explain_nonce"
		"body":"wp_explain_nonce( ${1:\\$action} )"
	"Retrieve the file type based on the extension name.":
		"prefix":"wp_ext2type"
		"body":"wp_ext2type( ${1:\\$ext} )"
	"Use RegEx to extract URLs from arbitrary content.":
		"prefix":"wp_extract_urls"
		"body":"wp_extract_urls( ${1:\\$content} )"
	"Don't load all of WordPress when handling a favicon.ico request.":
		"prefix":"wp_favicon_request"
		"body":"wp_favicon_request()"
	"Initialises and connects the WordPress Filesystem Abstraction classes.":
		"prefix":"wp_filesystem"
		"body":"wp_filesystem( ${1:\\$args = false}${2:, \\$context = false}${3:, \\$allow_relaxed_file_ownership = false} )"
	"Filters and sanitizes comment data.":
		"prefix":"wp_filter_comment"
		"body":"wp_filter_comment( ${1:\\$commentdata} )"
	"Sanitize content with allowed HTML Kses rules.":
		"prefix":"wp_filter_kses"
		"body":"wp_filter_kses( ${1:\\$data} )"
	"Strips all of the HTML in the content.":
		"prefix":"wp_filter_nohtml_kses"
		"body":"wp_filter_nohtml_kses( ${1:\\$data} )"
	"Filters a list of objects, based on a set of key =&gt; value arguments. wp_filter_object_list":
		"prefix":"wp_filter_object_list"
		"body":"wp_filter_object_list( ${1:\\$list}${2:, \\$args = array()}${3:, \\$operator = 'and'}${4:, \\$field = false} )"
	"Filters the given oEmbed HTML.":
		"prefix":"wp_filter_oembed_result"
		"body":"wp_filter_oembed_result( ${1:\\$result}${2:, \\$data}${3:, \\$url} )"
	"Sanitize content for allowed HTML tags for post content. wp_filter_post_kses":
		"prefix":"wp_filter_post_kses"
		"body":"wp_filter_post_kses( ${1:\\$data} )"
	"Filters the oEmbed result before any HTTP requests are made.":
		"prefix":"wp_filter_pre_oembed_result"
		"body":"wp_filter_pre_oembed_result( ${1:\\$result}${2:, \\$url}${3:, \\$args} )"
	"Find hierarchy loops using a callback function that maps object IDs to parent IDs.":
		"prefix":"wp_find_hierarchy_loop"
		"body":"wp_find_hierarchy_loop( ${1:\\$callback}${2:, \\$start}${3:, \\$start_parent}${4:, \\$callback_args = array()} )"
	"Use the &quot;The Tortoise and the Hare&quot; algorithm to detect loops.":
		"prefix":"wp_find_hierarchy_loop_tortoise_hare"
		"body":"wp_find_hierarchy_loop_tortoise_hare( ${1:\\$callback}${2:, \\$start}${3:, \\$override = array()}${4:, \\$callback_args = array()}${5:, \\$_return_loop = false} )"
	"Fix `$_SERVER` variables for various setups.":
		"prefix":"wp_fix_server_vars"
		"body":"wp_fix_server_vars()"
	"Fire the wp_footer action.":
		"prefix":"wp_footer"
		"body":"wp_footer()"
	"Defines functionality related WordPress constants":
		"prefix":"wp_functionality_constants"
		"body":"wp_functionality_constants()"
	"Generate post thumbnail attachment meta data.":
		"prefix":"wp_generate_attachment_metadata"
		"body":"wp_generate_attachment_metadata( ${1:\\$attachment_id}${2:, \\$file} )"
	"Generate authentication cookie contents.":
		"prefix":"wp_generate_auth_cookie"
		"body":"wp_generate_auth_cookie( ${1:\\$user_id}${2:, \\$expiration}${3:, \\$scheme = 'auth'}${4:, \\$token = ''} )"
	"Generates a random password drawn from the defined set of characters.":
		"prefix":"wp_generate_password"
		"body":"wp_generate_password( ${1:\\$length = 12}${2:, \\$special_chars = true}${3:, \\$extra_special_chars = false} )"
	"Generates a tag cloud (heatmap) from provided data.":
		"prefix":"wp_generate_tag_cloud"
		"body":"wp_generate_tag_cloud( ${1:\\$tags}${2:, \\$args = ''} )"
	"Generate a random UUID (version 4).":
		"prefix":"wp_generate_uuid4"
		"body":"wp_generate_uuid4()"
	"Displays the XHTML generator that is generated on the wp_head hook.":
		"prefix":"wp_generator"
		"body":"wp_generator()"
	"Retrieve an array of active and valid plugin files.":
		"prefix":"wp_get_active_and_valid_plugins"
		"body":"wp_get_active_and_valid_plugins()"
	"Returns array of network plugin files to be included in global scope.":
		"prefix":"wp_get_active_network_plugins"
		"body":"wp_get_active_network_plugins()"
	"Retrieve additional image sizes.":
		"prefix":"wp_get_additional_image_sizes"
		"body":"wp_get_additional_image_sizes()"
	"Retrieve a list of sessions for the current user.":
		"prefix":"wp_get_all_sessions"
		"body":"wp_get_all_sessions()"
	"Display archive links based on type and format.":
		"prefix":"wp_get_archives"
		"body":"wp_get_archives( ${1:\\$args = ''} )"
	"Get the menu items associated with a particular object.":
		"prefix":"wp_get_associated_nav_menu_items"
		"body":"wp_get_associated_nav_menu_items( ${1:\\$object_id}${2:, \\$object_type = 'post_type'}${3:, \\$taxonomy = ''} )"
	"Retrieves the caption for an attachment.":
		"prefix":"wp_get_attachment_caption"
		"body":"wp_get_attachment_caption( ${1:\\$post_id} )"
	"Returns useful keys to use to lookup data from an attachment's stored metadata.":
		"prefix":"wp_get_attachment_id3_keys"
		"body":"wp_get_attachment_id3_keys( ${1:\\$attachment}${2:, \\$context = 'display'} )"
	"Get an HTML img element representing an image attachment":
		"prefix":"wp_get_attachment_image"
		"body":"wp_get_attachment_image( ${1:\\$attachment_id}${2:, \\$size = 'thumbnail'}${3:, \\$icon = false}${4:, \\$attr = ''} )"
	"Retrieves the value for an image attachment's 'sizes' attribute.":
		"prefix":"wp_get_attachment_image_sizes"
		"body":"wp_get_attachment_image_sizes( ${1:\\$attachment_id}${2:, \\$size = 'medium'}${3:, \\$image_meta = null} )"
	"Retrieve an image to represent an attachment.":
		"prefix":"wp_get_attachment_image_src"
		"body":"wp_get_attachment_image_src( ${1:\\$attachment_id}${2:, \\$size = 'thumbnail'}${3:, \\$icon = false} )"
	"Retrieves the value for an image attachment's 'srcset' attribute.":
		"prefix":"wp_get_attachment_image_srcset"
		"body":"wp_get_attachment_image_srcset( ${1:\\$attachment_id}${2:, \\$size = 'medium'}${3:, \\$image_meta = null} )"
	"Get the URL of an image attachment.":
		"prefix":"wp_get_attachment_image_url"
		"body":"wp_get_attachment_image_url( ${1:\\$attachment_id}${2:, \\$size = 'thumbnail'}${3:, \\$icon = false} )"
	"Retrieve an attachment page link using an image or icon, if possible.":
		"prefix":"wp_get_attachment_link"
		"body":"wp_get_attachment_link( ${1:\\$id}${2:, \\$size = 'thumbnail'}${3:, \\$permalink = false}${4:, \\$icon = false}${5:, \\$text = false}${6:, \\$attr = ''} )"
	"Retrieve attachment meta field for attachment ID.":
		"prefix":"wp_get_attachment_metadata"
		"body":"wp_get_attachment_metadata( ${1:\\$post_id}${2:, \\$unfiltered = false} )"
	"Retrieve thumbnail for an attachment.":
		"prefix":"wp_get_attachment_thumb_file"
		"body":"wp_get_attachment_thumb_file( ${1:\\$post_id} )"
	"Retrieve URL for an attachment thumbnail.":
		"prefix":"wp_get_attachment_thumb_url"
		"body":"wp_get_attachment_thumb_url( ${1:\\$post_id} )"
	"Retrieve the URL for an attachment.":
		"prefix":"wp_get_attachment_url"
		"body":"wp_get_attachment_url( ${1:\\$post_id} )"
	"Returns a filtered list of WP-supported audio formats.":
		"prefix":"wp_get_audio_extensions"
		"body":"wp_get_audio_extensions()"
	"Get available translations from the WordPress.org API.":
		"prefix":"wp_get_available_translations"
		"body":"wp_get_available_translations()"
	"Returns the canonical URL for a post.":
		"prefix":"wp_get_canonical_url"
		"body":"wp_get_canonical_url( ${1:\\$post = null} )"
	"Retrieves the maximum character lengths for the comment form fields.":
		"prefix":"wp_get_comment_fields_max_lengths"
		"body":"wp_get_comment_fields_max_lengths()"
	"The status of a comment by ID.":
		"prefix":"wp_get_comment_status"
		"body":"wp_get_comment_status( ${1:\\$comment_id} )"
	"Gets the user cookie login. This function is deprecated.":
		"prefix":"wp_get_cookie_login"
		"body":"wp_get_cookie_login()"
	"Get current commenter's name, email, and URL.":
		"prefix":"wp_get_current_commenter"
		"body":"wp_get_current_commenter()"
	"Retrieve the current user object.":
		"prefix":"wp_get_current_user"
		"body":"wp_get_current_user()"
	"Fetch the saved Custom CSS content for rendering.":
		"prefix":"wp_get_custom_css"
		"body":"wp_get_custom_css( ${1:\\$stylesheet = ''} )"
	"Fetch the `custom_css` post for a given theme.":
		"prefix":"wp_get_custom_css_post"
		"body":"wp_get_custom_css_post( ${1:\\$stylesheet = ''} )"
	"Retrieve the SQL for creating database tables.":
		"prefix":"wp_get_db_schema"
		"body":"wp_get_db_schema( ${1:\\$scope = 'all'}${2:, \\$blog_id = null} )"
	"Returns document title for the current page.":
		"prefix":"wp_get_document_title"
		"body":"wp_get_document_title()"
	"Retrieves the list of common file extensions and their types.":
		"prefix":"wp_get_ext_types"
		"body":"wp_get_ext_types()"
	"Perform a HTTP HEAD or GET request.":
		"prefix":"wp_get_http"
		"body":"wp_get_http( ${1:\\$url}${2:, \\$file_path = false}${3:, \\$red = 1} )"
	"Retrieve HTTP Headers from URL.":
		"prefix":"wp_get_http_headers"
		"body":"wp_get_http_headers( ${1:\\$url}${2:, \\$deprecated = false} )"
	"Returns a WP_Image_Editor instance and loads file into it.":
		"prefix":"wp_get_image_editor"
		"body":"wp_get_image_editor( ${1:\\$path}${2:, \\$args = array()} )"
	"Returns the real mime type of an image file.":
		"prefix":"wp_get_image_mime"
		"body":"wp_get_image_mime( ${1:\\$file} )"
	"Get installed translations.":
		"prefix":"wp_get_installed_translations"
		"body":"wp_get_installed_translations( ${1:\\$type} )"
	"Retrieves the link categories associated with the link specified.":
		"prefix":"wp_get_link_cats"
		"body":"wp_get_link_cats( ${1:\\$link_id} )"
	"Gets the links associated with category.":
		"prefix":"wp_get_links"
		"body":"wp_get_links( ${1:\\$args = ''} )"
	"Gets the links associated with the named category.":
		"prefix":"wp_get_linksbyname"
		"body":"wp_get_linksbyname( ${1:\\$category}${2:, \\$args = ''} )"
	"Retrieve list of mime types and file extensions.":
		"prefix":"wp_get_mime_types"
		"body":"wp_get_mime_types()"
	"Retrieve an array of must-use plugin files.":
		"prefix":"wp_get_mu_plugins"
		"body":"wp_get_mu_plugins()"
	"Retrieves all menu items of a navigation menu.":
		"prefix":"wp_get_nav_menu_items"
		"body":"wp_get_nav_menu_items( ${1:\\$menu}${2:, \\$args = array()} )"
	"Returns a navigation menu object.":
		"prefix":"wp_get_nav_menu_object"
		"body":"wp_get_nav_menu_object( ${1:\\$menu} )"
	"Returns the menu formatted to edit.":
		"prefix":"wp_get_nav_menu_to_edit"
		"body":"wp_get_nav_menu_to_edit( ${1:\\$menu_id} )"
	"Returns all navigation menu objects.":
		"prefix":"wp_get_nav_menus"
		"body":"wp_get_nav_menus( ${1:\\$args = array()} )"
	"Retrieve an object containing information about the requested network.":
		"prefix":"wp_get_network"
		"body":"wp_get_network( ${1:\\$network} )"
	"Get the header information to prevent caching.":
		"prefix":"wp_get_nocache_headers"
		"body":"wp_get_nocache_headers()"
	"Retrieves the terms associated with the given object(s), in the supplied taxonomies.":
		"prefix":"wp_get_object_terms"
		"body":"wp_get_object_terms( ${1:\\$object_ids}${2:, \\$taxonomies}${3:, \\$args = array()} )"
	"Retrieve original referer that was posted, if it exists.":
		"prefix":"wp_get_original_referer"
		"body":"wp_get_original_referer()"
	"Gets the text suggesting how to create strong passwords.":
		"prefix":"wp_get_password_hint"
		"body":"wp_get_password_hint()"
	"Extract headers from a PO file.":
		"prefix":"wp_get_pomo_file_data"
		"body":"wp_get_pomo_file_data( ${1:\\$po_file} )"
	"Returns a list from WordPress.org of popular importer plugins.":
		"prefix":"wp_get_popular_importers"
		"body":"wp_get_popular_importers()"
	"Retrieve the autosaved data of the specified post.":
		"prefix":"wp_get_post_autosave"
		"body":"wp_get_post_autosave( ${1:\\$post_id}${2:, \\$user_id} )"
	"Retrieve the list of categories for a post.":
		"prefix":"wp_get_post_categories"
		"body":"wp_get_post_categories( ${1:\\$post_id}${2:, \\$args = array()} )"
	"Retrieves a list of post categories.":
		"prefix":"wp_get_post_cats"
		"body":"wp_get_post_cats( ${1:\\$blogid = '1'}${2:, \\$post_ID} )"
	"Return the post's parent's post_ID":
		"prefix":"wp_get_post_parent_id"
		"body":"wp_get_post_parent_id( ${1:\\$post_ID} )"
	"Gets a post revision.":
		"prefix":"wp_get_post_revision"
		"body":"wp_get_post_revision( ${1:\\$post}${2:, \\$output = OBJECT}${3:, \\$filter = 'raw'} )"
	"Returns all revisions of specified post.":
		"prefix":"wp_get_post_revisions"
		"body":"wp_get_post_revisions( ${1:\\$post_id}${2:, \\$args = null} )"
	"Retrieve the tags for a post. wp_get_post_tags":
		"prefix":"wp_get_post_tags"
		"body":"wp_get_post_tags( ${1:\\$post_id}${2:, \\$args = array()} )"
	"Retrieve the terms for a post.":
		"prefix":"wp_get_post_terms"
		"body":"wp_get_post_terms( ${1:\\$post_id}${2:, \\$taxonomy = 'post_tag'}${3:, \\$args = array()} )"
	"Retrieves unvalidated referer from '_wp_http_referer' or HTTP referer.":
		"prefix":"wp_get_raw_referer"
		"body":"wp_get_raw_referer()"
	"Retrieve a number of recent posts.":
		"prefix":"wp_get_recent_posts"
		"body":"wp_get_recent_posts( ${1:\\$args = array()}${2:, \\$output = ARRAY_A} )"
	"Retrieve referer from '_wp_http_referer' or HTTP referer.":
		"prefix":"wp_get_referer"
		"body":"wp_get_referer()"
	"Get the revision UI diff.":
		"prefix":"wp_get_revision_ui_diff"
		"body":"wp_get_revision_ui_diff( ${1:\\$post}${2:, \\$compare_from}${3:, \\$compare_to} )"
	"Retrieve the recurrence schedule for an event.":
		"prefix":"wp_get_schedule"
		"body":"wp_get_schedule( ${1:\\$hook}${2:, \\$args = array()} )"
	"Retrieve supported event recurrence schedules.":
		"prefix":"wp_get_schedules"
		"body":"wp_get_schedules()"
	"Return the HTTP protocol sent by the server.":
		"prefix":"wp_get_server_protocol"
		"body":"wp_get_server_protocol()"
	"Retrieve the current session token from the logged_in cookie.":
		"prefix":"wp_get_session_token"
		"body":"wp_get_session_token()"
	"Returns a shortlink for a post, page, attachment, or site.":
		"prefix":"wp_get_shortlink"
		"body":"wp_get_shortlink( ${1:\\$id}${2:, \\$context = 'post'}${3:, \\$allow_slugs = true} )"
	"Retrieve full list of sidebars and their widget instance IDs.":
		"prefix":"wp_get_sidebars_widgets"
		"body":"wp_get_sidebars_widgets( ${1:\\$deprecated = true} )"
	"Retrieve a single post, based on post ID.":
		"prefix":"wp_get_single_post"
		"body":"wp_get_single_post( ${1:\\$postid}${2:, \\$mode = OBJECT} )"
	"Return an array of sites for a network or networks.":
		"prefix":"wp_get_sites"
		"body":"wp_get_sites( ${1:\\$args = array()} )"
	"Get the new term ID corresponding to a previously split term.":
		"prefix":"wp_get_split_term"
		"body":"wp_get_split_term( ${1:\\$old_term_id}${2:, \\$taxonomy} )"
	"Get data about terms that previously shared a single term_id, but have since been split.":
		"prefix":"wp_get_split_terms"
		"body":"wp_get_split_terms( ${1:\\$old_term_id} )"
	"Returns the term's parent's term_ID.":
		"prefix":"wp_get_term_taxonomy_parent_id"
		"body":"wp_get_term_taxonomy_parent_id( ${1:\\$term_id}${2:, \\$taxonomy} )"
	"Gets a WP_Theme object for a theme.":
		"prefix":"wp_get_theme"
		"body":"wp_get_theme( ${1:\\$stylesheet = null}${2:, \\$theme_root = null} )"
	"Returns an array of WP_Theme objects based on the arguments.":
		"prefix":"wp_get_themes"
		"body":"wp_get_themes( ${1:\\$args = array()} )"
	"Retrieves a list of all language updates available.":
		"prefix":"wp_get_translation_updates"
		"body":"wp_get_translation_updates()"
	"Collect counts and UI strings for available updates":
		"prefix":"wp_get_update_data"
		"body":"wp_get_update_data()"
	"Retrieves uploads directory information.":
		"prefix":"wp_get_upload_dir"
		"body":"wp_get_upload_dir()"
	"Set up the user contact methods.":
		"prefix":"wp_get_user_contact_methods"
		"body":"wp_get_user_contact_methods( ${1:\\$user = null} )"
	"Get the user IDs of all users with no role on this site.":
		"prefix":"wp_get_users_with_no_role"
		"body":"wp_get_users_with_no_role()"
	"Returns a filtered list of WP-supported video formats.":
		"prefix":"wp_get_video_extensions"
		"body":"wp_get_video_extensions()"
	"Retrieve default registered sidebars list.":
		"prefix":"wp_get_widget_defaults"
		"body":"wp_get_widget_defaults()"
	"Guess the URL for the site.":
		"prefix":"wp_guess_url"
		"body":"wp_guess_url()"
	"Handles the submission of a comment, usually posted to wp-comments-post.php via a comment form.":
		"prefix":"wp_handle_comment_submission"
		"body":"wp_handle_comment_submission( ${1:\\$comment_data} )"
	"Wrapper for _wp_handle_upload(). wp_handle_sideload":
		"prefix":"wp_handle_sideload"
		"body":"wp_handle_sideload( ${1:\\$file}${2:, \\$overrides = false}${3:, \\$time = null} )"
	"Wrapper for _wp_handle_upload(). wp_handle_upload":
		"prefix":"wp_handle_upload"
		"body":"wp_handle_upload( ${1:\\$file}${2:, \\$overrides = false}${3:, \\$time = null} )"
	"Get hash of given string.":
		"prefix":"wp_hash"
		"body":"wp_hash( ${1:\\$data}${2:, \\$scheme = 'auth'} )"
	"Create a hash (encrypt) of a plain text password.":
		"prefix":"wp_hash_password"
		"body":"wp_hash_password( ${1:\\$password} )"
	"Fire the wp_head action.":
		"prefix":"wp_head"
		"body":"wp_head()"
	"Disable suspension of Heartbeat on the Add/Edit Post screens.":
		"prefix":"wp_heartbeat_set_suspension"
		"body":"wp_heartbeat_set_suspension( ${1:\\$settings} )"
	"Default settings for heartbeat":
		"prefix":"wp_heartbeat_settings"
		"body":"wp_heartbeat_settings( ${1:\\$settings} )"
	"Safely extracts not more than the first $count characters from html string.":
		"prefix":"wp_html_excerpt"
		"body":"wp_html_excerpt( ${1:\\$str}${2:, \\$count}${3:, \\$more = null} )"
	"Separate HTML elements and comments from the text.":
		"prefix":"wp_html_split"
		"body":"wp_html_split( ${1:\\$input} )"
	"Formats text for the HTML editor.":
		"prefix":"wp_htmledit_pre"
		"body":"wp_htmledit_pre( ${1:\\$output} )"
	"Determines if there is an HTTP Transport that can process this request.":
		"prefix":"wp_http_supports"
		"body":"wp_http_supports( ${1:\\$capabilities = array()}${2:, \\$url = null} )"
	"Validate a URL for safe use in the HTTP API.":
		"prefix":"wp_http_validate_url"
		"body":"wp_http_validate_url( ${1:\\$url} )"
	"Adds the iframe to display content for the media upload page":
		"prefix":"wp_iframe"
		"body":"wp_iframe( ${1:\\$content_func} )"
	"Adds 'srcset' and 'sizes' attributes to an existing 'img' element.":
		"prefix":"wp_image_add_srcset_and_sizes"
		"body":"wp_image_add_srcset_and_sizes( ${1:\\$image}${2:, \\$image_meta}${3:, \\$attachment_id} )"
	"Loads the WP image-editing interface.":
		"prefix":"wp_image_editor"
		"body":"wp_image_editor( ${1:\\$post_id}${2:, \\$msg = false} )"
	"Tests whether there is an editor that supports a given mime type or methods.":
		"prefix":"wp_image_editor_supports"
		"body":"wp_image_editor_supports( ${1:\\$args = array()} )"
	"Helper function to test if aspect ratios for two images match.":
		"prefix":"wp_image_matches_ratio"
		"body":"wp_image_matches_ratio( ${1:\\$source_width}${2:, \\$source_height}${3:, \\$target_width}${4:, \\$target_height} )"
	"Create new GD image resource with transparency support":
		"prefix":"wp_imagecreatetruecolor"
		"body":"wp_imagecreatetruecolor( ${1:\\$width}${2:, \\$height} )"
	"Cleanup importer.":
		"prefix":"wp_import_cleanup"
		"body":"wp_import_cleanup( ${1:\\$id} )"
	"Handle importer uploading and add attachment.":
		"prefix":"wp_import_handle_upload"
		"body":"wp_import_handle_upload()"
	"Outputs the form used by the importers to accept the data to be imported":
		"prefix":"wp_import_upload_form"
		"body":"wp_import_upload_form( ${1:\\$action} )"
	"Defines initial WordPress constants":
		"prefix":"wp_initial_constants"
		"body":"wp_initial_constants()"
	"Limit the amount of meta boxes to pages, posts, links, and categories for first time users.":
		"prefix":"wp_initial_nav_menu_meta_boxes"
		"body":"wp_initial_nav_menu_meta_boxes()"
	"Insert an attachment.":
		"prefix":"wp_insert_attachment"
		"body":"wp_insert_attachment( ${1:\\$args}${2:, \\$file = false}${3:, \\$parent}${4:, \\$wp_error = false} )"
	"Updates an existing Category or creates a new Category.":
		"prefix":"wp_insert_category"
		"body":"wp_insert_category( ${1:\\$catarr}${2:, \\$wp_error = false} )"
	"Inserts a comment into the database.":
		"prefix":"wp_insert_comment"
		"body":"wp_insert_comment( ${1:\\$commentdata} )"
	"Inserts/updates links into/in the database.":
		"prefix":"wp_insert_link"
		"body":"wp_insert_link( ${1:\\$linkdata}${2:, \\$wp_error = false} )"
	"Insert or update a post.":
		"prefix":"wp_insert_post"
		"body":"wp_insert_post( ${1:\\$postarr}${2:, \\$wp_error = false} )"
	"Add a new term to the database.":
		"prefix":"wp_insert_term"
		"body":"wp_insert_term( ${1:\\$term}${2:, \\$taxonomy}${3:, \\$args = array()} )"
	"Insert a user into the database.":
		"prefix":"wp_insert_user"
		"body":"wp_insert_user( ${1:\\$userdata} )"
	"Installs the site.":
		"prefix":"wp_install"
		"body":"wp_install( ${1:\\$blog_title}${2:, \\$user_name}${3:, \\$user_email}${4:, \\$public}${5:, \\$deprecated = ''}${6:, \\$user_password = ''}${7:, \\$language = ''} )"
	"Creates the initial content for a newly-installed site.":
		"prefix":"wp_install_defaults"
		"body":"wp_install_defaults( ${1:\\$user_id} )"
	"Output the select form for the language selection on the installation screen.":
		"prefix":"wp_install_language_form"
		"body":"wp_install_language_form( ${1:\\$languages} )"
	"Maybe enable pretty permalinks on install.":
		"prefix":"wp_install_maybe_enable_pretty_permalinks"
		"body":"wp_install_maybe_enable_pretty_permalinks()"
	"Check or set whether WordPress is in &quot;installation&quot; mode.":
		"prefix":"wp_installing"
		"body":"wp_installing( ${1:\\$is_installing = null} )"
	"Determines whether file modifications are allowed.":
		"prefix":"wp_is_file_mod_allowed"
		"body":"wp_is_file_mod_allowed( ${1:\\$context} )"
	"Determines whether a PHP ini value is changeable at runtime.":
		"prefix":"wp_is_ini_value_changeable"
		"body":"wp_is_ini_value_changeable( ${1:\\$setting} )"
	"Whether or not we have a large network.":
		"prefix":"wp_is_large_network"
		"body":"wp_is_large_network( ${1:\\$using = 'sites'}${2:, \\$network_id = null} )"
	"Test if the current browser runs on a mobile device (smart phone, tablet, etc.)":
		"prefix":"wp_is_mobile"
		"body":"wp_is_mobile()"
	"Determines if the variable is a numeric-indexed array.":
		"prefix":"wp_is_numeric_array"
		"body":"wp_is_numeric_array( ${1:\\$data} )"
	"Determines if the specified post is an autosave.":
		"prefix":"wp_is_post_autosave"
		"body":"wp_is_post_autosave( ${1:\\$post} )"
	"Determines if the specified post is a revision.":
		"prefix":"wp_is_post_revision"
		"body":"wp_is_post_revision( ${1:\\$post} )"
	"Test if a given path is a stream URL":
		"prefix":"wp_is_stream"
		"body":"wp_is_stream( ${1:\\$path} )"
	"Determine if a directory is writable.":
		"prefix":"wp_is_writable"
		"body":"wp_is_writable( ${1:\\$path} )"
	"Convert to ASCII from email subjects.":
		"prefix":"wp_iso_descrambler"
		"body":"wp_iso_descrambler( ${1:\\$string} )"
	"Encode a variable into JSON, with some sanity checks.":
		"prefix":"wp_json_encode"
		"body":"wp_json_encode( ${1:\\$data}${2:, \\$options}${3:, \\$depth = 512} )"
	"Load localized data on print rather than initialization.":
		"prefix":"wp_just_in_time_script_localization"
		"body":"wp_just_in_time_script_localization()"
	"Filters content and keeps only allowable HTML elements.":
		"prefix":"wp_kses"
		"body":"wp_kses( ${1:\\$string}${2:, \\$allowed_html}${3:, \\$allowed_protocols = array()} )"
	"Return a list of allowed tags and attributes for a given context.":
		"prefix":"wp_kses_allowed_html"
		"body":"wp_kses_allowed_html( ${1:\\$context = ''} )"
	"Goes through an array and changes the keys to all lower case.":
		"prefix":"wp_kses_array_lc"
		"body":"wp_kses_array_lc( ${1:\\$inarray} )"
	"Removes all attributes, if none are allowed for this element.":
		"prefix":"wp_kses_attr"
		"body":"wp_kses_attr( ${1:\\$element}${2:, \\$attr}${3:, \\$allowed_html}${4:, \\$allowed_protocols} )"
	"Determine whether an attribute is allowed.":
		"prefix":"wp_kses_attr_check"
		"body":"wp_kses_attr_check( ${1:\\$name}${2:, \\$value}${3:, \\$whole}${4:, \\$vless}${5:, \\$element}${6:, \\$allowed_html} )"
	"Finds all attributes of an HTML element.":
		"prefix":"wp_kses_attr_parse"
		"body":"wp_kses_attr_parse( ${1:\\$element} )"
	"Sanitize string from bad protocols.":
		"prefix":"wp_kses_bad_protocol"
		"body":"wp_kses_bad_protocol( ${1:\\$string}${2:, \\$allowed_protocols} )"
	"Sanitizes content from bad protocols and other characters.":
		"prefix":"wp_kses_bad_protocol_once"
		"body":"wp_kses_bad_protocol_once( ${1:\\$string}${2:, \\$allowed_protocols} )"
	"Callback for wp_kses_bad_protocol_once() regular expression.":
		"prefix":"wp_kses_bad_protocol_once2"
		"body":"wp_kses_bad_protocol_once2( ${1:\\$string}${2:, \\$allowed_protocols} )"
	"Performs different checks for attribute values.":
		"prefix":"wp_kses_check_attr_val"
		"body":"wp_kses_check_attr_val( ${1:\\$value}${2:, \\$vless}${3:, \\$checkname}${4:, \\$checkvalue} )"
	"Sanitize content with allowed HTML Kses rules. wp_kses_datare":
		"prefix":"wp_kses_data"
		"body":"wp_kses_data( ${1:\\$data} )"
	"Convert all entities to their character counterparts.":
		"prefix":"wp_kses_decode_entities"
		"body":"wp_kses_decode_entities( ${1:\\$string} )"
	"Builds an attribute list from string containing attributes. wp_kses_hair":
		"prefix":"wp_kses_hair"
		"body":"wp_kses_hair( ${1:\\$attr}${2:, \\$allowed_protocols} )"
	"Builds an attribute list from string containing attributes. wp_kses_hair_parse":
		"prefix":"wp_kses_hair_parse"
		"body":"wp_kses_hair_parse( ${1:\\$attr} )"
	"You add any kses hooks here.":
		"prefix":"wp_kses_hook"
		"body":"wp_kses_hook( ${1:\\$string}${2:, \\$allowed_html}${3:, \\$allowed_protocols} )"
	"Handles parsing errors in wp_kses_hair().":
		"prefix":"wp_kses_html_error"
		"body":"wp_kses_html_error( ${1:\\$string} )"
	"Removes the HTML JavaScript entities found in early versions of Netscape 4.":
		"prefix":"wp_kses_js_entities"
		"body":"wp_kses_js_entities( ${1:\\$string} )"
	"Callback for wp_kses_normalize_entities() regular expression. wp_kses_named_entitiesre":
		"prefix":"wp_kses_named_entities"
		"body":"wp_kses_named_entities( ${1:\\$matches} )"
	"Removes any invalid control characters in $string.":
		"prefix":"wp_kses_no_null"
		"body":"wp_kses_no_null( ${1:\\$string}${2:, \\$options = null} )"
	"Converts and fixes HTML entities.":
		"prefix":"wp_kses_normalize_entities"
		"body":"wp_kses_normalize_entities( ${1:\\$string} )"
	"Callback for wp_kses_normalize_entities() regular expression. wp_kses_normalize_entities2":
		"prefix":"wp_kses_normalize_entities2"
		"body":"wp_kses_normalize_entities2( ${1:\\$matches} )"
	"Callback for wp_kses_normalize_entities() for regular expression.":
		"prefix":"wp_kses_normalize_entities3"
		"body":"wp_kses_normalize_entities3( ${1:\\$matches} )"
	"Filters one attribute only and ensures its value is allowed.":
		"prefix":"wp_kses_one_attr"
		"body":"wp_kses_one_attr( ${1:\\$string}${2:, \\$element} )"
	"Sanitize content for allowed HTML tags for post content. wp_kses_post":
		"prefix":"wp_kses_post"
		"body":"wp_kses_post( ${1:\\$data} )"
	"Navigates through an array, object, or scalar, and sanitizes content for
allowed HTML tags for post content.":
		"prefix":"wp_kses_post_deep"
		"body":"wp_kses_post_deep( ${1:\\$data} )"
	"Searches for HTML tags, no matter how malformed.":
		"prefix":"wp_kses_split"
		"body":"wp_kses_split( ${1:\\$string}${2:, \\$allowed_html}${3:, \\$allowed_protocols} )"
	"Callback for wp_kses_split for fixing malformed HTML tags.":
		"prefix":"wp_kses_split2"
		"body":"wp_kses_split2( ${1:\\$string}${2:, \\$allowed_html}${3:, \\$allowed_protocols} )"
	"Strips slashes from in front of quotes.":
		"prefix":"wp_kses_stripslashes"
		"body":"wp_kses_stripslashes( ${1:\\$string} )"
	"This function returns kses' version number.":
		"prefix":"wp_kses_version"
		"body":"wp_kses_version()"
	"Outputs a link category checklist element.":
		"prefix":"wp_link_category_checklist"
		"body":"wp_link_category_checklist( ${1:\\$link_id} )"
	"Outputs the 'disabled' message for the WordPress Link Manager.":
		"prefix":"wp_link_manager_disabled_message"
		"body":"wp_link_manager_disabled_message()"
	"The formatted output of a list of pages.":
		"prefix":"wp_link_pages"
		"body":"wp_link_pages( ${1:\\$args = ''} )"
	"List all the authors of the site, with several options available.":
		"prefix":"wp_list_authors"
		"body":"wp_list_authors( ${1:\\$args = ''} )"
	"Retrieve or echo all of the bookmarks.":
		"prefix":"wp_list_bookmarks"
		"body":"wp_list_bookmarks( ${1:\\$args = ''} )"
	"Display or retrieve the HTML list of categories.":
		"prefix":"wp_list_categories"
		"body":"wp_list_categories( ${1:\\$args = ''} )"
	"Lists categories. wp_list_cats":
		"prefix":"wp_list_cats"
		"body":"wp_list_cats( ${1:\\$args = ''} )"
	"List comments.":
		"prefix":"wp_list_comments"
		"body":"wp_list_comments( ${1:\\$args = array()}${2:, \\$comments = null} )"
	"Filters a list of objects, based on a set of key =&gt; value arguments. wp_list_filter":
		"prefix":"wp_list_filter"
		"body":"wp_list_filter( ${1:\\$list}${2:, \\$args = array()}${3:, \\$operator = 'AND'} )"
	"Retrieve or display list of pages (or hierarchical post type items) in list (li) format.":
		"prefix":"wp_list_pages"
		"body":"wp_list_pages( ${1:\\$args = ''} )"
	"Pluck a certain field out of each object in a list.":
		"prefix":"wp_list_pluck"
		"body":"wp_list_pluck( ${1:\\$list}${2:, \\$field}${3:, \\$index_key = null} )"
	"Display list of a post's revisions.":
		"prefix":"wp_list_post_revisions"
		"body":"wp_list_post_revisions( ${1:\\$post_id}${2:, \\$type = 'all'} )"
	"Sorts a list of objects, based on one or more orderby arguments.":
		"prefix":"wp_list_sort"
		"body":"wp_list_sort( ${1:\\$list}${2:, \\$orderby = array()}${3:, \\$order = 'ASC'}${4:, \\$preserve_keys = false} )"
	"Show the widgets and their settings for a sidebar.":
		"prefix":"wp_list_widget_controls"
		"body":"wp_list_widget_controls( ${1:\\$sidebar}${2:, \\$sidebar_name = ''} )"
	"Retrieves the widget control arguments.":
		"prefix":"wp_list_widget_controls_dynamic_sidebar"
		"body":"wp_list_widget_controls_dynamic_sidebar( ${1:\\$params} )"
	"Display list of the available widgets.":
		"prefix":"wp_list_widgets"
		"body":"wp_list_widgets()"
	"Loads and caches all autoloaded options, if available or all options.":
		"prefix":"wp_load_alloptions"
		"body":"wp_load_alloptions()"
	"Loads and caches certain often requested site options if is_multisite() and a persistent cache is not being used.":
		"prefix":"wp_load_core_site_options"
		"body":"wp_load_core_site_options( ${1:\\$site_id = null} )"
	"Load an image from a string, if PHP supports it.":
		"prefix":"wp_load_image"
		"body":"wp_load_image( ${1:\\$file} )"
	"Attempt an early load of translations.":
		"prefix":"wp_load_translations_early"
		"body":"wp_load_translations_early()"
	"Localizes community events data that needs to be passed to dashboard.js.":
		"prefix":"wp_localize_community_events"
		"body":"wp_localize_community_events()"
	"Localizes the jQuery UI datepicker.":
		"prefix":"wp_localize_jquery_ui_datepicker"
		"body":"wp_localize_jquery_ui_datepicker()"
	"Localize a script.":
		"prefix":"wp_localize_script"
		"body":"wp_localize_script( ${1:\\$handle}${2:, \\$object_name}${3:, \\$l10n} )"
	"Checks a users login information and logs them in if it checks out. This function is deprecated.":
		"prefix":"wp_login"
		"body":"wp_login( ${1:\\$username}${2:, \\$password}${3:, \\$deprecated = ''} )"
	"Provides a simple login form for use anywhere within WordPress.":
		"prefix":"wp_login_form"
		"body":"wp_login_form( ${1:\\$args = array()} )"
	"Retrieves the login URL.":
		"prefix":"wp_login_url"
		"body":"wp_login_url( ${1:\\$redirect = ''}${2:, \\$force_reauth = false} )"
	"wp_login_viewport_meta":
		"prefix":"wp_login_viewport_meta"
		"body":"wp_login_viewport_meta()"
	"Display the Log In/Out link.":
		"prefix":"wp_loginout"
		"body":"wp_loginout( ${1:\\$redirect = ''}${2:, \\$echo = true} )"
	"Log the current user out.":
		"prefix":"wp_logout"
		"body":"wp_logout()"
	"Retrieves the logout URL.":
		"prefix":"wp_logout_url"
		"body":"wp_logout_url( ${1:\\$redirect = ''} )"
	"Returns the URL that allows the user to retrieve the lost password":
		"prefix":"wp_lostpassword_url"
		"body":"wp_lostpassword_url( ${1:\\$redirect = ''} )"
	"Add magic quotes to `$_GET`, `$_POST`, `$_COOKIE`, and `$_SERVER`.":
		"prefix":"wp_magic_quotes"
		"body":"wp_magic_quotes()"
	"Send mail, similar to PHP's mail":
		"prefix":"wp_mail"
		"body":"wp_mail( ${1:\\$to}${2:, \\$subject}${3:, \\$message}${4:, \\$headers = ''}${5:, \\$attachments = array()} )"
	"Die with a maintenance message when conditions are met.":
		"prefix":"wp_maintenance"
		"body":"wp_maintenance()"
	"Filters 'img' elements in post content to add 'srcset' and 'sizes' attributes.":
		"prefix":"wp_make_content_images_responsive"
		"body":"wp_make_content_images_responsive( ${1:\\$content} )"
	"Convert full URL paths to absolute paths.":
		"prefix":"wp_make_link_relative"
		"body":"wp_make_link_relative( ${1:\\$link} )"
	"Check a MIME-Type against a list.":
		"prefix":"wp_match_mime_types"
		"body":"wp_match_mime_types( ${1:\\$wildcard_mime_types}${2:, \\$real_mime_types} )"
	"Determines the maximum upload size allowed in php.ini.":
		"prefix":"wp_max_upload_size"
		"body":"wp_max_upload_size()"
	"Performs WordPress automatic background updates.":
		"prefix":"wp_maybe_auto_update"
		"body":"wp_maybe_auto_update()"
	"Determines if the date should be declined.":
		"prefix":"wp_maybe_decline_date"
		"body":"wp_maybe_decline_date( ${1:\\$date} )"
	"Maybe attempts to generate attachment metadata, if missing.":
		"prefix":"wp_maybe_generate_attachment_metadata"
		"body":"wp_maybe_generate_attachment_metadata( ${1:\\$attachment} )"
	"Determines if default embed handlers should be loaded.":
		"prefix":"wp_maybe_load_embeds"
		"body":"wp_maybe_load_embeds()"
	"Determines if Widgets library should be loaded.":
		"prefix":"wp_maybe_load_widgets"
		"body":"wp_maybe_load_widgets()"
	"Update the count of sites for the current network.":
		"prefix":"wp_maybe_update_network_site_counts"
		"body":"wp_maybe_update_network_site_counts( ${1:\\$network_id = null} )"
	"Update the network-wide users count.":
		"prefix":"wp_maybe_update_network_user_counts"
		"body":"wp_maybe_update_network_user_counts( ${1:\\$network_id = null} )"
	"Encapsulate logic for Attach/Detach actions":
		"prefix":"wp_media_attach_action"
		"body":"wp_media_attach_action( ${1:\\$parent_id}${2:, \\$action = 'attach'} )"
	"Creates the form for external url":
		"prefix":"wp_media_insert_url_form"
		"body":"wp_media_insert_url_form( ${1:\\$default_view = 'image'} )"
	"Handles the process of uploading media.":
		"prefix":"wp_media_upload_handler"
		"body":"wp_media_upload_handler()"
	"Provides a No-JS Flash fallback as a last resort for audio / video.":
		"prefix":"wp_mediaelement_fallback"
		"body":"wp_mediaelement_fallback( ${1:\\$url} )"
	"Theme container function for the 'wp_meta' action.":
		"prefix":"wp_meta"
		"body":"wp_meta()"
	"Retrieves the queue for lazy-loading metadata.":
		"prefix":"wp_metadata_lazyloader"
		"body":"wp_metadata_lazyloader()"
	"Retrieve the icon for a MIME type.":
		"prefix":"wp_mime_type_icon"
		"body":"wp_mime_type_icon( ${1:\\$mime} )"
	"Recursive directory creation based on full path.":
		"prefix":"wp_mkdir_p"
		"body":"wp_mkdir_p( ${1:\\$target} )"
	"Displays a navigation menu.":
		"prefix":"wp_nav_menu"
		"body":"wp_nav_menu( ${1:\\$args = array()} )"
	"Check whether to disable the Menu Locations meta box submit button":
		"prefix":"wp_nav_menu_disabled_check"
		"body":"wp_nav_menu_disabled_check( ${1:\\$nav_menu_selected_id} )"
	"Displays a meta box for the custom links menu item.":
		"prefix":"wp_nav_menu_item_link_meta_box"
		"body":"wp_nav_menu_item_link_meta_box()"
	"Displays a meta box for a post type menu item.":
		"prefix":"wp_nav_menu_item_post_type_meta_box"
		"body":"wp_nav_menu_item_post_type_meta_box( ${1:\\$object}${2:, \\$box} )"
	"Displays a meta box for a taxonomy menu item.":
		"prefix":"wp_nav_menu_item_taxonomy_meta_box"
		"body":"wp_nav_menu_item_taxonomy_meta_box( ${1:\\$object}${2:, \\$box} )"
	"This was once used to display a meta box for the nav menu theme locations.":
		"prefix":"wp_nav_menu_locations_meta_box"
		"body":"wp_nav_menu_locations_meta_box()"
	"Returns the columns for the nav menus page.":
		"prefix":"wp_nav_menu_manage_columns"
		"body":"wp_nav_menu_manage_columns()"
	"wp_nav_menu_max_depth":
		"prefix":"wp_nav_menu_max_depth"
		"body":"wp_nav_menu_max_depth( ${1:\\$classes} )"
	"Creates meta boxes for any post type menu item..":
		"prefix":"wp_nav_menu_post_type_meta_boxes"
		"body":"wp_nav_menu_post_type_meta_boxes()"
	"Register nav menu meta boxes and advanced menu items.":
		"prefix":"wp_nav_menu_setup"
		"body":"wp_nav_menu_setup()"
	"Creates meta boxes for any taxonomy menu item.":
		"prefix":"wp_nav_menu_taxonomy_meta_boxes"
		"body":"wp_nav_menu_taxonomy_meta_boxes()"
	"Saves nav menu items":
		"prefix":"wp_nav_menu_update_menu_items"
		"body":"wp_nav_menu_update_menu_items( ${1:\\$nav_menu_selected_id}${2:, \\$nav_menu_selected_title} )"
	"wp_network_dashboard_right_now":
		"prefix":"wp_network_dashboard_right_now"
		"body":"wp_network_dashboard_right_now()"
	"Notifies the site admin that the setup is complete.":
		"prefix":"wp_new_blog_notification"
		"body":"wp_new_blog_notification( ${1:\\$blog_title}${2:, \\$blog_url}${3:, \\$user_id}${4:, \\$password} )"
	"Adds a new comment to the database.":
		"prefix":"wp_new_comment"
		"body":"wp_new_comment( ${1:\\$commentdata}${2:, \\$avoid_die = false} )"
	"Send a comment moderation notification to the comment moderator.":
		"prefix":"wp_new_comment_notify_moderator"
		"body":"wp_new_comment_notify_moderator( ${1:\\$comment_ID} )"
	"Send a notification of a new comment to the post author.":
		"prefix":"wp_new_comment_notify_postauthor"
		"body":"wp_new_comment_notify_postauthor( ${1:\\$comment_ID} )"
	"Email login credentials to a newly-registered user.":
		"prefix":"wp_new_user_notification"
		"body":"wp_new_user_notification( ${1:\\$user_id}${2:, \\$deprecated = null}${3:, \\$notify = ''} )"
	"Retrieve the next timestamp for an event.":
		"prefix":"wp_next_scheduled"
		"body":"wp_next_scheduled( ${1:\\$hook}${2:, \\$args = array()} )"
	"Display a noindex meta tag.":
		"prefix":"wp_no_robots"
		"body":"wp_no_robots()"
	"Display &quot;Are You Sure&quot; message to confirm the action being taken.":
		"prefix":"wp_nonce_ays"
		"body":"wp_nonce_ays( ${1:\\$action} )"
	"Retrieve or display nonce hidden field for forms.":
		"prefix":"wp_nonce_field"
		"body":"wp_nonce_field( ${1:\\$action = -1}${2:, \\$name = '_wpnonce'}${3:, \\$referer = true}${4:, \\$echo = true} )"
	"Get the time-dependent variable for nonce creation.":
		"prefix":"wp_nonce_tick"
		"body":"wp_nonce_tick()"
	"Retrieve URL with nonce added to URL query.":
		"prefix":"wp_nonce_url"
		"body":"wp_nonce_url( ${1:\\$actionurl}${2:, \\$action = -1}${3:, \\$name = '_wpnonce'} )"
	"Normalize a filesystem path.":
		"prefix":"wp_normalize_path"
		"body":"wp_normalize_path( ${1:\\$path} )"
	"Redirect to the installer if WordPress is not installed.":
		"prefix":"wp_not_installed"
		"body":"wp_not_installed()"
	"Notifies the moderator of the site about a new comment that is awaiting approval.":
		"prefix":"wp_notify_moderator"
		"body":"wp_notify_moderator( ${1:\\$comment_id} )"
	"Notify an author (and/or others) of a comment/trackback/pingback on a post.":
		"prefix":"wp_notify_postauthor"
		"body":"wp_notify_postauthor( ${1:\\$comment_id}${2:, \\$deprecated = null} )"
	"Flush all output buffers for PHP 5.2.":
		"prefix":"wp_ob_end_flush_all"
		"body":"wp_ob_end_flush_all()"
	"Adds oEmbed discovery links in the website &lt;head&gt;.":
		"prefix":"wp_oembed_add_discovery_links"
		"body":"wp_oembed_add_discovery_links()"
	"Adds the necessary JavaScript to communicate with the embedded iframes.":
		"prefix":"wp_oembed_add_host_js"
		"body":"wp_oembed_add_host_js()"
	"Adds a URL format and oEmbed provider URL pair.":
		"prefix":"wp_oembed_add_provider"
		"body":"wp_oembed_add_provider( ${1:\\$format}${2:, \\$provider}${3:, \\$regex = false} )"
	"Ensures that the specified format is either 'json' or 'xml'.":
		"prefix":"wp_oembed_ensure_format"
		"body":"wp_oembed_ensure_format( ${1:\\$format} )"
	"Attempts to fetch the embed HTML for a provided URL using oEmbed.":
		"prefix":"wp_oembed_get"
		"body":"wp_oembed_get( ${1:\\$url}${2:, \\$args = ''} )"
	"Registers the oEmbed REST API route.":
		"prefix":"wp_oembed_register_route"
		"body":"wp_oembed_register_route()"
	"Removes an oEmbed provider.":
		"prefix":"wp_oembed_remove_provider"
		"body":"wp_oembed_remove_provider( ${1:\\$format} )"
	"Redirect old slugs to the correct permalink.":
		"prefix":"wp_old_slug_redirect"
		"body":"wp_old_slug_redirect()"
	"Retrieve or display original referer hidden field for forms.":
		"prefix":"wp_original_referer_field"
		"body":"wp_original_referer_field( ${1:\\$echo = true}${2:, \\$jump_back_to = 'current'} )"
	"Displays or retrieves a list of pages with an optional home link.":
		"prefix":"wp_page_menu"
		"body":"wp_page_menu( ${1:\\$args = array()} )"
	"Outputs JS that reloads the page if the user navigated to it with the Back or Forward button.":
		"prefix":"wp_page_reload_on_back_button_js"
		"body":"wp_page_reload_on_back_button_js()"
	"Merge user defined arguments into defaults array.":
		"prefix":"wp_parse_args"
		"body":"wp_parse_args( ${1:\\$args}${2:, \\$defaults = ''} )"
	"Parse a cookie into its components":
		"prefix":"wp_parse_auth_cookie"
		"body":"wp_parse_auth_cookie( ${1:\\$cookie = ''}${2:, \\$scheme = ''} )"
	"Clean up an array, comma- or space-separated list of IDs.":
		"prefix":"wp_parse_id_list"
		"body":"wp_parse_id_list( ${1:\\$list} )"
	"Clean up an array, comma- or space-separated list of slugs.":
		"prefix":"wp_parse_slug_list"
		"body":"wp_parse_slug_list( ${1:\\$list} )"
	"Parses a string into variables to be stored in an array.":
		"prefix":"wp_parse_str"
		"body":"wp_parse_str( ${1:\\$string}${2:, \\$array} )"
	"A wrapper for PHP's parse_url() function that handles consistency in the return
values across PHP versions.":
		"prefix":"wp_parse_url"
		"body":"wp_parse_url( ${1:\\$url}${2:, \\$component = -1} )"
	"Notify the blog admin of a user changing password, normally via email.":
		"prefix":"wp_password_change_notification"
		"body":"wp_password_change_notification( ${1:\\$user} )"
	"Outputs and enqueue default scripts and styles for playlists.":
		"prefix":"wp_playlist_scripts"
		"body":"wp_playlist_scripts( ${1:\\$type} )"
	"Builds the Playlist shortcode output.":
		"prefix":"wp_playlist_shortcode"
		"body":"wp_playlist_shortcode( ${1:\\$attr} )"
	"Defines plugin directory WordPress constants":
		"prefix":"wp_plugin_directory_constants"
		"body":"wp_plugin_directory_constants()"
	"Displays update information for a plugin.":
		"prefix":"wp_plugin_update_row"
		"body":"wp_plugin_update_row( ${1:\\$file}${2:, \\$plugin_data} )"
	"wp_plugin_update_rows":
		"prefix":"wp_plugin_update_rows"
		"body":"wp_plugin_update_rows()"
	"Prints default Plupload arguments.":
		"prefix":"wp_plupload_default_settings"
		"body":"wp_plupload_default_settings()"
	"Retrieve a list of the most popular terms from the specified taxonomy.":
		"prefix":"wp_popular_terms_checklist"
		"body":"wp_popular_terms_checklist( ${1:\\$taxonomy}${2:, \\$default}${3:, \\$number = 10}${4:, \\$echo = true} )"
	"Convert MIME types into SQL.":
		"prefix":"wp_post_mime_type_where"
		"body":"wp_post_mime_type_where( ${1:\\$post_mime_types}${2:, \\$table_alias = ''} )"
	"Outputs a small JS snippet on preview tabs/windows to remove `window.name` on unload.":
		"prefix":"wp_post_preview_js"
		"body":"wp_post_preview_js()"
	"Retrieve formatted date timestamp of a revision (linked to that revisions's page). wp_post_revision_title":
		"prefix":"wp_post_revision_title"
		"body":"wp_post_revision_title( ${1:\\$revision}${2:, \\$link = true} )"
	"Retrieve formatted date timestamp of a revision (linked to that revisions's page). wp_post_revision_title_expanded":
		"prefix":"wp_post_revision_title_expanded"
		"body":"wp_post_revision_title_expanded( ${1:\\$revision}${2:, \\$link = true} )"
	"Convert lone less than signs.":
		"prefix":"wp_pre_kses_less_than"
		"body":"wp_pre_kses_less_than( ${1:\\$text} )"
	"Callback function used by preg_replace.":
		"prefix":"wp_pre_kses_less_than_callback"
		"body":"wp_pre_kses_less_than_callback( ${1:\\$matches} )"
	"Preloads TinyMCE dialogs.":
		"prefix":"wp_preload_dialogs"
		"body":"wp_preload_dialogs()"
	"Prepares an attachment post object for JS, where it is expected
to be JSON-encoded and fit into an Attachment model.":
		"prefix":"wp_prepare_attachment_for_js"
		"body":"wp_prepare_attachment_for_js( ${1:\\$attachment} )"
	"Prepare revisions for JavaScript.":
		"prefix":"wp_prepare_revisions_for_js"
		"body":"wp_prepare_revisions_for_js( ${1:\\$post}${2:, \\$selected_revision_id}${3:, \\$from = null} )"
	"Prepare themes for JavaScript.":
		"prefix":"wp_prepare_themes_for_js"
		"body":"wp_prepare_themes_for_js( ${1:\\$themes = null} )"
	"Prints the JavaScript templates for update admin notices.":
		"prefix":"wp_print_admin_notice_templates"
		"body":"wp_print_admin_notice_templates()"
	"Prints the markup for the Community Events section of the Events and News Dashboard widget.":
		"prefix":"wp_print_community_events_markup"
		"body":"wp_print_community_events_markup()"
	"Renders the events templates for the Event and News widget.":
		"prefix":"wp_print_community_events_templates"
		"body":"wp_print_community_events_templates()"
	"Prints TinyMCE editor JS.":
		"prefix":"wp_print_editor_js"
		"body":"wp_print_editor_js()"
	"Hooks to print the scripts and styles in the footer.":
		"prefix":"wp_print_footer_scripts"
		"body":"wp_print_footer_scripts()"
	"Prints the script queue in the HTML head on the front end.":
		"prefix":"wp_print_head_scripts"
		"body":"wp_print_head_scripts()"
	"Prints the templates used in the media manager.":
		"prefix":"wp_print_media_templates"
		"body":"wp_print_media_templates()"
	"Print the filesystem credentials modal when needed.":
		"prefix":"wp_print_request_filesystem_credentials_modal"
		"body":"wp_print_request_filesystem_credentials_modal()"
	"Print JavaScript templates required for the revisions experience.":
		"prefix":"wp_print_revision_templates"
		"body":"wp_print_revision_templates()"
	"Prints scripts in document head that are in the $handles queue.":
		"prefix":"wp_print_scripts"
		"body":"wp_print_scripts( ${1:\\$handles = false} )"
	"Display styles that are in the $handles queue.":
		"prefix":"wp_print_styles"
		"body":"wp_print_styles( ${1:\\$handles = false} )"
	"Prints the JavaScript templates for update and deletion rows in list tables.":
		"prefix":"wp_print_update_row_templates"
		"body":"wp_print_update_row_templates()"
	"Protect WordPress special option from being modified.":
		"prefix":"wp_protect_special_option"
		"body":"wp_protect_special_option( ${1:\\$option} )"
	"Reorder JavaScript scripts array to place prototype before jQuery.":
		"prefix":"wp_prototype_before_jquery"
		"body":"wp_prototype_before_jquery( ${1:\\$js_array} )"
	"Publish a post by transitioning the post status.":
		"prefix":"wp_publish_post"
		"body":"wp_publish_post( ${1:\\$post} )"
	"Queues comments for metadata lazy-loading.":
		"prefix":"wp_queue_comments_for_comment_meta_lazyload"
		"body":"wp_queue_comments_for_comment_meta_lazyload( ${1:\\$comments} )"
	"Queues posts for lazy-loading of term meta.":
		"prefix":"wp_queue_posts_for_term_meta_lazyload"
		"body":"wp_queue_posts_for_term_meta_lazyload( ${1:\\$posts} )"
	"Handles quicktags.":
		"prefix":"wp_quicktags"
		"body":"wp_quicktags()"
	"Attempts to raise the PHP memory limit for memory intensive processes.":
		"prefix":"wp_raise_memory_limit"
		"body":"wp_raise_memory_limit( ${1:\\$context = 'admin'} )"
	"Generates a random number":
		"prefix":"wp_rand"
		"body":"wp_rand( ${1:\\$min}${2:, \\$max} )"
	"Retrieve metadata from a audio file's ID3 tags":
		"prefix":"wp_read_audio_metadata"
		"body":"wp_read_audio_metadata( ${1:\\$file} )"
	"Get extended image metadata, exif or iptc as available.":
		"prefix":"wp_read_image_metadata"
		"body":"wp_read_image_metadata( ${1:\\$file} )"
	"Retrieve metadata from a video file's ID3 tags":
		"prefix":"wp_read_video_metadata"
		"body":"wp_read_video_metadata( ${1:\\$file} )"
	"Redirects to another page.":
		"prefix":"wp_redirect"
		"body":"wp_redirect( ${1:\\$location}${2:, \\$status = 302} )"
	"Redirects a variety of shorthand URLs to the admin.":
		"prefix":"wp_redirect_admin_locations"
		"body":"wp_redirect_admin_locations()"
	"Retrieve or display referer hidden field for forms.":
		"prefix":"wp_referer_field"
		"body":"wp_referer_field( ${1:\\$echo = true} )"
	"Check lock status on the New/Edit Post screen and refresh the lock":
		"prefix":"wp_refresh_post_lock"
		"body":"wp_refresh_post_lock( ${1:\\$response}${2:, \\$data}${3:, \\$screen_id} )"
	"Check nonce expiration on the New/Edit Post screen and refresh if needed":
		"prefix":"wp_refresh_post_nonces"
		"body":"wp_refresh_post_nonces( ${1:\\$response}${2:, \\$data}${3:, \\$screen_id} )"
	"Display the Registration or Admin link.":
		"prefix":"wp_register"
		"body":"wp_register( ${1:\\$before = '&lt;li&gt;'}${2:, \\$after = '&lt;/li&gt;'}${3:, \\$echo = true} )"
	"Register a plugin's real path.":
		"prefix":"wp_register_plugin_realpath"
		"body":"wp_register_plugin_realpath( ${1:\\$file} )"
	"Register a new script.":
		"prefix":"wp_register_script"
		"body":"wp_register_script( ${1:\\$handle}${2:, \\$src}${3:, \\$deps = array()}${4:, \\$ver = false}${5:, \\$in_footer = false} )"
	"Register an instance of a widget.":
		"prefix":"wp_register_sidebar_widget"
		"body":"wp_register_sidebar_widget( ${1:\\$id}${2:, \\$name}${3:, \\$output_callback}${4:, \\$options = array()} )"
	"Register a CSS stylesheet.":
		"prefix":"wp_register_style"
		"body":"wp_register_style( ${1:\\$handle}${2:, \\$src}${3:, \\$deps = array()}${4:, \\$ver = false}${5:, \\$media = 'all'} )"
	"Registers widget control callback for customizing options. wp_register_widget_control":
		"prefix":"wp_register_widget_control"
		"body":"wp_register_widget_control( ${1:\\$id}${2:, \\$name}${3:, \\$control_callback}${4:, \\$options = array()} )"
	"Returns the URL that allows the user to register on the site.":
		"prefix":"wp_registration_url"
		"body":"wp_registration_url()"
	"Adds rel nofollow string to all HTML A elements in content.":
		"prefix":"wp_rel_nofollow"
		"body":"wp_rel_nofollow( ${1:\\$text} )"
	"Callback to add rel=nofollow string to HTML A element.":
		"prefix":"wp_rel_nofollow_callback"
		"body":"wp_rel_nofollow_callback( ${1:\\$matches} )"
	"HTTP request for URI to retrieve content.":
		"prefix":"wp_remote_fopen"
		"body":"wp_remote_fopen( ${1:\\$uri} )"
	"Retrieve the raw response from the HTTP request using the GET method.":
		"prefix":"wp_remote_get"
		"body":"wp_remote_get( ${1:\\$url}${2:, \\$args = array()} )"
	"Retrieve the raw response from the HTTP request using the HEAD method.":
		"prefix":"wp_remote_head"
		"body":"wp_remote_head( ${1:\\$url}${2:, \\$args = array()} )"
	"Retrieve the raw response from the HTTP request using the POST method.":
		"prefix":"wp_remote_post"
		"body":"wp_remote_post( ${1:\\$url}${2:, \\$args = array()} )"
	"Retrieve the raw response from the HTTP request.":
		"prefix":"wp_remote_request"
		"body":"wp_remote_request( ${1:\\$url}${2:, \\$args = array()} )"
	"Retrieve only the body from the raw response.":
		"prefix":"wp_remote_retrieve_body"
		"body":"wp_remote_retrieve_body( ${1:\\$response} )"
	"Retrieve a single cookie by name from the raw response.":
		"prefix":"wp_remote_retrieve_cookie"
		"body":"wp_remote_retrieve_cookie( ${1:\\$response}${2:, \\$name} )"
	"Retrieve a single cookie's value by name from the raw response.":
		"prefix":"wp_remote_retrieve_cookie_value"
		"body":"wp_remote_retrieve_cookie_value( ${1:\\$response}${2:, \\$name} )"
	"Retrieve only the cookies from the raw response.":
		"prefix":"wp_remote_retrieve_cookies"
		"body":"wp_remote_retrieve_cookies( ${1:\\$response} )"
	"Retrieve a single header by name from the raw response.":
		"prefix":"wp_remote_retrieve_header"
		"body":"wp_remote_retrieve_header( ${1:\\$response}${2:, \\$header} )"
	"Retrieve only the headers from the raw response.":
		"prefix":"wp_remote_retrieve_headers"
		"body":"wp_remote_retrieve_headers( ${1:\\$response} )"
	"Retrieve only the response code from the raw response.":
		"prefix":"wp_remote_retrieve_response_code"
		"body":"wp_remote_retrieve_response_code( ${1:\\$response} )"
	"Retrieve only the response message from the raw response.":
		"prefix":"wp_remote_retrieve_response_message"
		"body":"wp_remote_retrieve_response_message( ${1:\\$response} )"
	"Returns an array of single-use query variable names that can be removed from a URL.":
		"prefix":"wp_removable_query_args"
		"body":"wp_removable_query_args()"
	"Remove term(s) associated with a given object.":
		"prefix":"wp_remove_object_terms"
		"body":"wp_remove_object_terms( ${1:\\$object_id}${2:, \\$terms}${3:, \\$taxonomy} )"
	"Replace characters or phrases within HTML elements only.":
		"prefix":"wp_replace_in_html_tags"
		"body":"wp_replace_in_html_tags( ${1:\\$haystack}${2:, \\$replace_pairs} )"
	"Reschedule a recurring event.":
		"prefix":"wp_reschedule_event"
		"body":"wp_reschedule_event( ${1:\\$timestamp}${2:, \\$recurrence}${3:, \\$hook}${4:, \\$args = array()} )"
	"After looping through a separate query, this function restores
the $post global to the current post in the main query.":
		"prefix":"wp_reset_postdata"
		"body":"wp_reset_postdata()"
	"Destroys the previous query and sets up a new query.":
		"prefix":"wp_reset_query"
		"body":"wp_reset_query()"
	"Resets global variables based on $_GET and $_POST":
		"prefix":"wp_reset_vars"
		"body":"wp_reset_vars( ${1:\\$vars} )"
	"Resolve numeric slugs that collide with date permalinks.":
		"prefix":"wp_resolve_numeric_slug_conflicts"
		"body":"wp_resolve_numeric_slug_conflicts( ${1:\\$query_vars = array()} )"
	"Prints resource hints to browsers for pre-fetching, pre-rendering
and pre-connecting to web sites.":
		"prefix":"wp_resource_hints"
		"body":"wp_resource_hints()"
	"Restores the metadata for a given attachment.":
		"prefix":"wp_restore_image"
		"body":"wp_restore_image( ${1:\\$post_id} )"
	"Restores a post to the specified revision.":
		"prefix":"wp_restore_post_revision"
		"body":"wp_restore_post_revision( ${1:\\$revision_id}${2:, \\$fields = null} )"
	"Determine if revisions are enabled for a given post.":
		"prefix":"wp_revisions_enabled"
		"body":"wp_revisions_enabled( ${1:\\$post} )"
	"Determine how many revisions to retain for a given post.":
		"prefix":"wp_revisions_to_keep"
		"body":"wp_revisions_to_keep( ${1:\\$post} )"
	"Remove all capabilities from user.":
		"prefix":"wp_revoke_user"
		"body":"wp_revoke_user( ${1:\\$id} )"
	"Formats text for the rich text editor.":
		"prefix":"wp_richedit_pre"
		"body":"wp_richedit_pre( ${1:\\$text} )"
	"Retrieves the global WP_Roles instance and instantiates it if necessary.":
		"prefix":"wp_roles"
		"body":"wp_roles()"
	"Display all RSS items in a HTML ordered list.":
		"prefix":"wp_rss"
		"body":"wp_rss( ${1:\\$url}${2:, \\$num_items = -1} )"
	"Performs a safe (local) redirect, using wp_redirect().":
		"prefix":"wp_safe_redirect"
		"body":"wp_safe_redirect( ${1:\\$location}${2:, \\$status = 302} )"
	"Retrieve the raw response from a safe HTTP request using the GET method.":
		"prefix":"wp_safe_remote_get"
		"body":"wp_safe_remote_get( ${1:\\$url}${2:, \\$args = array()} )"
	"Retrieve the raw response from a safe HTTP request using the HEAD method.":
		"prefix":"wp_safe_remote_head"
		"body":"wp_safe_remote_head( ${1:\\$url}${2:, \\$args = array()} )"
	"Retrieve the raw response from a safe HTTP request using the POST method.":
		"prefix":"wp_safe_remote_post"
		"body":"wp_safe_remote_post( ${1:\\$url}${2:, \\$args = array()} )"
	"Retrieve the raw response from a safe HTTP request.":
		"prefix":"wp_safe_remote_request"
		"body":"wp_safe_remote_request( ${1:\\$url}${2:, \\$args = array()} )"
	"Get salt to add to hashes.":
		"prefix":"wp_salt"
		"body":"wp_salt( ${1:\\$scheme = 'auth'} )"
	"Sanitizes a URL for use in a redirect.":
		"prefix":"wp_sanitize_redirect"
		"body":"wp_sanitize_redirect( ${1:\\$location} )"
	"Saves image to post along with enqueued changes
in $_REQUEST['history']":
		"prefix":"wp_save_image"
		"body":"wp_save_image( ${1:\\$post_id} )"
	"Saves Image to File":
		"prefix":"wp_save_image_file"
		"body":"wp_save_image_file( ${1:\\$filename}${2:, \\$image}${3:, \\$mime_type}${4:, \\$post_id} )"
	"Save posted nav menu item data.":
		"prefix":"wp_save_nav_menu_items"
		"body":"wp_save_nav_menu_items( ${1:\\$menu_id}${2:, \\$menu_data = array()} )"
	"Creates a revision for the current version of a post.":
		"prefix":"wp_save_post_revision"
		"body":"wp_save_post_revision( ${1:\\$post_id} )"
	"Schedule a recurring event.":
		"prefix":"wp_schedule_event"
		"body":"wp_schedule_event( ${1:\\$timestamp}${2:, \\$recurrence}${3:, \\$hook}${4:, \\$args = array()} )"
	"Schedules an event to run only once.":
		"prefix":"wp_schedule_single_event"
		"body":"wp_schedule_single_event( ${1:\\$timestamp}${2:, \\$hook}${3:, \\$args = array()} )"
	"Schedule core, theme, and plugin update checks.":
		"prefix":"wp_schedule_update_checks"
		"body":"wp_schedule_update_checks()"
	"Schedule update of the network-wide counts for the current network.":
		"prefix":"wp_schedule_update_network_counts"
		"body":"wp_schedule_update_network_counts()"
	"Permanently delete comments or posts of any type that have held a status
of 'trash' for the number of days defined in EMPTY_TRASH_DAYS.":
		"prefix":"wp_scheduled_delete"
		"body":"wp_scheduled_delete()"
	"Add metadata to a script.":
		"prefix":"wp_script_add_data"
		"body":"wp_script_add_data( ${1:\\$handle}${2:, \\$key}${3:, \\$value} )"
	"Check whether a script has been added to the queue.":
		"prefix":"wp_script_is"
		"body":"wp_script_is( ${1:\\$handle}${2:, \\$list = 'enqueued'} )"
	"Initialize $wp_scripts if it has not been set.":
		"prefix":"wp_scripts"
		"body":"wp_scripts()"
	"Send a JSON response back to an Ajax request.":
		"prefix":"wp_send_json"
		"body":"wp_send_json( ${1:\\$response}${2:, \\$status_code = null} )"
	"Send a JSON response back to an Ajax request, indicating failure.":
		"prefix":"wp_send_json_error"
		"body":"wp_send_json_error( ${1:\\$data = null}${2:, \\$status_code = null} )"
	"Send a JSON response back to an Ajax request, indicating success.":
		"prefix":"wp_send_json_success"
		"body":"wp_send_json_success( ${1:\\$data = null}${2:, \\$status_code = null} )"
	"Initiates email notifications related to the creation of new users.":
		"prefix":"wp_send_new_user_notifications"
		"body":"wp_send_new_user_notifications( ${1:\\$user_id}${2:, \\$notify = 'both'} )"
	"Private. Set all user interface settings.":
		"prefix":"wp_set_all_user_settings"
		"body":"wp_set_all_user_settings( ${1:\\$user_settings} )"
	"Log in a user by setting authentication cookies.":
		"prefix":"wp_set_auth_cookie"
		"body":"wp_set_auth_cookie( ${1:\\$user_id}${2:, \\$remember = false}${3:, \\$secure = ''}${4:, \\$token = ''} )"
	"Sets the cookies used to store an unauthenticated commentator's identity. Typically used
to recall previous comments by this commentator that are still held in moderation.":
		"prefix":"wp_set_comment_cookies"
		"body":"wp_set_comment_cookies( ${1:\\$comment}${2:, \\$user} )"
	"Sets the status of a comment.":
		"prefix":"wp_set_comment_status"
		"body":"wp_set_comment_status( ${1:\\$comment_id}${2:, \\$comment_status}${3:, \\$wp_error = false} )"
	"Changes the current user by ID or name. wp_set_current_user":
		"prefix":"wp_set_current_user"
		"body":"wp_set_current_user( ${1:\\$id}${2:, \\$name = ''} )"
	"Set internal encoding.":
		"prefix":"wp_set_internal_encoding"
		"body":"wp_set_internal_encoding()"
	"Set the location of the language directory.":
		"prefix":"wp_set_lang_dir"
		"body":"wp_set_lang_dir()"
	"Update link with the specified link categories.":
		"prefix":"wp_set_link_cats"
		"body":"wp_set_link_cats( ${1:\\$link_id}${2:, \\$link_categories = array()} )"
	"Create Term and Taxonomy Relationships.":
		"prefix":"wp_set_object_terms"
		"body":"wp_set_object_terms( ${1:\\$object_id}${2:, \\$terms}${3:, \\$taxonomy}${4:, \\$append = false} )"
	"Updates the user's password with a new encrypted one.":
		"prefix":"wp_set_password"
		"body":"wp_set_password( ${1:\\$password}${2:, \\$user_id} )"
	"Set categories for a post.":
		"prefix":"wp_set_post_categories"
		"body":"wp_set_post_categories( ${1:\\$post_ID}${2:, \\$post_categories = array()}${3:, \\$append = false} )"
	"Sets the categories that the post id belongs to.":
		"prefix":"wp_set_post_cats"
		"body":"wp_set_post_cats( ${1:\\$blogid = '1'}${2:, \\$post_ID}${3:, \\$post_categories = array()} )"
	"Mark the post as currently being edited by the current user":
		"prefix":"wp_set_post_lock"
		"body":"wp_set_post_lock( ${1:\\$post_id} )"
	"Set the tags for a post.":
		"prefix":"wp_set_post_tags"
		"body":"wp_set_post_tags( ${1:\\$post_id}${2:, \\$tags = ''}${3:, \\$append = false} )"
	"Set the terms for a post.":
		"prefix":"wp_set_post_terms"
		"body":"wp_set_post_terms( ${1:\\$post_id}${2:, \\$tags = ''}${3:, \\$taxonomy = 'post_tag'}${4:, \\$append = false} )"
	"Set the sidebar widget option to update sidebars.":
		"prefix":"wp_set_sidebars_widgets"
		"body":"wp_set_sidebars_widgets( ${1:\\$sidebars_widgets} )"
	"Set the database table prefix and the format specifiers for database
table columns.":
		"prefix":"wp_set_wpdb_vars"
		"body":"wp_set_wpdb_vars()"
	"Sets a cookie for a user who just logged in. This function is deprecated.":
		"prefix":"wp_setcookie"
		"body":"wp_setcookie( ${1:\\$username}${2:, \\$password = ''}${3:, \\$already_md5 = false}${4:, \\$home = ''}${5:, \\$siteurl = ''}${6:, \\$remember = false} )"
	"Decorates a menu item object with the shared navigation menu item properties.":
		"prefix":"wp_setup_nav_menu_item"
		"body":"wp_setup_nav_menu_item( ${1:\\$menu_item} )"
	"wp_shake_js":
		"prefix":"wp_shake_js"
		"body":"wp_shake_js()"
	"Sends a Link: rel=shortlink header if a shortlink is defined for the current page.":
		"prefix":"wp_shortlink_header"
		"body":"wp_shortlink_header()"
	"Injects rel=shortlink into the head if a shortlink is defined for the current page.":
		"prefix":"wp_shortlink_wp_head"
		"body":"wp_shortlink_wp_head()"
	"Determine if global tables should be upgraded.":
		"prefix":"wp_should_upgrade_global_tables"
		"body":"wp_should_upgrade_global_tables()"
	"Calculates the new dimensions for a downsampled image.":
		"prefix":"wp_shrink_dimensions"
		"body":"wp_shrink_dimensions( ${1:\\$width}${2:, \\$height}${3:, \\$wmax = 128}${4:, \\$hmax = 96} )"
	"Retrieve description for a sidebar.":
		"prefix":"wp_sidebar_description"
		"body":"wp_sidebar_description( ${1:\\$id} )"
	"Authenticates and logs a user in with 'remember' capability.":
		"prefix":"wp_signon"
		"body":"wp_signon( ${1:\\$credentials = array()}${2:, \\$secure_cookie = ''} )"
	"WordPress autoloader for SimplePie.":
		"prefix":"wp_simplepie_autoload"
		"body":"wp_simplepie_autoload()"
	"Display site icon meta tags.":
		"prefix":"wp_site_icon"
		"body":"wp_site_icon()"
	"Add slashes to a string or array of strings.":
		"prefix":"wp_slash"
		"body":"wp_slash( ${1:\\$value} )"
	"Returns the regexp for common whitespace characters.":
		"prefix":"wp_spaces_regexp"
		"body":"wp_spaces_regexp()"
	"Marks a comment as Spam":
		"prefix":"wp_spam_comment"
		"body":"wp_spam_comment( ${1:\\$comment_id} )"
	"Legacy escaping for HTML blocks.":
		"prefix":"wp_specialchars"
		"body":"wp_specialchars( ${1:\\$string}${2:, \\$quote_style = ENT_NOQUOTES}${3:, \\$charset = false}${4:, \\$double_encode = false} )"
	"Converts a number of HTML entities into their special characters.":
		"prefix":"wp_specialchars_decode"
		"body":"wp_specialchars_decode( ${1:\\$string}${2:, \\$quote_style = ENT_NOQUOTES} )"
	"WordPress implementation of PHP sprintf() with filters.":
		"prefix":"wp_sprintf"
		"body":"wp_sprintf( ${1:\\$pattern}${2:, \\$args} )"
	"Localize list items before the rest of the content.":
		"prefix":"wp_sprintf_l"
		"body":"wp_sprintf_l( ${1:\\$pattern}${2:, \\$args} )"
	"Defines cookie related WordPress constants wp_ssl_constants":
		"prefix":"wp_ssl_constants"
		"body":"wp_ssl_constants()"
	"Output a HTML element with a star rating for a given rating.":
		"prefix":"wp_star_rating"
		"body":"wp_star_rating( ${1:\\$args = array()} )"
	"Start the WordPress object cache.":
		"prefix":"wp_start_object_cache"
		"body":"wp_start_object_cache()"
	"Convert emoji to a static img element.":
		"prefix":"wp_staticize_emoji"
		"body":"wp_staticize_emoji( ${1:\\$text} )"
	"Convert emoji in emails into static images.":
		"prefix":"wp_staticize_emoji_for_email"
		"body":"wp_staticize_emoji_for_email( ${1:\\$mail} )"
	"Streams image in WP_Image_Editor to browser.":
		"prefix":"wp_stream_image"
		"body":"wp_stream_image( ${1:\\$image}${2:, \\$mime_type}${3:, \\$post_id} )"
	"Properly strip all HTML tags including script and style":
		"prefix":"wp_strip_all_tags"
		"body":"wp_strip_all_tags( ${1:\\$string}${2:, \\$remove_breaks = false} )"
	"Add metadata to a CSS stylesheet.":
		"prefix":"wp_style_add_data"
		"body":"wp_style_add_data( ${1:\\$handle}${2:, \\$key}${3:, \\$value} )"
	"Check whether a CSS stylesheet has been added to the queue.":
		"prefix":"wp_style_is"
		"body":"wp_style_is( ${1:\\$handle}${2:, \\$list = 'enqueued'} )"
	"Administration Screen CSS for changing the styles.":
		"prefix":"wp_style_loader_src"
		"body":"wp_style_loader_src( ${1:\\$src}${2:, \\$handle} )"
	"Initialize $wp_styles if it has not been set.":
		"prefix":"wp_styles"
		"body":"wp_styles()"
	"Temporarily suspend cache additions.":
		"prefix":"wp_suspend_cache_addition"
		"body":"wp_suspend_cache_addition( ${1:\\$suspend = null} )"
	"Suspend cache invalidation.":
		"prefix":"wp_suspend_cache_invalidation"
		"body":"wp_suspend_cache_invalidation( ${1:\\$suspend = true} )"
	"Display tag cloud.":
		"prefix":"wp_tag_cloud"
		"body":"wp_tag_cloud( ${1:\\$args = ''} )"
	"Defines templating related WordPress constants":
		"prefix":"wp_templating_constants"
		"body":"wp_templating_constants()"
	"Returns a filename of a Temporary unique file.":
		"prefix":"wp_tempnam"
		"body":"wp_tempnam( ${1:\\$filename = ''}${2:, \\$dir = ''} )"
	"Determine whether a term is shared between multiple taxonomies.":
		"prefix":"wp_term_is_shared"
		"body":"wp_term_is_shared( ${1:\\$term_id} )"
	"Output an unordered list of checkbox input elements labelled with term names.":
		"prefix":"wp_terms_checklist"
		"body":"wp_terms_checklist( ${1:\\$post_id}${2:, \\$args = array()} )"
	"Displays a human readable HTML representation of the difference between two strings.":
		"prefix":"wp_text_diff"
		"body":"wp_text_diff( ${1:\\$left_string}${2:, \\$right_string}${3:, \\$args = null} )"
	"Displays update information for a theme.":
		"prefix":"wp_theme_update_row"
		"body":"wp_theme_update_row( ${1:\\$theme_key}${2:, \\$theme} )"
	"wp_theme_update_rows":
		"prefix":"wp_theme_update_rows"
		"body":"wp_theme_update_rows()"
	"Whether a comment should be blocked because of comment flood.":
		"prefix":"wp_throttle_comment_flood"
		"body":"wp_throttle_comment_flood( ${1:\\$block}${2:, \\$time_lastcomment}${3:, \\$time_newcomment} )"
	"Gives a nicely-formatted list of timezone strings.":
		"prefix":"wp_timezone_choice"
		"body":"wp_timezone_choice( ${1:\\$selected_zone}${2:, \\$locale = null} )"
	"gmt_offset modification for smart timezone handling.":
		"prefix":"wp_timezone_override_offset"
		"body":"wp_timezone_override_offset()"
	"Check for PHP timezone support":
		"prefix":"wp_timezone_supported"
		"body":"wp_timezone_supported()"
	"Outputs the TinyMCE editor.":
		"prefix":"wp_tiny_mce"
		"body":"wp_tiny_mce()"
	"Display or retrieve page title for all areas of blog.":
		"prefix":"wp_title"
		"body":"wp_title( ${1:\\$sep = '&raquo;'}${2:, \\$display = true}${3:, \\$seplocation = ''} )"
	"Display the blog title for display of the feed title.":
		"prefix":"wp_title_rss"
		"body":"wp_title_rss( ${1:\\$deprecated = '&#8211;'} )"
	"Call hooks for when a comment status transition occurs.":
		"prefix":"wp_transition_comment_status"
		"body":"wp_transition_comment_status( ${1:\\$new_status}${2:, \\$old_status}${3:, \\$comment} )"
	"Fires actions related to the transitioning of a post's status.":
		"prefix":"wp_transition_post_status"
		"body":"wp_transition_post_status( ${1:\\$new_status}${2:, \\$old_status}${3:, \\$post} )"
	"Moves a comment to the Trash":
		"prefix":"wp_trash_comment"
		"body":"wp_trash_comment( ${1:\\$comment_id} )"
	"Move a post or page to the Trash":
		"prefix":"wp_trash_post"
		"body":"wp_trash_post( ${1:\\$post_id} )"
	"Moves comments for a post to the trash.":
		"prefix":"wp_trash_post_comments"
		"body":"wp_trash_post_comments( ${1:\\$post = null} )"
	"Generates an excerpt from the content, if needed.":
		"prefix":"wp_trim_excerpt"
		"body":"wp_trim_excerpt( ${1:\\$text = ''} )"
	"Trims text to a certain number of words.":
		"prefix":"wp_trim_words"
		"body":"wp_trim_words( ${1:\\$text}${2:, \\$num_words = 55}${3:, \\$more = null} )"
	"Output the markup for a audio tag to be used in an Underscore template
when data.model is passed.":
		"prefix":"wp_underscore_audio_template"
		"body":"wp_underscore_audio_template()"
	"Outputs the templates used by playlists.":
		"prefix":"wp_underscore_playlist_templates"
		"body":"wp_underscore_playlist_templates()"
	"Output the markup for a video tag to be used in an Underscore template
when data.model is passed.":
		"prefix":"wp_underscore_video_template"
		"body":"wp_underscore_video_template()"
	"Get a filename that is sanitized and unique for the given directory.":
		"prefix":"wp_unique_filename"
		"body":"wp_unique_filename( ${1:\\$dir}${2:, \\$filename}${3:, \\$unique_filename_callback = null} )"
	"Computes a unique slug for the post, when given the desired slug and some post details.":
		"prefix":"wp_unique_post_slug"
		"body":"wp_unique_post_slug( ${1:\\$slug}${2:, \\$post_ID}${3:, \\$post_status}${4:, \\$post_type}${5:, \\$post_parent} )"
	"Will make slug unique, if it isn't already.":
		"prefix":"wp_unique_term_slug"
		"body":"wp_unique_term_slug( ${1:\\$slug}${2:, \\$term} )"
	"Turn register globals off.":
		"prefix":"wp_unregister_globals"
		"body":"wp_unregister_globals()"
	"Remove widget from sidebar.":
		"prefix":"wp_unregister_sidebar_widget"
		"body":"wp_unregister_sidebar_widget( ${1:\\$id} )"
	"Remove control callback for widget.":
		"prefix":"wp_unregister_widget_control"
		"body":"wp_unregister_widget_control( ${1:\\$id} )"
	"Unschedule a previously scheduled event.":
		"prefix":"wp_unschedule_event"
		"body":"wp_unschedule_event( ${1:\\$timestamp}${2:, \\$hook}${3:, \\$args = array()} )"
	"Unschedules all events attached to the hook.":
		"prefix":"wp_unschedule_hook"
		"body":"wp_unschedule_hook( ${1:\\$hook} )"
	"Remove slashes from a string or array of strings.":
		"prefix":"wp_unslash"
		"body":"wp_unslash( ${1:\\$value} )"
	"Removes a comment from the Spam":
		"prefix":"wp_unspam_comment"
		"body":"wp_unspam_comment( ${1:\\$comment_id} )"
	"Removes a comment from the Trash":
		"prefix":"wp_untrash_comment"
		"body":"wp_untrash_comment( ${1:\\$comment_id} )"
	"Restore a post or page from the Trash.":
		"prefix":"wp_untrash_post"
		"body":"wp_untrash_post( ${1:\\$post_id} )"
	"Restore comments for a post from the trash.":
		"prefix":"wp_untrash_post_comments"
		"body":"wp_untrash_post_comments( ${1:\\$post = null} )"
	"Update metadata for an attachment.":
		"prefix":"wp_update_attachment_metadata"
		"body":"wp_update_attachment_metadata( ${1:\\$post_id}${2:, \\$data} )"
	"Aliases wp_insert_category() with minimal args.":
		"prefix":"wp_update_category"
		"body":"wp_update_category( ${1:\\$catarr} )"
	"Updates an existing comment in the database.":
		"prefix":"wp_update_comment"
		"body":"wp_update_comment( ${1:\\$commentarr} )"
	"Updates the comment count for post(s).":
		"prefix":"wp_update_comment_count"
		"body":"wp_update_comment_count( ${1:\\$post_id}${2:, \\$do_deferred = false} )"
	"Updates the comment count for the post.":
		"prefix":"wp_update_comment_count_now"
		"body":"wp_update_comment_count_now( ${1:\\$post_id} )"
	"This was once used to kick-off the Core Updater.":
		"prefix":"wp_update_core"
		"body":"wp_update_core()"
	"Update the `custom_css` post for a given theme.":
		"prefix":"wp_update_custom_css_post"
		"body":"wp_update_custom_css_post( ${1:\\$css}${2:, \\$args = array()} )"
	"Updates a link in the database.":
		"prefix":"wp_update_link"
		"body":"wp_update_link( ${1:\\$linkdata} )"
	"Save the properties of a menu item or create a new one.":
		"prefix":"wp_update_nav_menu_item"
		"body":"wp_update_nav_menu_item( ${1:\\$menu_id}${2:, \\$menu_item_db_id}${3:, \\$menu_item_data = array()} )"
	"Save the properties of a menu or create a new menu with those properties.":
		"prefix":"wp_update_nav_menu_object"
		"body":"wp_update_nav_menu_object( ${1:\\$menu_id}${2:, \\$menu_data = array()} )"
	"Update the network-wide counts for the current network.":
		"prefix":"wp_update_network_counts"
		"body":"wp_update_network_counts( ${1:\\$network_id = null} )"
	"Update the network-wide site count.":
		"prefix":"wp_update_network_site_counts"
		"body":"wp_update_network_site_counts( ${1:\\$network_id = null} )"
	"Update the network-wide user count.":
		"prefix":"wp_update_network_user_counts"
		"body":"wp_update_network_user_counts( ${1:\\$network_id = null} )"
	"This was once used to kick-off the Plugin Updater.":
		"prefix":"wp_update_plugin"
		"body":"wp_update_plugin()"
	"Check plugin versions against the latest versions hosted on WordPress.org.":
		"prefix":"wp_update_plugins"
		"body":"wp_update_plugins( ${1:\\$extra_stats = array()} )"
	"Update a post with new post data.":
		"prefix":"wp_update_post"
		"body":"wp_update_post( ${1:\\$postarr = array()}${2:, \\$wp_error = false} )"
	"Update term based on arguments provided.":
		"prefix":"wp_update_term"
		"body":"wp_update_term( ${1:\\$term_id}${2:, \\$taxonomy}${3:, \\$args = array()} )"
	"Updates the amount of terms in taxonomy.":
		"prefix":"wp_update_term_count"
		"body":"wp_update_term_count( ${1:\\$terms}${2:, \\$taxonomy}${3:, \\$do_deferred = false} )"
	"Perform term count update immediately.":
		"prefix":"wp_update_term_count_now"
		"body":"wp_update_term_count_now( ${1:\\$terms}${2:, \\$taxonomy} )"
	"This was once used to kick-off the Theme Updater.":
		"prefix":"wp_update_theme"
		"body":"wp_update_theme()"
	"Check theme versions against the latest versions hosted on WordPress.org.":
		"prefix":"wp_update_themes"
		"body":"wp_update_themes( ${1:\\$extra_stats = array()} )"
	"Update a user in the database.":
		"prefix":"wp_update_user"
		"body":"wp_update_user( ${1:\\$userdata} )"
	"Runs WordPress Upgrade functions.":
		"prefix":"wp_upgrade"
		"body":"wp_upgrade()"
	"Create a file in the upload folder with given content.":
		"prefix":"wp_upload_bits"
		"body":"wp_upload_bits( ${1:\\$name}${2:, \\$deprecated}${3:, \\$bits}${4:, \\$time = null} )"
	"Get an array containing the current upload directory's path and url.":
		"prefix":"wp_upload_dir"
		"body":"wp_upload_dir( ${1:\\$time = null}${2:, \\$create_dir = true}${3:, \\$refresh_cache = false} )"
	"Saves and restores user interface settings stored in a cookie.":
		"prefix":"wp_user_settings"
		"body":"wp_user_settings()"
	"Toggle `$_wp_using_ext_object_cache` on and off without directly
touching global.":
		"prefix":"wp_using_ext_object_cache"
		"body":"wp_using_ext_object_cache( ${1:\\$using = null} )"
	"Validates authentication cookie.":
		"prefix":"wp_validate_auth_cookie"
		"body":"wp_validate_auth_cookie( ${1:\\$cookie = ''}${2:, \\$scheme = ''} )"
	"Filter/validate a variable as a boolean.":
		"prefix":"wp_validate_boolean"
		"body":"wp_validate_boolean( ${1:\\$var} )"
	"Validates the logged-in cookie.":
		"prefix":"wp_validate_logged_in_cookie"
		"body":"wp_validate_logged_in_cookie( ${1:\\$user_id} )"
	"Validates a URL for use in a redirect.":
		"prefix":"wp_validate_redirect"
		"body":"wp_validate_redirect( ${1:\\$location}${2:, \\$default = ''} )"
	"Verify that correct nonce was used with time limit.":
		"prefix":"wp_verify_nonce"
		"body":"wp_verify_nonce( ${1:\\$nonce}${2:, \\$action = -1} )"
	"Check WordPress version against the newest version.":
		"prefix":"wp_version_check"
		"body":"wp_version_check( ${1:\\$extra_stats = array()}${2:, \\$force_check = false} )"
	"Builds the Video shortcode output.":
		"prefix":"wp_video_shortcode"
		"body":"wp_video_shortcode( ${1:\\$attr}${2:, \\$content = ''} )"
	"Displays a welcome panel to introduce users to WordPress.":
		"prefix":"wp_welcome_panel"
		"body":"wp_welcome_panel()"
	"Meta widget used to display the control form for a widget.":
		"prefix":"wp_widget_control"
		"body":"wp_widget_control( ${1:\\$sidebar_args} )"
	"Retrieve description for widget.":
		"prefix":"wp_widget_description"
		"body":"wp_widget_description( ${1:\\$id} )"
	"Display RSS widget options form.":
		"prefix":"wp_widget_rss_form"
		"body":"wp_widget_rss_form( ${1:\\$args}${2:, \\$inputs = null} )"
	"Display the RSS entries in a list.":
		"prefix":"wp_widget_rss_output"
		"body":"wp_widget_rss_output( ${1:\\$rss}${2:, \\$args = array()} )"
	"Process RSS feed widget data and optionally retrieve feed items.":
		"prefix":"wp_widget_rss_process"
		"body":"wp_widget_rss_process( ${1:\\$widget_rss}${2:, \\$check_feed = true} )"
	"wp_widgets_access_body_class":
		"prefix":"wp_widgets_access_body_class"
		"body":"wp_widgets_access_body_class( ${1:\\$classes} )"
	"Append the Widgets menu to the themes main menu.":
		"prefix":"wp_widgets_add_menu"
		"body":"wp_widgets_add_menu()"
	"Registers all of the default WordPress widgets on startup.":
		"prefix":"wp_widgets_init"
		"body":"wp_widgets_init()"
	"Creates a new post from the &quot;Write Post&quot; form using $_POST information.":
		"prefix":"wp_write_post"
		"body":"wp_write_post()"
	"Replaces double line-breaks with paragraph elements.":
		"prefix":"wpautop"
		"body":"wpautop( ${1:\\$pee}${2:, \\$br = true} )"
	"Activate a signup.":
		"prefix":"wpmu_activate_signup"
		"body":"wpmu_activate_signup( ${1:\\$key} )"
	"Loads styles specific to this page.":
		"prefix":"wpmu_activate_stylesheet"
		"body":"wpmu_activate_stylesheet()"
	"Redirect a user based on $_GET or $_POST arguments.":
		"prefix":"wpmu_admin_do_redirect"
		"body":"wpmu_admin_do_redirect( ${1:\\$url = ''} )"
	"Adds an 'updated=true' argument to a URL.":
		"prefix":"wpmu_admin_redirect_add_updated_param"
		"body":"wpmu_admin_redirect_add_updated_param( ${1:\\$url = ''} )"
	"Determines if the available space defined by the admin has been exceeded by the user.":
		"prefix":"wpmu_checkavailablespace"
		"body":"wpmu_checkavailablespace()"
	"Create a site.":
		"prefix":"wpmu_create_blog"
		"body":"wpmu_create_blog( ${1:\\$domain}${2:, \\$path}${3:, \\$title}${4:, \\$user_id}${5:, \\$meta = array()}${6:, \\$site_id = 1} )"
	"Create a user.":
		"prefix":"wpmu_create_user"
		"body":"wpmu_create_user( ${1:\\$user_name}${2:, \\$password}${3:, \\$email} )"
	"This deprecated function managed much of the site and network loading in multisite.":
		"prefix":"wpmu_current_site"
		"body":"wpmu_current_site()"
	"Delete a site.":
		"prefix":"wpmu_delete_blog"
		"body":"wpmu_delete_blog( ${1:\\$blog_id}${2:, \\$drop = false} )"
	"Delete a user from the network and remove from all sites.":
		"prefix":"wpmu_delete_user"
		"body":"wpmu_delete_user( ${1:\\$id} )"
	"Deprecated functionality for getting themes allowed on a specific site.":
		"prefix":"wpmu_get_blog_allowedthemes"
		"body":"wpmu_get_blog_allowedthemes()"
	"Logs the user email, IP, and registration date of a new site.":
		"prefix":"wpmu_log_new_registrations"
		"body":"wpmu_log_new_registrations( ${1:\\$blog_id}${2:, \\$user_id} )"
	"Outputs the WPMU menu.":
		"prefix":"wpmu_menu"
		"body":"wpmu_menu()"
	"Record site signup information for future activation.":
		"prefix":"wpmu_signup_blog"
		"body":"wpmu_signup_blog( ${1:\\$domain}${2:, \\$path}${3:, \\$title}${4:, \\$user}${5:, \\$user_email}${6:, \\$meta = array()} )"
	"Notify user of signup success. wpmu_signup_blog_notification":
		"prefix":"wpmu_signup_blog_notification"
		"body":"wpmu_signup_blog_notification( ${1:\\$domain}${2:, \\$path}${3:, \\$title}${4:, \\$user_login}${5:, \\$user_email}${6:, \\$key}${7:, \\$meta = array()} )"
	"Prints styles for front-end Multisite signup pages":
		"prefix":"wpmu_signup_stylesheet"
		"body":"wpmu_signup_stylesheet()"
	"Record user signup information for future activation.":
		"prefix":"wpmu_signup_user"
		"body":"wpmu_signup_user( ${1:\\$user}${2:, \\$user_email}${3:, \\$meta = array()} )"
	"Notify user of signup success. wpmu_signup_user_notificationre":
		"prefix":"wpmu_signup_user_notification"
		"body":"wpmu_signup_user_notification( ${1:\\$user_login}${2:, \\$user_email}${3:, \\$key}${4:, \\$meta = array()} )"
	"Update the last_updated field for the current site.":
		"prefix":"wpmu_update_blogs_date"
		"body":"wpmu_update_blogs_date()"
	"Processes new site registrations.":
		"prefix":"wpmu_validate_blog_signup"
		"body":"wpmu_validate_blog_signup( ${1:\\$blogname}${2:, \\$blog_title}${3:, \\$user = ''} )"
	"Sanitize and validate data required for a user sign-up.":
		"prefix":"wpmu_validate_user_signup"
		"body":"wpmu_validate_user_signup( ${1:\\$user_name}${2:, \\$user_email} )"
	"Notify a user that their blog activation has been successful.":
		"prefix":"wpmu_welcome_notification"
		"body":"wpmu_welcome_notification( ${1:\\$blog_id}${2:, \\$user_id}${3:, \\$password}${4:, \\$title}${5:, \\$meta = array()} )"
	"Notify a user that their account activation has been successful.":
		"prefix":"wpmu_welcome_user_notification"
		"body":"wpmu_welcome_user_notification( ${1:\\$user_id}${2:, \\$password}${3:, \\$meta = array()} )"
	"Replaces common plain text characters into formatted entities":
		"prefix":"wptexturize"
		"body":"wptexturize( ${1:\\$text}${2:, \\$reset = false} )"
	"Implements a logic tree to determine whether or not &quot;7'.&quot; represents seven feet,
then converts the special char into either a prime char or a closing quote char.":
		"prefix":"wptexturize_primes"
		"body":"wptexturize_primes( ${1:\\$haystack}${2:, \\$needle}${3:, \\$prime}${4:, \\$open_quote}${5:, \\$close_quote} )"
	"Returns the URLs for CSS files used in an iframe-sandbox'd TinyMCE media view.":
		"prefix":"wpview_media_sandbox_styles"
		"body":"wpview_media_sandbox_styles()"
	"Calls wp_write_post() and handles the errors.":
		"prefix":"write_post"
		"body":"write_post()"
	"Display checked checkboxes attribute for xfn microformat options.":
		"prefix":"xfn_check"
		"body":"xfn_check( ${1:\\$class}${2:, \\$value = ''}${3:, \\$deprecated = ''} )"
	"Retrieve the post category or categories from XMLRPC XML.":
		"prefix":"xmlrpc_getpostcategory"
		"body":"xmlrpc_getpostcategory( ${1:\\$content} )"
	"Retrieve post title from XMLRPC XML.":
		"prefix":"xmlrpc_getposttitle"
		"body":"xmlrpc_getposttitle( ${1:\\$content} )"
	"Default filter attached to xmlrpc_pingback_error.":
		"prefix":"xmlrpc_pingback_error"
		"body":"xmlrpc_pingback_error( ${1:\\$ixr_error} )"
	"XMLRPC XML content without title and category elements.":
		"prefix":"xmlrpc_removepostdata"
		"body":"xmlrpc_removepostdata( ${1:\\$content} )"
	"Add leading zeros when necessary.":
		"prefix":"zeroise"
		"body":"zeroise( ${1:\\$number}${2:, \\$threshold} )"
