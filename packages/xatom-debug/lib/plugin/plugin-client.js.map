{"version":3,"file":"plugin-client.js","sourceRoot":"","sources":["../../src/plugin/plugin-client.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nimport {\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  createText,\n  createElement,\n  insertElement,\n  attachEventFromObject\n} from '../element/index'\nimport { ToolbarView, SchemeView } from '../scheme/index'\nimport { InspectorView } from '../inspector/index'\nimport { DebugAreaView, ConsoleView, CallStackFrames } from '../debug-area/index'\nimport { EditorManager, Breakpoints } from '../editor/index'\nimport { join } from 'path'\nimport { get } from 'lodash'\n\nexport class PluginClientConsole {\n  constructor (private consoleView: ConsoleView) {}\n  log (message: string): void {\n    this.consoleView.createConsoleLine(message)\n  }\n  info (message: string): void {\n    this.consoleView.createConsoleLine(message, {\n      className: 'line-info'\n    })\n  }\n  error (message: string): void {\n    this.consoleView.createConsoleLine(message, {\n      className: 'line-error'\n    })\n  }\n  output (type: string, items: Array<any>) {\n    let lineElement = this.consoleView.createEmptyLine({\n      className: `line-${type}`\n    })\n    items.forEach((result) => {\n      if (result.type === 'object') {\n        result = [{\n          value: result\n        }]\n      }\n      let inspector = new InspectorView({\n        result,\n        didRequestProperties: (props, inspectorView) => {\n          this.consoleView.requestProperties(props, inspectorView)\n        }\n      })\n      insertElement(lineElement, inspector.getElement())\n    })\n  }\n  clear (): void {\n    this.consoleView.clearConsole()\n  }\n}\n\nexport class PluginClientStatus {\n  constructor (private toolbarView: ToolbarView) {}\n  startLoading (): void {\n    this.toolbarView.setStatusLoading(true)\n  }\n  stopLoading (): void {\n    this.toolbarView.setStatusLoading(false)\n  }\n  update (message: string, icon?: string): void {\n    this.toolbarView.setStatus(message, icon)\n  }\n  reset (): void {\n    this.toolbarView.resetStatus()\n  }\n}\n\nexport interface ClientOptions {\n  debugView: DebugAreaView,\n  toolbarView: ToolbarView,\n  consoleView: ConsoleView,\n  schemeView: SchemeView,\n  editorManager: EditorManager\n}\n\nexport class PluginClient {\n  public console: PluginClientConsole\n  public status: PluginClientStatus\n  private debugView: DebugAreaView\n  private consoleView: ConsoleView\n  private schemeView: SchemeView\n  private toolbarView: ToolbarView\n  private editorManager: EditorManager\n  constructor (private options: ClientOptions) {\n    this.debugView = options.debugView\n    this.toolbarView = options.toolbarView\n    this.schemeView = options.schemeView\n    this.consoleView = options.consoleView\n    this.editorManager = options.editorManager\n    this.console = new PluginClientConsole(this.consoleView)\n    this.status = new PluginClientStatus(this.toolbarView)\n  }\n  stop (): void {\n    this.debugView.togglePause(false)\n    this.toolbarView.toggleRun(true)\n    this.editorManager.removeMarkers()\n    this.debugView.clearCallStack()\n    this.debugView.clearScope()\n  }\n  run (): void {\n    this.toolbarView.toggleRun(false)\n    this.consoleView.clearConsole()\n  }\n  pause (): void {\n    this.debugView.togglePause(true)\n    // this.debugView.setPausedScript(filePath, lineNumber)\n  }\n  resume (): void {\n    this.debugView.togglePause(false)\n    this.debugView.clearCallStack()\n    this.debugView.clearScope()\n  }\n  getPathFromFile (file: string) {\n    return join(this.toolbarView.getPathName(), file)\n  }\n  getPath (file: string) {\n    return this.toolbarView.getPathName()\n  }\n  getOptions () {\n    return this.schemeView.getActivePluginOptions()\n  }\n  getBreakpoints (): Breakpoints {\n    return this.editorManager.breakpointManager.getBreakpoints()\n  }\n  activateBreakpoint (filePath: string, lineNumber: number): void {\n    this.editorManager.breakOnFile(filePath, lineNumber)\n  }\n  setCallStack (items: CallStackFrames) {\n    this.debugView.insertCallStackFromFrames(items)\n  }\n  setScope (scope: any) {\n    this.debugView.insertScopeVariables(scope)\n  }\n}\n"]}