{"version":3,"file":"console-view.js","sourceRoot":"","sources":["../../src/debug-area/console-view.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AACX;;;;GAIG;AACH,OAAO,EAEL,YAAY,EAGZ,UAAU,EACV,aAAa,EACb,aAAa,EACb,qBAAqB,EACtB,MAAM,kBAAkB,CAAA;AAEzB,OAAO,EAAE,YAAY,EAAE,MAAO,QAAQ,CAAA;AAMtC,MAAM;IAMJ,YAAa,OAAwB;QACnC,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,EAAE,CAAA;QAChC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC,4BAA4B,CAAC,CAAA;QAChE,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,qBAAqB,EAAE;YAClD,QAAQ,EAAE;gBACR,aAAa,CAAC,sBAAsB,EAAE;oBACpC,QAAQ,EAAE;wBACR,YAAY,CAAC,EAAE,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;qBACxC;iBACF,CAAC;gBACF,IAAI,CAAC,aAAa;aACnB;SACF,CAAC,CAAA;QACF,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;QAC3C,qBAAqB,CAAC,IAAI,CAAC,MAAM,EAAE;YACjC,sBAAsB;SACvB,EAAE,OAAO,CAAC,CAAA;IACb,CAAC;IAED,YAAY;QACV,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,EAAE,CAAA;IACnC,CAAC;IAED,iBAAiB,CAAE,MAAW,EAAE,aAAkB;QAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,MAAM,EAAE,aAAa,CAAC,CAAA;IACjE,CAAC;IAED,eAAe,CAAE,OAAQ;QACvB,IAAI,IAAI,GAAG,aAAa,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAA;QAC7D,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAA;QACvC,MAAM,CAAC,IAAI,CAAA;IACb,CAAC;IAED,iBAAiB,CAAE,KAAa,EAAE,OAAQ;QACxC,IAAI,IAAI,GAAG,aAAa,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAA;QAC7D,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAA;QACxB,CAAC;QACD,UAAU,CAAE;YACV,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,CAAA;QAChE,CAAC,EAAE,GAAG,CAAC,CAAA;QACP,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAA;IAChD,CAAC;IAED,UAAU;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;IACvB,CAAC;CACF","sourcesContent":["'use babel'\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nimport {\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  createText,\n  createElement,\n  insertElement,\n  attachEventFromObject\n} from '../element/index'\n\nimport { EventEmitter }  from 'events'\nimport { parse } from 'path'\n\nexport interface ConsoleOptions {\n  didRequestProperties?: Function\n}\nexport class ConsoleView {\n\n  private element: HTMLElement\n  private outputElement: HTMLElement\n  private events: EventEmitter\n\n  constructor (options?: ConsoleOptions) {\n    this.events = new EventEmitter()\n    this.outputElement = createElement('xatom-debug-console-output')\n    this.element = createElement('xatom-debug-console', {\n      elements: [\n        createElement('xatom-debug-controls', {\n          elements: [\n            createButton({}, createText('Console'))\n          ]\n        }),\n        this.outputElement\n      ]\n    })\n    this.element.setAttribute('tabindex', '-1')\n    attachEventFromObject(this.events, [\n      'didRequestProperties'\n    ], options)\n  }\n\n  clearConsole () {\n    this.outputElement.innerHTML = ''\n  }\n\n  requestProperties (result: any, inspectorView: any) {\n    this.events.emit('didRequestProperties', result, inspectorView)\n  }\n\n  createEmptyLine (options?) {\n    let line = createElement('xatom-debug-console-line', options)\n    insertElement(this.outputElement, line)\n    return line\n  }\n\n  createConsoleLine (entry: string, options?) {\n    let line = createElement('xatom-debug-console-line', options)\n    if (entry && entry.length > 0) {\n      line.innerHTML = entry\n    }\n    setTimeout (() => {\n      this.outputElement.scrollTop = this.outputElement.scrollHeight\n    }, 250)\n    return insertElement(this.outputElement, line)\n  }\n\n  getElement () {\n    return this.element\n  }\n\n  destroy () {\n    this.element.remove()\n  }\n}\n"]}