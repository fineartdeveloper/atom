{"version":3,"file":"storage.js","sourceRoot":"","sources":["../src/storage.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;;;;;;;;;AACX;;;;GAIG;AAEH,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,IAAI,CAAC;AACtD,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAE5B,MAAM;IAKJ;QAHA,gBAAW,GAAW,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,SAAS,EAAE,aAAa,CAAC,CAAA;QAIzE,iCAAiC;QACjC,IAAI,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM;YAC/B,EAAE,CAAC,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,UAAU,EAAE,CAAC;YACpB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,OAAO,CAAE,UAAkB;QACzB,IAAI,KAAK,GAAI,IAAI,CAAC,UAAU,CAAC,CAAC;QAC9B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK,OAAO,CAAW,CAAC;IACpE,CAAC;IAED,aAAa;QACX,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,EAAE,KAAK;gBAChC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,OAAO,CAAC,KAAK,CAAC,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,KAAK,CAAC,CAAC;gBACjB,CAAC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,UAAU;QACR,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG;gBAC1B,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,IAAI,CAAE,OAAe;QACnB,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,CAAC,GAAG;gBACpC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,EAAE,CAAC;gBACZ,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,IAAI;QACF,MAAM,CAAC,IAAI,OAAO,CAAE,CAAC,OAAO,EAAE,MAAM;YAClC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,IAAI;gBAChC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACR,MAAM,CAAC,GAAG,CAAC,CAAC;gBACd,CAAC;gBACD,IAAI,CAAC;oBACH,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;gBACnC,CAAC;gBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC,CAAC,CAAC,CAAA;gBACX,CAAC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAEK,iBAAiB,CAAE,GAAG,EAAE,MAAM;;YAClC,IAAI,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;gBACpC,cAAc;YAChB,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACb,OAAO,GAAG,EAAE,CAAA;YACd,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;YACtB,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAClD,CAAC;KAAA;IAEK,cAAc,CAAE,OAAY;;YAChC,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;QAClD,CAAC;KAAA;CACF","sourcesContent":["'use babel'\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { mkdir, stat, writeFile, readFile } from 'fs';\nimport { join } from 'path';\n\nexport class Storage {\n\n  storagePath: string = join(atom['configDirPath'], 'storage', 'xatom-debug')\n  filePath: string;\n\n  constructor () {\n    // create path if does not exists\n    this.isPathPresent().then((exists) => {\n      if (exists === false) {\n        this.createPath();\n      }\n    });\n  }\n\n  setPath (configFile: string) {\n    let token =  btoa(configFile);\n    this.filePath = join(this.storagePath, `${token}.json`) as string;\n  }\n\n  isPathPresent () {\n    return new Promise((resolve, reject) => {\n      stat(this.storagePath, (err, stats) => {\n        if (err) {\n          resolve(false);\n        } else {\n          resolve(stats);\n        }\n      })\n    })\n  }\n\n  createPath () {\n    return new Promise((resolve, reject) => {\n      mkdir(this.storagePath, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      })\n    })\n  }\n\n  save (content: string) {\n    return new Promise((resolve, reject) => {\n      writeFile(this.filePath, content, (err) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    })\n  }\n\n  read () {\n    return new Promise ((resolve, reject) => {\n      readFile(this.filePath, (err, data) => {\n        if (err) {\n          reject(err);\n        }\n        try {\n          resolve(JSON.parse(String(data)))\n        } catch (e) {\n          reject(e)\n        }\n      })\n    })\n  }\n\n  async saveObjectFromKey (key, object) {\n    let content = await this.read().catch(() => {\n      // no contents\n    });\n    if (!content) {\n      content = {}\n    }\n    content[key] = object;\n    return await this.save(JSON.stringify(content));\n  }\n\n  async saveFromObject (content: any) {\n    return await this.save(JSON.stringify(content));\n  }\n}\n"]}