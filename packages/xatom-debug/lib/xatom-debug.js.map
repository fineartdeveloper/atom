{"version":3,"file":"xatom-debug.js","sourceRoot":"","sources":["../src/xatom-debug.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nimport { ToolbarView, SchemeView } from './scheme/index'\nimport { DebugAreaView, ConsoleView } from './debug-area/index'\nimport { PluginManager, PluginClient } from './plugin/index'\nimport { EditorManager } from './editor/index'\nimport { Storage }  from './storage'\n\nexport class XAtomDebug {\n  public storage: Storage = new Storage()\n  public pluginManager: PluginManager = new PluginManager()\n  public editorManager: EditorManager\n  public schemeView: SchemeView\n  public toolbarView: ToolbarView\n  public debugView: DebugAreaView\n  public consoleView: ConsoleView\n  constructor () {\n    // Create Editor Manager\n    this.editorManager = new EditorManager({\n      pluginManager: this.pluginManager,\n      didAddBreakpoint: (filePath, lineNumber) => {\n        this.debugView.createBreakpointLine(filePath, lineNumber)\n      },\n      didRemoveBreakpoint: (filePath, lineNumber) => {\n        this.debugView.removeBreakpointLine(filePath, lineNumber)\n      },\n      didBreak: async (filePath, lineNumber) => {\n        let textEditor = await atom.workspace.open(filePath, {\n          initialLine: lineNumber,\n          initialColumn: 0\n        })\n        this.editorManager.createBreakMarker(textEditor, lineNumber)\n      },\n      didChange: () => {\n        let breakpoints = this.editorManager.breakpointManager.getPlainBreakpoints()\n        this.storage.saveObjectFromKey('breakpoints', breakpoints)\n      }\n    })\n    // Scheme Editor\n    this.schemeView = new SchemeView({\n      didSelectPlugin: (plugin) => {\n        this.pluginManager.activatePlugin(plugin)\n        this.toolbarView.setScheme(plugin)\n        this.storage.saveObjectFromKey('currentPluginName', plugin.name)\n      },\n      didChange: () => {\n        this.storage.saveObjectFromKey('schemes', this.schemeView.getData())\n      }\n    })\n    // Create toolbar\n    this.toolbarView = new ToolbarView({\n      didRun: () => {\n        this.schemeView.activatePlugin(this.pluginManager.activePlugin)\n        this.pluginManager.run()\n      },\n      didStop: () => this.pluginManager.stop(),\n      didOpenScheme: () => this.schemeView.open(this.pluginManager.activePlugin),\n      didChangePath: async (pathName) => {\n        this.storage.setPath(pathName)\n        this.debugView.setWorkspace(pathName)\n        let data: any = await this.storage.read().catch(() => {\n          // no saved file found.\n        })\n        if (data) {\n          this.editorManager.restoreBreakpoints(data.breakpoints || [])\n          this.schemeView.restoreData(data.schemes)\n          let plugin = this.pluginManager.getPluginFromName(data.currentPluginName)\n          if (plugin) {\n            this.pluginManager.activatePlugin(plugin)\n            this.toolbarView.setScheme(plugin)\n          }\n        }\n        // Activate Selected Plugin\n        if (!this.pluginManager.activePlugin) {\n          let firstPlugin = this.pluginManager.plugins[0]\n          this.pluginManager.activatePlugin(firstPlugin)\n          this.toolbarView.setScheme(firstPlugin)\n        }\n      }\n    })\n    // Console View\n    this.consoleView = new ConsoleView({\n      didRequestProperties: (result, inspectView) => {\n        return this.pluginManager.requestProperties(result, inspectView)\n      }\n    })\n    // Create debug area\n    this.debugView = new DebugAreaView({\n      didPause: () => this.pluginManager.pause(),\n      didResume: () => this.pluginManager.resume(),\n      didStepOver: () => this.pluginManager.stepOver(),\n      didStepInto: () => this.pluginManager.stepInto(),\n      didStepOut: () => this.pluginManager.stepOut(),\n      didOpenFile: (filePath: string, lineNumber: number, columnNumber: number) => {\n        atom.workspace.open(filePath, {\n          initialLine: lineNumber,\n          initialColumn: columnNumber\n        })\n      },\n      didOpenFrame: (frame: any) => {\n        this.debugView.insertScopeVariables(frame.scope)\n      },\n      didRequestProperties: (result, inspectView) => {\n        return this.pluginManager.requestProperties(result, inspectView)\n      },\n      didEvaluateExpression: (expression, evaluationView) => {\n        return this.pluginManager.evaluateExpression(expression, evaluationView)\n      }\n    })\n    // Atom bugs plugin client\n    let client = new PluginClient({\n      debugView: this.debugView,\n      consoleView: this.consoleView,\n      schemeView: this.schemeView,\n      toolbarView: this.toolbarView,\n      editorManager: this.editorManager\n    })\n    // Add editor features\n    atom.workspace['observeActivePaneItem']((editor) => {\n      if (editor) {\n        this.editorManager.addFeatures(editor)\n      }\n    })\n    // Listen plugin addition\n    this.pluginManager.didAddPlugin((plugin) => {\n      this.schemeView.addPlugin(plugin)\n      // Register client\n      if (plugin.register) plugin.register(client)\n    })\n  }\n\n  getToolbarElement () {\n    return this.toolbarView.getElement()\n  }\n  getConsoleElement () {\n    return this.consoleView.getElement()\n  }\n  getDebugAreaElement () {\n    return this.debugView.getElement()\n  }\n\n  destroy () {\n    // destroy all\n    this.toolbarView.destroy()\n    this.debugView.destroy()\n    this.consoleView.destroy()\n    this.schemeView.destroy()\n  }\n}\n"]}