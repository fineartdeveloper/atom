{"version":3,"file":"toolbar-view.js","sourceRoot":"","sources":["../../src/scheme/toolbar-view.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel'\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { parse } from 'path';\nimport { EventEmitter }  from 'events';\nimport { get } from 'lodash';\n\nconst { CompositeDisposable } = require('atom');\nimport {\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  createText,\n  createElement,\n  createSelect,\n  createOption,\n  insertElement,\n  attachEventFromObject\n} from '../element/index';\n\nexport interface ToolbarOptions {\n  didOpenScheme?: Function,\n  didRun?: Function,\n  didChangePath?: Function,\n  didStop?: Function,\n  didToggleConsole?: Function,\n  didToggleDebugArea?: Function\n}\n\nexport class ToolbarView {\n  public isRunning: boolean;\n  private element: HTMLElement;\n  private logoElement: HTMLElement;\n  private statusTextElement: HTMLElement;\n  private statusLoadingElement: HTMLElement;\n  private runButton: HTMLElement;\n  private stopButton: HTMLElement;\n  private stepButtons: HTMLElement;\n  private scheme: {\n    icon: HTMLElement,\n    name: Text\n  };\n  private schemePath: {\n    select: HTMLElement,\n    name: Text\n  };\n  private activePath: string\n  private events: EventEmitter;\n  private subscriptions:any = new CompositeDisposable();\n\n  constructor (options: ToolbarOptions) {\n\n    this.events = new EventEmitter();\n    this.element = createElement('xatom-debug-toolbar');\n    // create schemes\n    this.scheme = {\n      icon: createIconFromPath(''),\n      name: createText('')\n    };\n    // create scheme path\n    this.schemePath = {\n      name: createText('Current File'),\n      select: createSelect({\n        change: (value) => this.setPathName(value)\n      }, [])\n    }\n    this.runButton = createButton({\n      click: () => {\n        this.events.emit('didRun');\n      }\n    },[\n      createIcon('run')\n    ]);\n    this.stopButton = createButton({\n      disabled: true,\n      click: () => {\n        this.events.emit('didStop');\n      }\n    },[\n      createIcon('stop')\n    ]);\n\n    this.logoElement = createIcon('logo')\n    this.toggleLogo(false)\n\n    atom.config['observe']('xatom-debug.showToolbarIcon', (value) => this.toggleLogo(value))\n\n    insertElement(this.element, this.logoElement)\n\n    insertElement(this.element, this.runButton)\n    insertElement(this.element, this.stopButton)\n    insertElement(this.element, createGroupButtons([\n      createButton({\n        className: 'bugs-scheme'\n      }, [\n        createIcon('atom'),\n        this.schemePath.name,\n        createIcon('arrow-down'),\n        this.schemePath.select,\n        createElement('div', {\n          className: 'bugs-scheme-arrow'\n        })\n      ]),\n      createButton({\n        click: () => {\n          this.events.emit('didOpenScheme');\n        }\n      }, [\n        this.scheme.icon,\n        this.scheme.name\n      ])\n    ]))\n    // status\n    this.statusLoadingElement = createElement('div', {\n      className: 'bugs-status-loading'\n    })\n    this.statusTextElement = createElement('span', {\n      elements: [ createText('Not Started') ]\n    })\n\n    insertElement(this.element, createElement('bugs-scheme-status', {\n      // className: 'form-control',\n      elements: [\n        this.statusLoadingElement,\n        this.statusTextElement\n      ]\n    }))\n    // toggle panes\n    let toggleButtons = createGroupButtons([\n      createButton({\n        tooltip: {\n          subscriptions: this.subscriptions,\n          title: 'Toggle Console'\n        },\n        click: () => this.events.emit('didToggleConsole')\n      }, [createIcon('panel-bottom')]),\n      createButton({\n        tooltip: {\n          subscriptions: this.subscriptions,\n          title: 'Toggle Debug Area'\n        },\n        click: () => this.events.emit('didToggleDebugArea')\n      }, [createIcon('panel-right')])\n    ])\n    toggleButtons.classList.add('bugs-toggle-buttons')\n    insertElement(this.element, toggleButtons)\n    attachEventFromObject(this.events, [\n      'didRun',\n      'didStop',\n      'didChangePath',\n      'didOpenScheme',\n      'didToggleDebugArea',\n      'didToggleConsole'\n    ], options);\n  }\n\n  private toggleAtomTitleBar (value: boolean) {\n    let titleBar = document.querySelector('atom-panel .title-bar') as HTMLElement\n    if (get(titleBar, 'nodeType', false) && titleBar.parentNode) {\n      (<HTMLElement> titleBar.parentNode).style.display = value ? null : 'none'\n    }\n  }\n\n  public displayAsTitleBar () {\n    this.toggleAtomTitleBar(false)\n    this.element.classList.add('bugs-title-bar')\n  }\n\n  public displayDefault () {\n    this.toggleAtomTitleBar(true)\n    this.element.classList.remove('bugs-title-bar')\n  }\n\n  public didRun (cb: Function) {\n    this.events.on('didRun', cb)\n  }\n  public didStop (cb: Function) {\n    this.events.on('didStop', cb)\n  }\n\n  public didToggleConsole (cb) {\n    this.events.on('didToggleConsole', cb)\n  }\n\n  public didToggleDebugArea (cb) {\n    this.events.on('didToggleDebugArea', cb)\n  }\n\n  public setStatusLoading(value: boolean) {\n    this.statusLoadingElement.classList[value ? 'add' : 'remove']('active')\n  }\n\n  public resetStatus () {\n    this.statusTextElement.innerHTML = '';\n    return insertElement(this.statusTextElement, createText('Not Started'))\n  }\n\n  public setStatus (text: string, iconName?: string) {\n    this.statusTextElement.innerHTML = '';\n    let schemeName = get(this.scheme, 'name.nodeValue', '')\n    if (schemeName.length > 0) {\n      schemeName = `${schemeName}:`\n    }\n    let contents: Array<HTMLElement|Text> = [ createText(`${schemeName} ${text}`) ]\n    if (iconName) {\n      contents.unshift(createIcon(iconName))\n    }\n    return insertElement(this.statusTextElement, contents)\n  }\n\n  toggleLogo (state: boolean) {\n    this.logoElement.style.display = state ? null : 'none';\n  }\n\n  private setPathName (pathName: string) {\n    this.activePath = pathName\n    let baseName = parse(pathName).base\n    this.schemePath.name.nodeValue = ` ${baseName}`\n    // this.setStatusText(`Not Running`)\n    this.events.emit('didChangePath', pathName);\n  }\n\n  public getPathName (): string {\n    return this.activePath\n  }\n\n  public toggleRun (status: boolean) {\n    this.stopButton['disabled'] = status;\n    this.runButton['disabled'] = !status;\n    this.isRunning = !status\n  }\n\n  public setScheme (plugin) {\n    // set element icon bg\n    this.scheme.icon.style.backgroundImage = `url(${plugin.iconPath})`;\n    // set element scheme name\n    this.scheme.name.nodeValue = ` ${plugin.name}`;\n  }\n\n  public setPaths (paths: Array<string>) {\n    // clear old list\n    this.schemePath.select.innerHTML = '';\n    // add new paths\n    paths.forEach((p: string, index: number) => {\n      // activate first\n      if (index === 0) {\n        this.setPathName(p)\n      }\n      // insert option to path select\n      insertElement(this.schemePath.select, createOption(parse(p).base, p))\n    })\n  }\n\n  public getElement (): HTMLElement {\n    return this.element;\n  }\n\n  public destroy () {\n    this.toggleAtomTitleBar(true)\n    this.element.remove();\n    this.subscriptions.dispose();\n  }\n}\n"]}