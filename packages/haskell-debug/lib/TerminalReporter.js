"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cp = require("child_process");
const net = require("net");
const os = require("os");
const util = require("util");
const atomAPI = require("atom");
const PIPE_PATH = 'haskell-debug';
class TerminalReporter {
    constructor() {
        this.emitter = new atomAPI.Emitter();
        this.on = this.emitter.on.bind(this.emitter);
        this.streamData = '';
        this.totalData = '';
        const connectionPath = os.platform() === 'win32'
            ? '\\\\.\\pipe\\' + PIPE_PATH
            : `/tmp/${PIPE_PATH}.sock`;
        const terminalEchoPath = `${__dirname}/../bin/TerminalEcho.js`;
        this.server = net.createServer((socket) => {
            this.socket = socket;
            if (this.streamData !== '') {
                this.socket.write(this.streamData);
            }
            socket.on('data', (data) => this.onData(data));
            socket.on('end', () => {
                this.emitter.emit('close', undefined);
            });
        });
        this.server.listen(connectionPath, () => {
            if (atom.config.get('haskell-debug.showTerminal')) {
                const nodeCommand = `${atom.config.get('haskell-debug.nodeCommand')} ${terminalEchoPath}`;
                const commandToRun = util.format(atom.config.get('haskell-debug.terminalCommand'), nodeCommand);
                this.process = cp.exec(commandToRun);
            }
        });
    }
    destroy() {
        if (this.process) {
            this.send({
                type: 'close',
            });
            this.process.kill();
        }
        this.server.close();
    }
    write(output) {
        this.send({
            type: 'message',
            content: output,
        });
    }
    displayCommand(command) {
        this.send({
            type: 'display-command',
            command,
        });
    }
    send(data) {
        try {
            const sendingData = JSON.stringify(data) + '\n';
            if (this.socket === undefined) {
                this.streamData += sendingData;
            }
            else {
                this.socket.write(sendingData);
            }
        }
        catch (e) {
        }
    }
    onData(data) {
        const newLinePos = data.indexOf('\n');
        if (newLinePos !== -1) {
            this.totalData += data.slice(0, newLinePos);
            this.emitter.emit('command', this.totalData);
            this.totalData = '';
            this.onData(data.slice(newLinePos + 1));
        }
        else {
            this.totalData += data;
        }
    }
}
exports.TerminalReporter = TerminalReporter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVybWluYWxSZXBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi1zcmMvVGVybWluYWxSZXBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9DQUFvQztBQUNwQywyQkFBMkI7QUFDM0IseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixnQ0FBZ0M7QUFHaEMsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFBO0FBRWpDO0lBa0JFO1FBakJRLFlBQU8sR0FPWCxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUVULE9BQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBSy9DLGVBQVUsR0FBRyxFQUFFLENBQUE7UUFDZixjQUFTLEdBQUcsRUFBRSxDQUFBO1FBR3BCLE1BQU0sY0FBYyxHQUNsQixFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBTztZQUN2QixDQUFDLENBQUMsZUFBZSxHQUFHLFNBQVM7WUFDN0IsQ0FBQyxDQUFDLFFBQVEsU0FBUyxPQUFPLENBQUE7UUFDOUIsTUFBTSxnQkFBZ0IsR0FBRyxHQUFHLFNBQVMseUJBQXlCLENBQUE7UUFFOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDeEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7WUFDcEIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDcEMsQ0FBQztZQUNELE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FB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QUFJLENBQUMsQ0FBQztZQUNOLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFBO1FBQ3hCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFwR0QsNENBb0dDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNwID0gcmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpXG5pbXBvcnQgbmV0ID0gcmVxdWlyZSgnbmV0JylcbmltcG9ydCBvcyA9IHJlcXVpcmUoJ29zJylcbmltcG9ydCB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG5pbXBvcnQgYXRvbUFQSSA9IHJlcXVpcmUoJ2F0b20nKVxuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4uL2Jpbi1zcmMvbWVzc2FnZSdcblxuY29uc3QgUElQRV9QQVRIID0gJ2hhc2tlbGwtZGVidWcnXG5cbmV4cG9ydCBjbGFzcyBUZXJtaW5hbFJlcG9ydGVyIHtcbiAgcHJpdmF0ZSBlbWl0dGVyOiBhdG9tQVBJLkVtaXR0ZXI8XG4gICAge1xuICAgICAgY2xvc2U6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAge1xuICAgICAgY29tbWFuZDogc3RyaW5nXG4gICAgfVxuICA+ID0gbmV3IGF0b21BUEkuRW1pdHRlcigpXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWVtYmVyLW9yZGVyaW5nXG4gIHB1YmxpYyByZWFkb25seSBvbiA9IHRoaXMuZW1pdHRlci5vbi5iaW5kKHRoaXMuZW1pdHRlcilcblxuICBwcml2YXRlIHByb2Nlc3M/OiBjcC5DaGlsZFByb2Nlc3NcbiAgcHJpdmF0ZSBzZXJ2ZXI6IG5ldC5TZXJ2ZXJcbiAgcHJpdmF0ZSBzb2NrZXQ/OiBuZXQuU29ja2V0XG4gIHByaXZhdGUgc3RyZWFtRGF0YSA9ICcnXG4gIHByaXZhdGUgdG90YWxEYXRhID0gJydcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBjb25uZWN0aW9uUGF0aCA9XG4gICAgICBvcy5wbGF0Zm9ybSgpID09PSAnd2luMzInXG4gICAgICAgID8gJ1xcXFxcXFxcLlxcXFxwaXBlXFxcXCcgKyBQSVBFX1BBVEhcbiAgICAgICAgOiBgL3RtcC8ke1BJUEVfUEFUSH0uc29ja2BcbiAgICBjb25zdCB0ZXJtaW5hbEVjaG9QYXRoID0gYCR7X19kaXJuYW1lfS8uLi9iaW4vVGVybWluYWxFY2hvLmpzYFxuXG4gICAgdGhpcy5zZXJ2ZXIgPSBuZXQuY3JlYXRlU2VydmVyKChzb2NrZXQpID0+IHtcbiAgICAgIHRoaXMuc29ja2V0ID0gc29ja2V0XG4gICAgICBpZiAodGhpcy5zdHJlYW1EYXRhICE9PSAnJykge1xuICAgICAgICB0aGlzLnNvY2tldC53cml0ZSh0aGlzLnN0cmVhbURhdGEpXG4gICAgICB9XG4gICAgICBzb2NrZXQub24oJ2RhdGEnLCAoZGF0YSkgPT4gdGhpcy5vbkRhdGEoZGF0YSkpXG4gICAgICBzb2NrZXQub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgdGhpcy5lbWl0dGVyLmVtaXQoJ2Nsb3NlJywgdW5kZWZpbmVkKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgdGhpcy5zZXJ2ZXIubGlzdGVuKGNvbm5lY3Rpb25QYXRoLCAoKSA9PiB7XG4gICAgICBpZiAoYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLnNob3dUZXJtaW5hbCcpKSB7XG4gICAgICAgIGNvbnN0IG5vZGVDb21tYW5kID0gYCR7YXRvbS5jb25maWcuZ2V0KFxuICAgICAgICAgICdoYXNrZWxsLWRlYnVnLm5vZGVDb21tYW5kJyxcbiAgICAgICAgKX0gJHt0ZXJtaW5hbEVjaG9QYXRofWBcbiAgICAgICAgY29uc3QgY29tbWFuZFRvUnVuID0gdXRpbC5mb3JtYXQoXG4gICAgICAgICAgYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLnRlcm1pbmFsQ29tbWFuZCcpLFxuICAgICAgICAgIG5vZGVDb21tYW5kLFxuICAgICAgICApXG5cbiAgICAgICAgdGhpcy5wcm9jZXNzID0gY3AuZXhlYyhjb21tYW5kVG9SdW4pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnByb2Nlc3MpIHtcbiAgICAgIHRoaXMuc2VuZCh7XG4gICAgICAgIHR5cGU6ICdjbG9zZScsXG4gICAgICB9KVxuICAgICAgdGhpcy5wcm9jZXNzLmtpbGwoKVxuICAgIH1cbiAgICB0aGlzLnNlcnZlci5jbG9zZSgpXG4gIH1cblxuICBwdWJsaWMgd3JpdGUob3V0cHV0OiBzdHJpbmcpIHtcbiAgICB0aGlzLnNlbmQoe1xuICAgICAgdHlwZTogJ21lc3NhZ2UnLFxuICAgICAgY29udGVudDogb3V0cHV0LFxuICAgIH0pXG4gIH1cblxuICBwdWJsaWMgZGlzcGxheUNvbW1hbmQoY29tbWFuZDogc3RyaW5nKSB7XG4gICAgdGhpcy5zZW5kKHtcbiAgICAgIHR5cGU6ICdkaXNwbGF5LWNvbW1hbmQnLFxuICAgICAgY29tbWFuZCxcbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBzZW5kKGRhdGE6IE1lc3NhZ2UpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc2VuZGluZ0RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKSArICdcXG4nXG5cbiAgICAgIGlmICh0aGlzLnNvY2tldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuc3RyZWFtRGF0YSArPSBzZW5kaW5nRGF0YVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zb2NrZXQud3JpdGUoc2VuZGluZ0RhdGEpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWdub3JlIGVycm9zXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvbkRhdGEoZGF0YTogQnVmZmVyKSB7XG4gICAgY29uc3QgbmV3TGluZVBvcyA9IGRhdGEuaW5kZXhPZignXFxuJylcbiAgICBpZiAobmV3TGluZVBvcyAhPT0gLTEpIHtcbiAgICAgIHRoaXMudG90YWxEYXRhICs9IGRhdGEuc2xpY2UoMCwgbmV3TGluZVBvcylcbiAgICAgIHRoaXMuZW1pdHRlci5lbWl0KCdjb21tYW5kJywgdGhpcy50b3RhbERhdGEpXG4gICAgICB0aGlzLnRvdGFsRGF0YSA9ICcnXG4gICAgICB0aGlzLm9uRGF0YShkYXRhLnNsaWNlKG5ld0xpbmVQb3MgKyAxKSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50b3RhbERhdGEgKz0gZGF0YVxuICAgIH1cbiAgfVxufVxuIl19