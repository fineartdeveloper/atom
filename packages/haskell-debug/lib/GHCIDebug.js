"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const atomAPI = require("atom");
const ahu = require("atom-haskell-utils");
const interactive_process_1 = require("./interactive-process");
const os_1 = require("os");
class GHCIDebug {
    constructor(ghciCommand = 'ghci', ghciArgs = [], bufferPath) {
        this.emitter = new atomAPI.Emitter();
        this.on = this.emitter.on.bind(this.emitter);
        this.moduleNameByPath = new Map();
        this.addReadyEvent();
        this.readyPromise = this.init(ghciCommand, ghciArgs, bufferPath);
        this.readyPromise.then((response) => {
            console.warn(response.stderr.join(os_1.EOL));
        });
    }
    destroy() {
        this.stop();
    }
    async loadModule(name) {
        await this.run(`:load ${name}`);
    }
    async setExceptionBreakLevel(level) {
        await this.run(':unset -fbreak-on-exception', false, false, false, false);
        await this.run(':unset -fbreak-on-error', false, false, false, false);
        switch (level) {
            case 'exceptions':
                await this.run(':set -fbreak-on-exception', false, false, false, false);
                break;
            case 'errors':
                await this.run(':set -fbreak-on-error', false, false, false, false);
                break;
            case 'none':
                break;
        }
    }
    async addBreakpoint(breakpoint) {
        if (typeof breakpoint === 'string') {
            await this.run(`:break ${breakpoint}`);
        }
        else if (breakpoint.file) {
            try {
                const moduleName = await this.moduleNameFromFilePath(breakpoint.file);
                await this.run(`:break ${moduleName} ${breakpoint.line}`);
            }
            catch (e) {
                atom.notifications.addError(`Failed to set breakpoint on ${breakpoint.file}`, {
                    detail: e.toString(),
                    stack: e.stack,
                    dismissable: true,
                });
            }
        }
        else {
            atom.notifications.addError('Failed to set breakpoint', {
                detail: 'Text editor has no filename',
                dismissable: true,
            });
        }
    }
    async resolveExpression(expression) {
        if (!expression.trim()) {
            return undefined;
        }
        if (expression.indexOf('\n') !== -1) {
            return undefined;
        }
        const getExpression = (ghciOutput) => {
            const matchResult = ghciOutput.match(/[^ ]* = (.*)/);
            if (!matchResult) {
                return undefined;
            }
            return matchResult[1];
        };
        const printingResult = getExpression(await this.run(`:print ${expression}`, false, false, false, false));
        if (printingResult !== undefined) {
            return printingResult;
        }
        let tempVarNum = 0;
        let potentialTempVar;
        do {
            tempVarNum += 1;
            potentialTempVar = getExpression(await this.run(`:print temp${tempVarNum}`, false, false, false, false));
        } while (potentialTempVar !== undefined);
        await this.run(`let temp${tempVarNum} = ${expression}`, false, false, false, false);
        return getExpression(await this.run(`:print temp${tempVarNum}`, false, false, false, false));
    }
    forward() {
        this.run(':forward', true);
    }
    back() {
        this.run(':back', true);
    }
    step() {
        this.run(':step', true, true);
    }
    stop() {
        this.run(':quit');
        setTimeout(() => {
            this.process && this.process.destroy();
        }, 3000);
    }
    continue() {
        this.run(':continue', true);
    }
    async addedAllListeners() {
        return this.readyPromise;
    }
    async startDebug(moduleName) {
        moduleName = moduleName || 'main';
        await this.run(':trace ' + moduleName, true, true);
    }
    async run(commandText, emitStatusChanges = false, emitHistoryLength = false, emitCommandOutput = true, emitErrors = true) {
        await this.readyPromise;
        if (!this.process)
            throw new Error('No interactive process');
        let prompt = '';
        let tail = '';
        const response = await this.process.request(commandText + os_1.EOL, (arg) => {
            if (arg.type === 'stdin') {
                if (emitCommandOutput)
                    this.emitter.emit('command-issued', arg.line);
            }
            else if (arg.type === 'prompt') {
                tail = arg.prompt[1];
                prompt = arg.prompt[2];
                if (emitCommandOutput) {
                    this.emitter.emit('console-output', `${tail}${prompt}> `);
                }
            }
            else if (arg.type === 'stdout') {
                if (emitCommandOutput) {
                    this.emitter.emit('console-output', arg.line + os_1.EOL);
                }
            }
            else if (arg.type === 'stderr') {
                if (emitErrors)
                    this.emitter.emit('error', arg.line + os_1.EOL);
            }
        });
        const result = response.stdout;
        const err = response.stderr;
        if (tail)
            result.push(tail);
        if (emitErrors && err.length) {
            this.emitter.emit('error-completed', err.join(os_1.EOL));
        }
        if (emitStatusChanges) {
            await this.emitStatusChanges(prompt, result.join(os_1.EOL), emitHistoryLength);
        }
        return result.join(os_1.EOL);
    }
    async init(ghciCommand = 'ghci', ghciArgs = [], bufferPath) {
        const cwd = (await ahu.getRootDir(bufferPath || null)).getPath();
        this.process = new interactive_process_1.InteractiveProcess(ghciCommand, ghciArgs, () => {
            this.emitter.emit('debug-finished', undefined);
        }, { cwd, shell: true }, /^(.*)#~IDEHASKELLREPL~(.*)~#$/);
        return this.process.request(`:set prompt2 \"\"${os_1.EOL}` +
            `:set prompt-cont \"\"${os_1.EOL}` +
            `:set prompt \"#~IDEHASKELLREPL~%s~#\\n\"${os_1.EOL}`, (arg) => {
            if (arg.type === 'stdout') {
                this.emitter.emit('console-output', arg.line + os_1.EOL);
            }
            else if (arg.type === 'stderr') {
                this.emitter.emit('error', arg.line + os_1.EOL);
            }
            else if (arg.type === 'prompt') {
                this.emitter.emit('console-output', `${arg.prompt[1]}${arg.prompt[2]}> `);
            }
        });
    }
    addReadyEvent() {
        this.emitter.on('paused-on-exception', () => this.emitter.emit('ready', undefined));
        this.emitter.on('line-changed', () => this.emitter.emit('ready', undefined));
        this.emitter.on('debug-finished', () => this.emitter.emit('ready', undefined));
    }
    async getBindings() {
        const outputStr = await this.run(':show bindings', false, false, false);
        return outputStr.split(os.EOL);
    }
    async getHistoryLength() {
        const historyQuery = await this.run(':history 100', false, false, false);
        const regex = /-(\d*).*(?:\n|\r|\r\n)<end of history>$/;
        const matchResult = historyQuery.match(regex);
        if (!matchResult) {
            if (historyQuery.slice(-3) === '...') {
                return Infinity;
            }
            else {
                return 0;
            }
        }
        else {
            return parseInt(matchResult[1], 10);
        }
    }
    parsePrompt(stdOutput) {
        const patterns = [
            {
                pattern: /^\[(?:[-\d]*: )?(.*):\((\d+),(\d+)\)-\((\d+),(\d+)\).*\].*$/,
                func: (match) => ({
                    filename: match[1],
                    range: [
                        [parseInt(match[2], 10) - 1, parseInt(match[3], 10) - 1],
                        [parseInt(match[4], 10), parseInt(match[5], 10)],
                    ],
                }),
            },
            {
                pattern: /^\[(?:[-\d]*: )?(.*):(\d*):(\d*)-(\d*)\].*$/,
                func: (match) => ({
                    filename: match[1],
                    range: [
                        [parseInt(match[2], 10) - 1, parseInt(match[3], 10) - 1],
                        [parseInt(match[2], 10) - 1, parseInt(match[4], 10)],
                    ],
                }),
            },
            {
                pattern: /^\[<exception thrown>\].*$/,
                func: () => GHCIDebug.pausedOnError,
            },
            {
                pattern: /^.*$/,
                func: () => GHCIDebug.finishedDebugging,
            },
        ];
        for (const pattern of patterns) {
            const matchResult = stdOutput.match(pattern.pattern);
            if (matchResult) {
                return pattern.func(matchResult);
            }
        }
        throw new Error('Cannot read prompt: \n' + stdOutput);
    }
    async emitStatusChanges(prompt, mainBody, emitHistoryLength) {
        const result = this.parsePrompt(prompt);
        if (result === GHCIDebug.pausedOnError) {
            const historyLength = await this.getHistoryLength();
            this.emitter.emit('paused-on-exception', {
                historyLength,
                localBindings: mainBody.split('\n').slice(1),
            });
        }
        else if (result === GHCIDebug.finishedDebugging) {
            this.emitter.emit('debug-finished', undefined);
        }
        else {
            const breakInfo = result;
            breakInfo.localBindings = await this.getBindings();
            if (emitHistoryLength) {
                breakInfo.historyLength = await this.getHistoryLength();
            }
            this.emitter.emit('line-changed', breakInfo);
        }
    }
    async moduleNameFromFilePath(filePath) {
        const cachedModuleName = this.moduleNameByPath.get(filePath);
        if (cachedModuleName)
            return cachedModuleName;
        const modules = (await this.run(':show modules')).split(os.EOL);
        const regex = /^([^ ]+) +\( +(.+), +\w+ +\)$/;
        for (const moduleStr of modules) {
            const matchResult = regex.exec(moduleStr);
            if (matchResult) {
                this.moduleNameByPath.set(matchResult[2], matchResult[1]);
            }
            else {
                console.error(`Unexpected reply from GHCI ':show modules': ${moduleStr}`);
            }
        }
        const newCachedModuleName = this.moduleNameByPath.get(filePath);
        if (newCachedModuleName) {
            return newCachedModuleName;
        }
        else {
            throw new Error(`Couldn't find module name for ${filePath}`);
        }
    }
}
GHCIDebug.pausedOnError = Symbol('Paused on Error');
GHCIDebug.finishedDebugging = Symbol('Finished debugging');
exports.GHCIDebug = GHCIDebug;
//# sourceMappingURL=data:application/json;base64,