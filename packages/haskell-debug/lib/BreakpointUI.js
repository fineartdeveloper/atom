"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
class BreakpointUI {
    constructor() {
        this._breakpoints = [];
        this.markers = new WeakMap();
    }
    get breakpoints() {
        return this._breakpoints;
    }
    toggleBreakpoint(lineNumber, te) {
        const breakpoints = _.remove(this.breakpoints, {
            file: te.getPath(),
            line: lineNumber,
        });
        if (breakpoints.length === 0) {
            this.setBreakpoint({
                line: lineNumber,
                file: te.getPath(),
            }, te);
        }
        else {
            breakpoints.forEach((breakpoint) => {
                const m = this.markers.get(breakpoint);
                if (m) {
                    m.destroy();
                }
            });
        }
    }
    attachToNewTextEditor(te) {
        const lineNumbersModal = te.gutterWithName('line-number');
        if (!lineNumbersModal)
            throw new Error('No line-number gutter on editor');
        const view = atom.views.getView(lineNumbersModal);
        view.addEventListener('click', (ev) => {
            const scopes = te.getRootScopeDescriptor().getScopesArray();
            if (scopes.length === 1 &&
                scopes[0] === 'source.haskell' &&
                atom.config.get('haskell-debug.clickGutterToToggleBreakpoint')) {
                const bufferRow = ev.target.dataset.bufferRow;
                if (bufferRow === undefined) {
                    console.warn("haskell-debug: click on gutter doesn't have a buffer row property");
                    return;
                }
                const lineNumber = parseInt(bufferRow, 10) + 1;
                this.toggleBreakpoint(lineNumber, te);
            }
        });
        this.setFileBreakpoints(te);
    }
    setBreakpoint(breakpoint, te) {
        const breakpointMarker = te.markBufferRange([[breakpoint.line - 1, 0], [breakpoint.line, 0]], { invalidate: 'inside' });
        te.decorateMarker(breakpointMarker, {
            type: 'line-number',
            class: 'haskell-debug-breakpoint',
        });
        breakpointMarker.onDidChange((change) => {
            breakpoint.line = change.newHeadBufferPosition.row;
            if (!change.isValid) {
                _.remove(this.breakpoints, breakpoint);
            }
        });
        this.markers.set(breakpoint, breakpointMarker);
        this.breakpoints.push(breakpoint);
    }
    setFileBreakpoints(te) {
        _.filter(this.breakpoints, {
            file: te.getPath(),
        }).forEach((breakpoint) => this.setBreakpoint(breakpoint, te));
    }
}
exports.BreakpointUI = BreakpointUI;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWtwb2ludFVJLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vbGliLXNyYy9CcmVha3BvaW50VUkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw0QkFBNEI7QUFHNUI7SUFBQTtRQUNVLGlCQUFZLEdBQWlCLEVBQUUsQ0FBQTtRQUMvQixZQUFPLEdBQStDLElBQUksT0FBTyxFQUFFLENBQUE7SUF1RjdFLENBQUM7SUFyRkMsSUFBVyxXQUFXO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFBO0lBQzFCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxVQUFrQixFQUFFLEVBQXNCO1FBQ2hFLE1BQU0sV0FBVyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUM3QyxJQUFJLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRTtZQUNsQixJQUFJLEVBQUUsVUFBVTtTQUNqQixDQUFDLENBQUE7UUFFRixFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDN0IsSUFBSSxDQUFDLGFBQWEsQ0FDaEI7Z0JBQ0UsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLElBQUksRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFO2FBQ25CLEVBQ0QsRUFBRSxDQUNILENBQUE7UUFDSCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxFQUFFLEVBQUU7Z0JBQ2pDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO2dCQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNOLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFDYixDQUFDO1lBQ0gsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDO0lBQ0gsQ0FBQztJQUVNLHFCQUFxQixD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Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF0b21BUEkgPSByZXF1aXJlKCdhdG9tJylcbmltcG9ydCBfID0gcmVxdWlyZSgnbG9kYXNoJylcbmltcG9ydCB7IEJyZWFrcG9pbnQgfSBmcm9tICcuL0dIQ0lEZWJ1ZydcblxuZXhwb3J0IGNsYXNzIEJyZWFrcG9pbnRVSSB7XG4gIHByaXZhdGUgX2JyZWFrcG9pbnRzOiBCcmVha3BvaW50W10gPSBbXVxuICBwcml2YXRlIG1hcmtlcnM6IFdlYWtNYXA8QnJlYWtwb2ludCwgYXRvbUFQSS5EaXNwbGF5TWFya2VyPiA9IG5ldyBXZWFrTWFwKClcblxuICBwdWJsaWMgZ2V0IGJyZWFrcG9pbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9icmVha3BvaW50c1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZUJyZWFrcG9pbnQobGluZU51bWJlcjogbnVtYmVyLCB0ZTogYXRvbUFQSS5UZXh0RWRpdG9yKSB7XG4gICAgY29uc3QgYnJlYWtwb2ludHMgPSBfLnJlbW92ZSh0aGlzLmJyZWFrcG9pbnRzLCB7XG4gICAgICBmaWxlOiB0ZS5nZXRQYXRoKCksXG4gICAgICBsaW5lOiBsaW5lTnVtYmVyLFxuICAgIH0pXG5cbiAgICBpZiAoYnJlYWtwb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnNldEJyZWFrcG9pbnQoXG4gICAgICAgIHtcbiAgICAgICAgICBsaW5lOiBsaW5lTnVtYmVyLFxuICAgICAgICAgIGZpbGU6IHRlLmdldFBhdGgoKSxcbiAgICAgICAgfSxcbiAgICAgICAgdGUsXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrcG9pbnRzLmZvckVhY2goKGJyZWFrcG9pbnQpID0+IHtcbiAgICAgICAgY29uc3QgbSA9IHRoaXMubWFya2Vycy5nZXQoYnJlYWtwb2ludClcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICBtLmRlc3Ryb3koKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhdHRhY2hUb05ld1RleHRFZGl0b3IodGU6IGF0b21BUEkuVGV4dEVkaXRvcikge1xuICAgIC8vIHBhdGNoIHRoZSB0ZXh0IGVkaXRvciB0byBhZGQgYnJlYWtwb2ludHMgb24gY2xpY2tcbiAgICBjb25zdCBsaW5lTnVtYmVyc01vZGFsID0gdGUuZ3V0dGVyV2l0aE5hbWUoJ2xpbmUtbnVtYmVyJylcbiAgICBpZiAoIWxpbmVOdW1iZXJzTW9kYWwpIHRocm93IG5ldyBFcnJvcignTm8gbGluZS1udW1iZXIgZ3V0dGVyIG9uIGVkaXRvcicpXG4gICAgY29uc3QgdmlldyA9IGF0b20udmlld3MuZ2V0VmlldyhsaW5lTnVtYmVyc01vZGFsKSBhcyBIVE1MRWxlbWVudFxuXG4gICAgdmlldy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldikgPT4ge1xuICAgICAgY29uc3Qgc2NvcGVzID0gdGUuZ2V0Um9vdFNjb3BlRGVzY3JpcHRvcigpLmdldFNjb3Blc0FycmF5KClcbiAgICAgIGlmIChcbiAgICAgICAgc2NvcGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICBzY29wZXNbMF0gPT09ICdzb3VyY2UuaGFza2VsbCcgJiZcbiAgICAgICAgYXRvbS5jb25maWcuZ2V0KCdoYXNrZWxsLWRlYnVnLmNsaWNrR3V0dGVyVG9Ub2dnbGVCcmVha3BvaW50JylcbiAgICAgICkge1xuICAgICAgICBjb25zdCBidWZmZXJSb3cgPSAoZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS5kYXRhc2V0LmJ1ZmZlclJvd1xuICAgICAgICBpZiAoYnVmZmVyUm93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcImhhc2tlbGwtZGVidWc6IGNsaWNrIG9uIGd1dHRlciBkb2Vzbid0IGhhdmUgYSBidWZmZXIgcm93IHByb3BlcnR5XCIsXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGluZU51bWJlciA9IHBhcnNlSW50KGJ1ZmZlclJvdywgMTApICsgMVxuICAgICAgICB0aGlzLnRvZ2dsZUJyZWFrcG9pbnQobGluZU51bWJlciwgdGUpXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuc2V0RmlsZUJyZWFrcG9pbnRzKHRlKVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRCcmVha3BvaW50KGJyZWFrcG9pbnQ6IEJyZWFrcG9pbnQsIHRlOiBhdG9tQVBJLlRleHRFZGl0b3IpIHtcbiAgICBjb25zdCBicmVha3BvaW50TWFya2VyID0gdGUubWFya0J1ZmZlclJhbmdlKFxuICAgICAgW1ticmVha3BvaW50LmxpbmUgLSAxLCAwXSwgW2JyZWFrcG9pbnQubGluZSwgMF1dLFxuICAgICAgeyBpbnZhbGlkYXRlOiAnaW5zaWRlJyB9LFxuICAgIClcblxuICAgIHRlLmRlY29yYXRlTWFya2VyKGJyZWFrcG9pbnRNYXJrZXIsIHtcbiAgICAgIHR5cGU6ICdsaW5lLW51bWJlcicsXG4gICAgICBjbGFzczogJ2hhc2tlbGwtZGVidWctYnJlYWtwb2ludCcsXG4gICAgfSlcblxuICAgIGJyZWFrcG9pbnRNYXJrZXIub25EaWRDaGFuZ2UoKGNoYW5nZSkgPT4ge1xuICAgICAgYnJlYWtwb2ludC5saW5lID0gY2hhbmdlLm5ld0hlYWRCdWZmZXJQb3NpdGlvbi5yb3dcbiAgICAgIGlmICghY2hhbmdlLmlzVmFsaWQpIHtcbiAgICAgICAgXy5yZW1vdmUodGhpcy5icmVha3BvaW50cywgYnJlYWtwb2ludClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5tYXJrZXJzLnNldChicmVha3BvaW50LCBicmVha3BvaW50TWFya2VyKVxuXG4gICAgdGhpcy5icmVha3BvaW50cy5wdXNoKGJyZWFrcG9pbnQpXG4gIH1cblxuICBwcml2YXRlIHNldEZpbGVCcmVha3BvaW50cyh0ZTogYXRvbUFQSS5UZXh0RWRpdG9yKSB7XG4gICAgXy5maWx0ZXIodGhpcy5icmVha3BvaW50cywge1xuICAgICAgZmlsZTogdGUuZ2V0UGF0aCgpLFxuICAgIH0pLmZvckVhY2goKGJyZWFrcG9pbnQpID0+IHRoaXMuc2V0QnJlYWtwb2ludChicmVha3BvaW50LCB0ZSkpXG4gIH1cbn1cbiJdfQ==