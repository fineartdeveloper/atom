".source.js":
	"querystring.unescapeBuffer(s, decodeSpaces)":
		prefix: "querystring.unescapeBuffer(s, decodeSpaces)"
		body: "querystring.unescapeBuffer(${1:s}, ${2:decodeSpaces})"
	"querystring.unescape(s, decodeSpaces)":
		prefix: "querystring.unescape(s, decodeSpaces)"
		body: "querystring.unescape(${1:s}, ${2:decodeSpaces})"
	"querystring.escape(str)":
		prefix: "querystring.escape(str)"
		body: "querystring.escape(${1:str})"
	"querystring.encode(obj, sep, eq, options)":
		prefix: "querystring.encode(obj, sep, eq, options)"
		body: "querystring.encode(${1:obj}, ${2:sep}, ${3:eq}, ${4:options})"
	"querystring.stringify(obj, sep, eq, options)":
		prefix: "querystring.stringify(obj, sep, eq, options)"
		body: "querystring.stringify(${1:obj}, ${2:sep}, ${3:eq}, ${4:options})"
	"querystring.decode(qs, sep, eq, options)":
		prefix: "querystring.decode(qs, sep, eq, options)"
		body: "querystring.decode(${1:qs}, ${2:sep}, ${3:eq}, ${4:options})"
	"querystring.parse(qs, sep, eq, options)":
		prefix: "querystring.parse(qs, sep, eq, options)"
		body: "querystring.parse(${1:qs}, ${2:sep}, ${3:eq}, ${4:options})"
	"readline.createInterface(input, output, completer, terminal)":
		prefix: "readline.createInterface(input, output, completer, terminal)"
		body: "readline.createInterface(${1:input}, ${2:output}, ${3:completer}, ${4:terminal})"
	"readline.Interface(input, output, completer, terminal)":
		prefix: "readline.Interface(input, output, completer, terminal)"
		body: "readline.Interface(${1:input}, ${2:output}, ${3:completer}, ${4:terminal})"
	"readline.emitKeypressEvents(stream)":
		prefix: "readline.emitKeypressEvents(stream)"
		body: "readline.emitKeypressEvents(${1:stream})"
	"readline.cursorTo(stream, x, y)":
		prefix: "readline.cursorTo(stream, x, y)"
		body: "readline.cursorTo(${1:stream}, ${2:x}, ${3:y})"
	"readline.moveCursor(stream, dx, dy)":
		prefix: "readline.moveCursor(stream, dx, dy)"
		body: "readline.moveCursor(${1:stream}, ${2:dx}, ${3:dy})"
	"readline.clearLine(stream, dir)":
		prefix: "readline.clearLine(stream, dir)"
		body: "readline.clearLine(${1:stream}, ${2:dir})"
	"readline.clearScreenDown(stream)":
		prefix: "readline.clearScreenDown(stream)"
		body: "readline.clearScreenDown(${1:stream})"
	"readline.getStringWidth(str)":
		prefix: "readline.getStringWidth(str)"
		body: "readline.getStringWidth(${1:str})"
	"readline.isFullWidthCodePoint(code)":
		prefix: "readline.isFullWidthCodePoint(code)"
		body: "readline.isFullWidthCodePoint(${1:code})"
	"readline.codePointAt()":
		prefix: "readline.codePointAt()"
		body: "readline.codePointAt()"
	"readline.stripVTControlCharacters(str)":
		prefix: "readline.stripVTControlCharacters(str)"
		body: "readline.stripVTControlCharacters(${1:str})"
	"repl.writer(obj, opts)":
		prefix: "repl.writer(obj, opts)"
		body: "repl.writer(${1:obj}, ${2:opts})"
	"repl.REPLServer(prompt, stream, eval_, useGlobal, ignoreUndefined, replMode)":
		prefix: "repl.REPLServer(prompt, stream, eval_, useGlobal, ignoreUndefined, replMode)"
		body: "repl.REPLServer(${1:prompt}, ${2: }, ${3:stream}, ${4: }, ${5:eval_}, ${6: }, ${7:useGlobal}, ${8: }, ${9:ignoreUndefined}, ${10: }, ${11:replMode})"
	"repl.start(prompt, source, eval_, useGlobal, ignoreUndefined, replMode)":
		prefix: "repl.start(prompt, source, eval_, useGlobal, ignoreUndefined, replMode)"
		body: "repl.start(${1:prompt}, ${2: }, ${3:source}, ${4: }, ${5:eval_}, ${6: }, ${7:useGlobal}, ${8: }, ${9:ignoreUndefined}, ${10: }, ${11:replMode})"
	"stream.super_()":
		prefix: "stream.super_()"
		body: "stream.super_()"
	"stream.Readable(options)":
		prefix: "stream.Readable(options)"
		body: "stream.Readable(${1:options})"
	"stream.Writable(options)":
		prefix: "stream.Writable(options)"
		body: "stream.Writable(${1:options})"
	"stream.Duplex(options)":
		prefix: "stream.Duplex(options)"
		body: "stream.Duplex(${1:options})"
	"stream.Transform(options)":
		prefix: "stream.Transform(options)"
		body: "stream.Transform(${1:options})"
	"stream.PassThrough(options)":
		prefix: "stream.PassThrough(options)"
		body: "stream.PassThrough(${1:options})"
	"stream.Stream()":
		prefix: "stream.Stream()"
		body: "stream.Stream()"
