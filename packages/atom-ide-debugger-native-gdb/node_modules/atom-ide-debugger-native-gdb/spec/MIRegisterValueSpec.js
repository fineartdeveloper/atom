'use strict';var _MIRegisterValue;













function _load_MIRegisterValue() {return _MIRegisterValue = require('../lib/MIRegisterValue');} /**
                                                                                                 * Copyright (c) 2017-present, Facebook, Inc.
                                                                                                 * All rights reserved.
                                                                                                 *
                                                                                                 * This source code is licensed under the BSD-style license found in the
                                                                                                 * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                 * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                 *
                                                                                                 * 
                                                                                                 * @format
                                                                                                 */describe('MIRegisterValue', () => {it('should parse a simple value', () => {const textValue = '0x7fff5fbff1d4';const parser = new (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterValueParser(textValue);
    const value = parser.parse();

    expect(value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value instanceof MIRegisterSimpleValue"');}

    expect(value.value).toBe('0x7fff5fbff1d4');
  });

  it('should parse an indexed list', () => {
    const textValue = '{0xc3, 0xf5}';
    const parser = new (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterValueParser(textValue);
    const value = parser.parse();

    expect(value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterIndexedValues).toBeTruthy();if (!(
    value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterIndexedValues)) {throw new Error('Invariant violation: "value instanceof MIRegisterIndexedValues"');}
    expect(value.length).toBe(2);

    const value0 = value.valueAt('0');
    expect(value0 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value0 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value0 instanceof MIRegisterSimpleValue"');}
    expect(value0.value).toBe('0xc3');

    const value1 = value.valueAt('1');
    expect(value1 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value1 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value1 instanceof MIRegisterSimpleValue"');}
    expect(value1.value).toBe('0xf5');
  });

  it('should parse an indexed list with compressed entries', () => {
    const textValue = '{0xc3, 0xf5 <repeats 2 times>}';
    const parser = new (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterValueParser(textValue);
    const value = parser.parse();

    expect(value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterIndexedValues).toBeTruthy();if (!(
    value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterIndexedValues)) {throw new Error('Invariant violation: "value instanceof MIRegisterIndexedValues"');}
    expect(value.length).toBe(3);

    const value0 = value.valueAt('0');
    expect(value0 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value0 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value0 instanceof MIRegisterSimpleValue"');}
    expect(value0.value).toBe('0xc3');

    const value1 = value.valueAt('1');
    expect(value1 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value1 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value1 instanceof MIRegisterSimpleValue"');}
    expect(value1.value).toBe('0xf5');

    const value2 = value.valueAt('2');
    expect(value2 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value2 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value2 instanceof MIRegisterSimpleValue"');}
    expect(value2.value).toBe('0xf5');
  });

  it('should parse a named list', () => {
    const textValue = '{a = 0xc3, b = 0xf5}';
    const parser = new (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterValueParser(textValue);
    const value = parser.parse();

    expect(value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterNamedValues).toBeTruthy();if (!(
    value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterNamedValues)) {throw new Error('Invariant violation: "value instanceof MIRegisterNamedValues"');}
    expect(value.names.length).toBe(2);
    expect(value.names.includes('a')).toBeTruthy();
    expect(value.names.includes('b')).toBeTruthy();

    const value0 = value.valueAt('a');
    expect(value0 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value0 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value0 instanceof MIRegisterSimpleValue"');}
    expect(value0.value).toBe('0xc3');

    const value1 = value.valueAt('b');
    expect(value1 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value1 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value1 instanceof MIRegisterSimpleValue"');}
    expect(value1.value).toBe('0xf5');
  });

  it('should parse a nested structure', () => {
    const textValue = '{a = {0xc3, 0xf5}}';
    const parser = new (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterValueParser(textValue);
    const value = parser.parse();

    expect(value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterNamedValues).toBeTruthy();if (!(
    value instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterNamedValues)) {throw new Error('Invariant violation: "value instanceof MIRegisterNamedValues"');}
    expect(value.names.length).toBe(1);
    expect(value.names.includes('a')).toBeTruthy();

    const valuea = value.valueAt('a');
    expect(valuea instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterIndexedValues).toBeTruthy();if (!(
    valuea instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterIndexedValues)) {throw new Error('Invariant violation: "valuea instanceof MIRegisterIndexedValues"');}
    expect(valuea.length).toBe(2);

    const value0 = valuea.valueAt('0');
    expect(value0 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value0 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value0 instanceof MIRegisterSimpleValue"');}
    expect(value0.value).toBe('0xc3');

    const value1 = valuea.valueAt('1');
    expect(value1 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue).toBeTruthy();if (!(
    value1 instanceof (_MIRegisterValue || _load_MIRegisterValue()).MIRegisterSimpleValue)) {throw new Error('Invariant violation: "value1 instanceof MIRegisterSimpleValue"');}
    expect(value1.value).toBe('0xf5');
  });
});