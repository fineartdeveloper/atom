'use strict';var _MIProxy;











function _load_MIProxy() {return _MIProxy = _interopRequireDefault(require('../lib/MIProxy'));}var _nuclideUri;
function _load_nuclideUri() {return _nuclideUri = _interopRequireDefault(require('nuclide-commons/nuclideUri'));}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} /**
                                                                                                                                                                                                                * Copyright (c) 2017-present, Facebook, Inc.
                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                *
                                                                                                                                                                                                                * This source code is licensed under the BSD-style license found in the
                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                                                                                                                * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                                                *
                                                                                                                                                                                                                * 
                                                                                                                                                                                                                * @format
                                                                                                                                                                                                                */describe('MIProxy', () => {let proxy;beforeEach(() => {proxy = new (_MIProxy || _load_MIProxy()).default();proxy.start('node', [(_nuclideUri || _load_nuclideUri()).default.join(__dirname, '../test-support/RunMIMockServer.js')]);});

  it('should talk to the MI server', done => {
    proxy.sendCommand('foo').then(response => {
      expect(response.resultClass).toEqual('error');
      /* $FlowFixMe */
      done();
    });
  });

  it('should send back results', done => {
    proxy.sendCommand('list-features').then(response => {
      expect(response.resultClass).toEqual('done');
      expect(response.result).toEqual({ features: ['argle', 'bargle', 'blab'] });
      /* $FlowFixMe */
      done();
    });
  });
});